<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="3776px" preserveAspectRatio="none" style="width:9745px;height:3776px;" version="1.1" viewBox="0 0 9745 3776" width="9745px" zoomAndPan="magnify"><defs><filter height="300%" id="fyifc8oh1zrtn" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[fa8fa9829844c679b6e15f80bfb3e27b]
class CSDSNSolver--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="188.8516" id="CSDSNSolver" style="stroke: #A80036; stroke-width: 1.5;" width="227" x="8961.5" y="1300"/><ellipse cx="9030.75" cy="1316" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9033.7188,1321.6406 Q9033.1406,1321.9375 9032.5,1322.0781 Q9031.8594,1322.2344 9031.1563,1322.2344 Q9028.6563,1322.2344 9027.3281,1320.5938 Q9026.0156,1318.9375 9026.0156,1315.8125 Q9026.0156,1312.6875 9027.3281,1311.0313 Q9028.6563,1309.375 9031.1563,1309.375 Q9031.8594,1309.375 9032.5,1309.5313 Q9033.1563,1309.6875 9033.7188,1309.9844 L9033.7188,1312.7031 Q9033.0938,1312.125 9032.5,1311.8594 Q9031.9063,1311.5781 9031.2813,1311.5781 Q9029.9375,1311.5781 9029.25,1312.6563 Q9028.5625,1313.7188 9028.5625,1315.8125 Q9028.5625,1317.9063 9029.25,1318.9844 Q9029.9375,1320.0469 9031.2813,1320.0469 Q9031.9063,1320.0469 9032.5,1319.7813 Q9033.0938,1319.5 9033.7188,1318.9219 L9033.7188,1321.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="9051.25" y="1320.1543">CSDSNSolver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8962.5" x2="9187.5" y1="1332" y2="1332"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8969.5" y="1340"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="8981.5" y="1346.2104">_physics : Physics*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8969.5" y="1352.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="8981.5" y="1359.0151">_angle : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8969.5" y="1365.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="8981.5" y="1371.8198">_density : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8969.5" y="1378.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="8981.5" y="1384.6245">_energies : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8969.5" y="1391.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="8981.5" y="1397.4292">_sigmaTE : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8969.5" y="1404.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="8981.5" y="1410.2339">_sigmaSE : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8969.5" y="1416.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="8981.5" y="1423.0386">_dose : std::vector&lt;double&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8962.5" x2="9187.5" y1="1429.6328" y2="1429.6328"/><ellipse cx="8972.5" cy="1440.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="8981.5" y="1443.8433">CSDSNSolver(Config* settings)</text><ellipse cx="8972.5" cy="1453.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="8981.5" y="1456.6479">Save() : void {query}</text><ellipse cx="8972.5" cy="1466.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="8981.5" y="1469.4526">Save(int currEnergy) : void {query}</text><ellipse cx="8972.5" cy="1479.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="8981.5" y="1482.2573">Solve() : void</text><!--MD5=[d1bc18906ee38dcc4f14e2fc9402119a]
class Checkerboard--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="201.6563" id="Checkerboard" style="stroke: #A80036; stroke-width: 1.5;" width="519" x="6530.5" y="1293.5"/><ellipse cx="6741.75" cy="1309.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6744.7188,1315.1406 Q6744.1406,1315.4375 6743.5,1315.5781 Q6742.8594,1315.7344 6742.1563,1315.7344 Q6739.6563,1315.7344 6738.3281,1314.0938 Q6737.0156,1312.4375 6737.0156,1309.3125 Q6737.0156,1306.1875 6738.3281,1304.5313 Q6739.6563,1302.875 6742.1563,1302.875 Q6742.8594,1302.875 6743.5,1303.0313 Q6744.1563,1303.1875 6744.7188,1303.4844 L6744.7188,1306.2031 Q6744.0938,1305.625 6743.5,1305.3594 Q6742.9063,1305.0781 6742.2813,1305.0781 Q6740.9375,1305.0781 6740.25,1306.1563 Q6739.5625,1307.2188 6739.5625,1309.3125 Q6739.5625,1311.4063 6740.25,1312.4844 Q6740.9375,1313.5469 6742.2813,1313.5469 Q6742.9063,1313.5469 6743.5,1313.2813 Q6744.0938,1313 6744.7188,1312.4219 L6744.7188,1315.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="6762.25" y="1313.6543">Checkerboard</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6531.5" x2="7048.5" y1="1325.5" y2="1325.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6538.5" y="1333.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="6550.5" y="1339.7104">_scatteringXS : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6538.5" y="1346.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="6550.5" y="1352.5151">_totalXS : Vector</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6531.5" x2="7048.5" y1="1359.1094" y2="1359.1094"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6538.5" y="1367.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="6550.5" y="1373.3198">Checkerboard()</text><ellipse cx="6541.5" cy="1382.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="6550.5" y="1386.1245">Checkerboard(Config* settings, Mesh* mesh)</text><ellipse cx="6541.5" cy="1395.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="6550.5" y="1398.9292">~Checkerboard()</text><ellipse cx="6541.5" cy="1408.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="6550.5" y="1411.7339">GetScatteringXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="6541.5" cy="1421.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="6550.5" y="1424.5386">GetTotalXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="6541.5" cy="1434.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="6550.5" y="1437.3433">SetupIC() : VectorVector</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6538.5" y="1443.9375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="6550.5" y="1450.1479">isAbsorption(const Vector&amp; pos) : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6538.5" y="1456.7422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="6550.5" y="1462.9526">isSource(const Vector&amp; pos) : bool {query}</text><ellipse cx="6541.5" cy="1472.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="6550.5" y="1475.7573">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="6541.5" cy="1485.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="6550.5" y="1488.562">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><!--MD5=[4bf8aff396996fef456cd268939daa24]
class Config--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="1110.7891" id="Config" style="stroke: #A80036; stroke-width: 1.5;" width="836" x="2189" y="1754"/><ellipse cx="2583.25" cy="1770" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2586.2188,1775.6406 Q2585.6406,1775.9375 2585,1776.0781 Q2584.3594,1776.2344 2583.6563,1776.2344 Q2581.1563,1776.2344 2579.8281,1774.5938 Q2578.5156,1772.9375 2578.5156,1769.8125 Q2578.5156,1766.6875 2579.8281,1765.0313 Q2581.1563,1763.375 2583.6563,1763.375 Q2584.3594,1763.375 2585,1763.5313 Q2585.6563,1763.6875 2586.2188,1763.9844 L2586.2188,1766.7031 Q2585.5938,1766.125 2585,1765.8594 Q2584.4063,1765.5781 2583.7813,1765.5781 Q2582.4375,1765.5781 2581.75,1766.6563 Q2581.0625,1767.7188 2581.0625,1769.8125 Q2581.0625,1771.9063 2581.75,1772.9844 Q2582.4375,1774.0469 2583.7813,1774.0469 Q2584.4063,1774.0469 2585,1773.7813 Q2585.5938,1773.5 2586.2188,1772.9219 L2586.2188,1775.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="39" x="2603.75" y="1774.1543">Config</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2190" x2="3024" y1="1786" y2="1786"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1794"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2209" y="1800.2104">_entropyName : ENTROPY_NAME</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1806.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2209" y="1813.0151">_kernelName : KERNEL_NAME</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1819.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="2209" y="1825.8198">_entropyOptimizerName : OPTIMIZER_NAME</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1832.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2209" y="1838.6245">_problemName : PROBLEM_NAME</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1845.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2209" y="1851.4292">_quadName : QUAD_NAME</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1858.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="2209" y="1864.2339">_solverName : SOLVER_NAME</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1870.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2209" y="1877.0386">_baseConfig : bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1883.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="2209" y="1889.8433">_cleanFluxMat : bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1896.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="2209" y="1902.6479">_csd : bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1909.2422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="2209" y="1915.4526">_newtonFastMode : bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1922.0469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="2209" y="1928.2573">_CFL : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1934.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="2209" y="1941.062">_newtonStepSize : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1947.6563"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="2209" y="1953.8667">_optimizerEpsilon : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1960.4609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2209" y="1966.6714">_tEnd : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1973.2656"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="2209" y="1979.4761">_optionMap : std::map&lt;std::string, OptionBase*&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1986.0703"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2209" y="1992.2808">_allOptions : std::map&lt;std::string, bool&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="1998.875"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2209" y="2005.0854">_ctFile : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2011.6797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2209" y="2017.8901">_fileName : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2024.4844"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2209" y="2030.6948">_inputDir : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2037.2891"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="2209" y="2043.4995">_logDir : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2050.0938"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="2209" y="2056.3042">_meshFile : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2062.8984"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2209" y="2069.1089">_outputDir : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2075.7031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="2209" y="2081.9136">_outputFile : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2088.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="2209" y="2094.7183">_boundaries : std::vector&lt;std::pair&lt;std::string, BOUNDARY_TYPE&gt; &gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2101.3125"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="2209" y="2107.5229">_MarkerDirichlet : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2114.1172"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="2209" y="2120.3276">_MarkerNeumann : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2126.9219"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2209" y="2133.1323">_nCells : unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2139.7266"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="2209" y="2145.937">_nQuadPoints : unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2152.5313"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="2209" y="2158.7417">_maxMomentDegree : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2165.3359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="2209" y="2171.5464">_nMarkerDirichlet : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2178.1406"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="2209" y="2184.3511">_nMarkerNeumann : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2190.9453"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="2209" y="2197.1558">_newtonIter : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2203.75"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="2209" y="2209.9604">_newtonLineSearchIter : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2216.5547"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2209" y="2222.7651">_quadOrder : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2229.3594"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="2209" y="2235.5698">_reconsOrder : unsigned short</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2190" x2="3024" y1="2242.1641" y2="2242.1641"/><ellipse cx="2200" cy="2253.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="2209" y="2256.3745">Config(std::string case_filename)</text><ellipse cx="2200" cy="2265.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="2209" y="2269.1792">~Config(void)</text><ellipse cx="2200" cy="2278.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="2209" y="2281.9839">GetBoundaryType(std::string nameMarker) : BOUNDARY_TYPE {query}</text><ellipse cx="2200" cy="2291.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="2209" y="2294.7886">GetEntropyName() : ENTROPY_NAME {query}</text><ellipse cx="2200" cy="2304.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2209" y="2307.5933">GetKernelName() : KERNEL_NAME {query}</text><ellipse cx="2200" cy="2317.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="275" x="2209" y="2320.3979">GetOptimizerName() : OPTIMIZER_NAME {query}</text><ellipse cx="2200" cy="2329.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="2209" y="2333.2026">GetProblemName() : PROBLEM_NAME {query}</text><ellipse cx="2200" cy="2342.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="2209" y="2346.0073">GetQuadName() : QUAD_NAME {query}</text><ellipse cx="2200" cy="2355.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="2209" y="2358.812">GetSolverName() : SOLVER_NAME {query}</text><ellipse cx="2200" cy="2368.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2209" y="2371.6167">GetCleanFluxMat() : bool {query}</text><ellipse cx="2200" cy="2381.2109" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="2209" y="2384.4214">GetNewtonFastMode() : bool {query}</text><ellipse cx="2200" cy="2394.0156" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="2209" y="2397.2261">IsCSD() : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2403.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="601" x="2209" y="2410.0308">TokenizeString(std::string&amp; str, std::string&amp; option_name, std::vector&lt;std::string&gt;&amp; option_value) : bool</text><ellipse cx="2200" cy="2419.625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2209" y="2422.8354">GetCFL() : double {query}</text><ellipse cx="2200" cy="2432.4297" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="2209" y="2435.6401">GetNewtonOptimizerEpsilon() : double {query}</text><ellipse cx="2200" cy="2445.2344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="2209" y="2448.4448">GetNewtonStepSize() : double {query}</text><ellipse cx="2200" cy="2458.0391" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="2209" y="2461.2495">GetTEnd() : double {query}</text><ellipse cx="2200" cy="2470.8438" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2209" y="2474.0542">GetCTFile() : std::string {query}</text><ellipse cx="2200" cy="2483.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="2209" y="2486.8589">GetLogDir() : std::string {query}</text><ellipse cx="2200" cy="2496.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="2209" y="2499.6636">GetMeshFile() : std::string {query}</text><ellipse cx="2200" cy="2509.2578" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="2209" y="2512.4683">GetOutputDir() : std::string {query}</text><ellipse cx="2200" cy="2522.0625" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="2209" y="2525.2729">GetOutputFile() : std::string {query}</text><ellipse cx="2200" cy="2534.8672" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="2209" y="2538.0776">GetMaxLineSearches() : unsigned {query}</text><ellipse cx="2200" cy="2547.6719" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="2209" y="2550.8823">GetMaxMomentDegree() : unsigned</text><ellipse cx="2200" cy="2560.4766" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="2209" y="2563.687">GetNCells() : unsigned</text><ellipse cx="2200" cy="2573.2813" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2209" y="2576.4917">GetNQuadPoints() : unsigned</text><ellipse cx="2200" cy="2586.0859" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="2209" y="2589.2964">GetNewtonIter() : unsigned {query}</text><ellipse cx="2200" cy="2598.8906" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="2209" y="2602.1011">GetReconsOrder() : unsigned</text><ellipse cx="2200" cy="2611.6953" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="2209" y="2614.9058">GetMaxMomentDegree() : unsigned short {query}</text><ellipse cx="2200" cy="2624.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="2209" y="2627.7104">GetQuadOrder() : unsigned short {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2634.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="478" x="2209" y="2640.5151">AddBoolOption(const std::string name, bool&amp; option_field, bool default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2647.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="520" x="2209" y="2653.3198">AddDoubleOption(const std::string name, double&amp; option_field, double default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2659.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="810" x="2209" y="2666.1245">AddEnumOption(const std::string name, Tenum&amp; option_field, const std::map&lt;std::string, Tenum&gt;&amp; enum_map, Tenum default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2672.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="473" x="2209" y="2678.9292">AddIntegerOption(const std::string name, int&amp; option_field, int default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2685.5234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="2209" y="2691.7339">AddLongOption(const std::string name, long&amp; option_field, long default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2698.3281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="690" x="2209" y="2704.5386">AddStringListOption(const std::string name, unsigned short&amp; num_marker, std::vector&lt;std::string&gt;&amp; option_field) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2711.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="557" x="2209" y="2717.3433">AddStringOption(const std::string name, std::string&amp; option_field, std::string default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2723.9375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="645" x="2209" y="2730.1479">AddUnsignedLongOption(const std::string name, unsigned long&amp; option_field, unsigned long default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2736.7422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="661" x="2209" y="2742.9526">AddUnsignedShortOption(const std::string name, unsigned short&amp; option_field, unsigned short default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2749.5469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="2209" y="2755.7573">InitLogger() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2762.3516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2209" y="2768.562">SetConfigOptions(void) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2775.1563"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="2209" y="2781.3667">SetConfigParsing(std::string case_filename) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2787.9609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="2209" y="2794.1714">SetDefault(void) : void</text><ellipse cx="2200" cy="2803.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="2209" y="2806.9761">SetNCells(unsigned nCells) : void</text><ellipse cx="2200" cy="2816.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="2209" y="2819.7808">SetNQuadPoints(unsigned nq) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2826.375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="2209" y="2832.5854">SetOutput(void) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2839.1797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2209" y="2845.3901">SetPointersNull(void) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2197" y="2851.9844"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2209" y="2858.1948">SetPostprocessing(void) : void</text><!--MD5=[75f0b6b59a9da2f25653aa608c95a980]
class Cubic2DSpline--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="163.2422" id="Cubic2DSpline" style="stroke: #A80036; stroke-width: 1.5;" width="421" x="1775.5" y="130"/><ellipse cx="1937.25" cy="146" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1940.2188,151.6406 Q1939.6406,151.9375 1939,152.0781 Q1938.3594,152.2344 1937.6563,152.2344 Q1935.1563,152.2344 1933.8281,150.5938 Q1932.5156,148.9375 1932.5156,145.8125 Q1932.5156,142.6875 1933.8281,141.0313 Q1935.1563,139.375 1937.6563,139.375 Q1938.3594,139.375 1939,139.5313 Q1939.6563,139.6875 1940.2188,139.9844 L1940.2188,142.7031 Q1939.5938,142.125 1939,141.8594 Q1938.4063,141.5781 1937.7813,141.5781 Q1936.4375,141.5781 1935.75,142.6563 Q1935.0625,143.7188 1935.0625,145.8125 Q1935.0625,147.9063 1935.75,148.9844 Q1936.4375,150.0469 1937.7813,150.0469 Q1938.4063,150.0469 1939,149.7813 Q1939.5938,149.5 1940.2188,148.9219 L1940.2188,151.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="89" x="1957.75" y="150.1543">Cubic2DSpline</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1776.5" x2="2195.5" y1="162" y2="162"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1783.5" y="170"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="1795.5" y="176.2104">_data : Matrix</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1783.5" y="182.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="1795.5" y="189.0151">_x : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1783.5" y="195.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="1795.5" y="201.8198">_y : Vector</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1776.5" x2="2195.5" y1="208.4141" y2="208.4141"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1783.5" y="216.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1795.5" y="222.6245">Cubic2DSpline()</text><ellipse cx="1786.5" cy="232.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="395" x="1795.5" y="235.4292">Cubic2DSpline(const Vector&amp; x, const Vector&amp; y, const Matrix&amp; data)</text><ellipse cx="1786.5" cy="245.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="1795.5" y="248.2339">~Cubic2DSpline()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1783.5" y="254.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="1795.5" y="261.0386">interpolate1D(double param, double x) : double</text><ellipse cx="1786.5" cy="270.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="1795.5" y="273.8433">operator()(double x, double y) : double</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1783.5" y="280.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="360" x="1795.5" y="286.6479">indexOfClosestValue(double value, const Vector&amp; v) : unsigned</text><!--MD5=[c35c8d49414e6f5af323bf3b6ac77d2a]
class ElectronRT--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="201.6563" id="ElectronRT" style="stroke: #A80036; stroke-width: 1.5;" width="519" x="7156.5" y="1293.5"/><ellipse cx="7378.25" cy="1309.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7381.2188,1315.1406 Q7380.6406,1315.4375 7380,1315.5781 Q7379.3594,1315.7344 7378.6563,1315.7344 Q7376.1563,1315.7344 7374.8281,1314.0938 Q7373.5156,1312.4375 7373.5156,1309.3125 Q7373.5156,1306.1875 7374.8281,1304.5313 Q7376.1563,1302.875 7378.6563,1302.875 Q7379.3594,1302.875 7380,1303.0313 Q7380.6563,1303.1875 7381.2188,1303.4844 L7381.2188,1306.2031 Q7380.5938,1305.625 7380,1305.3594 Q7379.4063,1305.0781 7378.7813,1305.0781 Q7377.4375,1305.0781 7376.75,1306.1563 Q7376.0625,1307.2188 7376.0625,1309.3125 Q7376.0625,1311.4063 7376.75,1312.4844 Q7377.4375,1313.5469 7378.7813,1313.5469 Q7379.4063,1313.5469 7380,1313.2813 Q7380.5938,1313 7381.2188,1312.4219 L7381.2188,1315.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="7398.75" y="1313.6543">ElectronRT</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7157.5" x2="7674.5" y1="1325.5" y2="1325.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7157.5" x2="7674.5" y1="1333.5" y2="1333.5"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="7164.5" y="1341.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="7176.5" y="1347.7104">ElectronRT()</text><ellipse cx="7167.5" cy="1357.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="7176.5" y="1360.5151">ElectronRT(Config* settings, Mesh* mesh)</text><ellipse cx="7167.5" cy="1370.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="7176.5" y="1373.3198">~ElectronRT()</text><ellipse cx="7167.5" cy="1382.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="7176.5" y="1386.1245">GetTotalXSE(const Vector&amp; energies) : Vector</text><ellipse cx="7167.5" cy="1395.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="7176.5" y="1398.9292">GetScatteringXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="7167.5" cy="1408.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="7176.5" y="1411.7339">GetScatteringXSE(const Vector&amp; energies, const Vector&amp; angles) : VectorVector</text><ellipse cx="7167.5" cy="1421.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="7176.5" y="1424.5386">GetTotalXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="7167.5" cy="1434.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="7176.5" y="1437.3433">SetupIC() : VectorVector</text><ellipse cx="7167.5" cy="1446.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="7176.5" y="1450.1479">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="7167.5" cy="1459.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="393" x="7176.5" y="1462.9526">GetDensity(const VectorVector&amp; cellMidPoints) : std::vector&lt;double&gt;</text><ellipse cx="7167.5" cy="1472.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="7176.5" y="1475.7573">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="7164.5" y="1482.3516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="7176.5" y="1488.562">LoadXSH20(std::string fileSigmaS, std::string fileSigmaT) : void</text><!--MD5=[d54546bc0a5202e6cbf86d280acc38cb]
class EntropyBase--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="163.2422" id="EntropyBase" style="stroke: #A80036; stroke-width: 1.5;" width="254" x="3060" y="2228"/><ellipse cx="3143.25" cy="2244" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3143.3594,2239.3438 L3142.2031,2244.4219 L3144.5313,2244.4219 L3143.3594,2239.3438 Z M3141.875,2237.1094 L3144.8594,2237.1094 L3148.2188,2249.5 L3145.7656,2249.5 L3145,2246.4375 L3141.7188,2246.4375 L3140.9688,2249.5 L3138.5313,2249.5 L3141.875,2237.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="79" x="3163.75" y="2248.1543">EntropyBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3061" x2="3313" y1="2260" y2="2260"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3061" x2="3313" y1="2268" y2="2268"/><ellipse cx="3071" cy="2279" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="3080" y="2282.2104">EntropyBase()</text><ellipse cx="3071" cy="2291.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="3080" y="2295.0151">~EntropyBase()</text><ellipse cx="3071" cy="2304.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="228" x="3080" y="2307.8198">Create(Config* settings) : EntropyBase*</text><ellipse cx="3071" cy="2317.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="169" x="3080" y="2320.6245">CheckDomain(double z) : bool</text><ellipse cx="3071" cy="2330.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="3080" y="2333.4292">Entropy(double z) : double</text><ellipse cx="3071" cy="2343.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="176" x="3080" y="2346.2339">EntropyDual(double y) : double</text><ellipse cx="3071" cy="2355.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="220" x="3080" y="2359.0386">EntropyHessianDual(double y) : double</text><ellipse cx="3071" cy="2368.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="183" x="3080" y="2371.8433">EntropyPrime(double z) : double</text><ellipse cx="3071" cy="2381.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="208" x="3080" y="2384.6479">EntropyPrimeDual(double z) : double</text><!--MD5=[60673fa564197751d7da20348890f532]
class ErrorMessages--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="86.4141" id="ErrorMessages" style="stroke: #A80036; stroke-width: 1.5;" width="457" x="2231.5" y="168.5"/><ellipse cx="2408.75" cy="184.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2411.7188,190.1406 Q2411.1406,190.4375 2410.5,190.5781 Q2409.8594,190.7344 2409.1563,190.7344 Q2406.6563,190.7344 2405.3281,189.0938 Q2404.0156,187.4375 2404.0156,184.3125 Q2404.0156,181.1875 2405.3281,179.5313 Q2406.6563,177.875 2409.1563,177.875 Q2409.8594,177.875 2410.5,178.0313 Q2411.1563,178.1875 2411.7188,178.4844 L2411.7188,181.2031 Q2411.0938,180.625 2410.5,180.3594 Q2409.9063,180.0781 2409.2813,180.0781 Q2407.9375,180.0781 2407.25,181.1563 Q2406.5625,182.2188 2406.5625,184.3125 Q2406.5625,186.4063 2407.25,187.4844 Q2407.9375,188.5469 2409.2813,188.5469 Q2409.9063,188.5469 2410.5,188.2813 Q2411.0938,188 2411.7188,187.4219 L2411.7188,190.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="94" x="2429.25" y="188.6543">ErrorMessages</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2232.5" x2="2687.5" y1="200.5" y2="200.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2232.5" x2="2687.5" y1="208.5" y2="208.5"/><ellipse cx="2242.5" cy="219.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2251.5" y="222.7104">ErrorMessages()</text><ellipse cx="2242.5" cy="232.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="338" x="2251.5" y="235.5151">Error(std::string ErrorMsg, std::string FunctionName) : void</text><ellipse cx="2242.5" cy="245.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="431" x="2251.5" y="248.3198">OptionNotSetError(std::string OptionName, std::string FunctionName) : void</text><!--MD5=[7273993b947472dcb685fe33c2f03714]
class Isotropic--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="99.2188" id="Isotropic" style="stroke: #A80036; stroke-width: 1.5;" width="194" x="9186" y="3079"/><ellipse cx="9251.75" cy="3095" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9254.7188,3100.6406 Q9254.1406,3100.9375 9253.5,3101.0781 Q9252.8594,3101.2344 9252.1563,3101.2344 Q9249.6563,3101.2344 9248.3281,3099.5938 Q9247.0156,3097.9375 9247.0156,3094.8125 Q9247.0156,3091.6875 9248.3281,3090.0313 Q9249.6563,3088.375 9252.1563,3088.375 Q9252.8594,3088.375 9253.5,3088.5313 Q9254.1563,3088.6875 9254.7188,3088.9844 L9254.7188,3091.7031 Q9254.0938,3091.125 9253.5,3090.8594 Q9252.9063,3090.5781 9252.2813,3090.5781 Q9250.9375,3090.5781 9250.25,3091.6563 Q9249.5625,3092.7188 9249.5625,3094.8125 Q9249.5625,3096.9063 9250.25,3097.9844 Q9250.9375,3099.0469 9252.2813,3099.0469 Q9252.9063,3099.0469 9253.5,3098.7813 Q9254.0938,3098.5 9254.7188,3097.9219 L9254.7188,3100.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="54" x="9272.25" y="3099.1543">Isotropic</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9187" x2="9379" y1="3111" y2="3111"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="9187" x2="9379" y1="3119" y2="3119"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9194" y="3127"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="9206" y="3133.2104">Isotropic()</text><ellipse cx="9197" cy="3142.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="9206" y="3146.0151">Isotropic(QuadratureBase* q)</text><ellipse cx="9197" cy="3155.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="9206" y="3158.8198">~Isotropic()</text><ellipse cx="9197" cy="3168.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="9206" y="3171.6245">GetScatteringKernel() : Matrix</text><!--MD5=[434c416ea250d0fb02aea8eaa724f3e0]
class Isotropic1D--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="99.2188" id="Isotropic1D" style="stroke: #A80036; stroke-width: 1.5;" width="209" x="9415.5" y="3079"/><ellipse cx="9480.25" cy="3095" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9483.2188,3100.6406 Q9482.6406,3100.9375 9482,3101.0781 Q9481.3594,3101.2344 9480.6563,3101.2344 Q9478.1563,3101.2344 9476.8281,3099.5938 Q9475.5156,3097.9375 9475.5156,3094.8125 Q9475.5156,3091.6875 9476.8281,3090.0313 Q9478.1563,3088.375 9480.6563,3088.375 Q9481.3594,3088.375 9482,3088.5313 Q9482.6563,3088.6875 9483.2188,3088.9844 L9483.2188,3091.7031 Q9482.5938,3091.125 9482,3090.8594 Q9481.4063,3090.5781 9480.7813,3090.5781 Q9479.4375,3090.5781 9478.75,3091.6563 Q9478.0625,3092.7188 9478.0625,3094.8125 Q9478.0625,3096.9063 9478.75,3097.9844 Q9479.4375,3099.0469 9480.7813,3099.0469 Q9481.4063,3099.0469 9482,3098.7813 Q9482.5938,3098.5 9483.2188,3097.9219 L9483.2188,3100.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="71" x="9500.75" y="3099.1543">Isotropic1D</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9416.5" x2="9623.5" y1="3111" y2="3111"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="9416.5" x2="9623.5" y1="3119" y2="3119"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9423.5" y="3127"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="9435.5" y="3133.2104">Isotropic1D()</text><ellipse cx="9426.5" cy="3142.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="9435.5" y="3146.0151">Isotropic1D(QuadratureBase* q)</text><ellipse cx="9426.5" cy="3155.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="9435.5" y="3158.8198">~Isotropic1D()</text><ellipse cx="9426.5" cy="3168.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="9435.5" y="3171.6245">GetScatteringKernel() : Matrix</text><!--MD5=[041e745b51d1bd870567d4f38869c776]
class LaxFriedrichsFlux--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="86.4141" id="LaxFriedrichsFlux" style="stroke: #A80036; stroke-width: 1.5;" width="529" x="4620.5" y="1351.5"/><ellipse cx="4828.25" cy="1367.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4831.2188,1373.1406 Q4830.6406,1373.4375 4830,1373.5781 Q4829.3594,1373.7344 4828.6563,1373.7344 Q4826.1563,1373.7344 4824.8281,1372.0938 Q4823.5156,1370.4375 4823.5156,1367.3125 Q4823.5156,1364.1875 4824.8281,1362.5313 Q4826.1563,1360.875 4828.6563,1360.875 Q4829.3594,1360.875 4830,1361.0313 Q4830.6563,1361.1875 4831.2188,1361.4844 L4831.2188,1364.2031 Q4830.5938,1363.625 4830,1363.3594 Q4829.4063,1363.0781 4828.7813,1363.0781 Q4827.4375,1363.0781 4826.75,1364.1563 Q4826.0625,1365.2188 4826.0625,1367.3125 Q4826.0625,1369.4063 4826.75,1370.4844 Q4827.4375,1371.5469 4828.7813,1371.5469 Q4829.4063,1371.5469 4830,1371.2813 Q4830.5938,1371 4831.2188,1370.4219 L4831.2188,1373.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="105" x="4848.75" y="1371.6543">LaxFriedrichsFlux</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4621.5" x2="5148.5" y1="1383.5" y2="1383.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4628.5" y="1391.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="4640.5" y="1397.7104">_dt : double</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4621.5" x2="5148.5" y1="1404.3047" y2="1404.3047"/><ellipse cx="4631.5" cy="1415.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="4640.5" y="1418.5151">LaxFriedrichsFlux()</text><ellipse cx="4631.5" cy="1428.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="4640.5" y="1431.3198">Flux(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><!--MD5=[e262b70d9077d2c30731c187b2e5bc09]
class LineSource_PN--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="163.2422" id="LineSource_PN" style="stroke: #A80036; stroke-width: 1.5;" width="519" x="7710.5" y="1313"/><ellipse cx="7919.75" cy="1329" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7922.7188,1334.6406 Q7922.1406,1334.9375 7921.5,1335.0781 Q7920.8594,1335.2344 7920.1563,1335.2344 Q7917.6563,1335.2344 7916.3281,1333.5938 Q7915.0156,1331.9375 7915.0156,1328.8125 Q7915.0156,1325.6875 7916.3281,1324.0313 Q7917.6563,1322.375 7920.1563,1322.375 Q7920.8594,1322.375 7921.5,1322.5313 Q7922.1563,1322.6875 7922.7188,1322.9844 L7922.7188,1325.7031 Q7922.0938,1325.125 7921.5,1324.8594 Q7920.9063,1324.5781 7920.2813,1324.5781 Q7918.9375,1324.5781 7918.25,1325.6563 Q7917.5625,1326.7188 7917.5625,1328.8125 Q7917.5625,1330.9063 7918.25,1331.9844 Q7918.9375,1333.0469 7920.2813,1333.0469 Q7920.9063,1333.0469 7921.5,1332.7813 Q7922.0938,1332.5 7922.7188,1331.9219 L7922.7188,1334.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="92" x="7940.25" y="1333.1543">LineSource_PN</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7711.5" x2="8228.5" y1="1345" y2="1345"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7711.5" x2="8228.5" y1="1353" y2="1353"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="7718.5" y="1361"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="7730.5" y="1367.2104">LineSource_PN()</text><ellipse cx="7721.5" cy="1376.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="7730.5" y="1380.0151">LineSource_PN(Config* settings, Mesh* mesh)</text><ellipse cx="7721.5" cy="1389.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="7730.5" y="1392.8198">~LineSource_PN()</text><ellipse cx="7721.5" cy="1402.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="7730.5" y="1405.6245">GetScatteringXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="7721.5" cy="1415.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="7730.5" y="1418.4292">GetTotalXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="7721.5" cy="1428.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="7730.5" y="1431.2339">SetupIC() : VectorVector</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="7718.5" y="1437.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="7730.5" y="1444.0386">GlobalIndex(int l, int k) : int {query}</text><ellipse cx="7721.5" cy="1453.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="7730.5" y="1456.8433">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="7721.5" cy="1466.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="7730.5" y="1469.6479">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><!--MD5=[c6591e1b0137c1f7adfdba2da1ec1a14]
class LineSource_SN--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="150.4375" id="LineSource_SN" style="stroke: #A80036; stroke-width: 1.5;" width="519" x="8264.5" y="1319.5"/><ellipse cx="8473.75" cy="1335.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8476.7188,1341.1406 Q8476.1406,1341.4375 8475.5,1341.5781 Q8474.8594,1341.7344 8474.1563,1341.7344 Q8471.6563,1341.7344 8470.3281,1340.0938 Q8469.0156,1338.4375 8469.0156,1335.3125 Q8469.0156,1332.1875 8470.3281,1330.5313 Q8471.6563,1328.875 8474.1563,1328.875 Q8474.8594,1328.875 8475.5,1329.0313 Q8476.1563,1329.1875 8476.7188,1329.4844 L8476.7188,1332.2031 Q8476.0938,1331.625 8475.5,1331.3594 Q8474.9063,1331.0781 8474.2813,1331.0781 Q8472.9375,1331.0781 8472.25,1332.1563 Q8471.5625,1333.2188 8471.5625,1335.3125 Q8471.5625,1337.4063 8472.25,1338.4844 Q8472.9375,1339.5469 8474.2813,1339.5469 Q8474.9063,1339.5469 8475.5,1339.2813 Q8476.0938,1339 8476.7188,1338.4219 L8476.7188,1341.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="92" x="8494.25" y="1339.6543">LineSource_SN</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8265.5" x2="8782.5" y1="1351.5" y2="1351.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8265.5" x2="8782.5" y1="1359.5" y2="1359.5"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8272.5" y="1367.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="8284.5" y="1373.7104">LineSource_SN()</text><ellipse cx="8275.5" cy="1383.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="8284.5" y="1386.5151">LineSource_SN(Config* settings, Mesh* mesh)</text><ellipse cx="8275.5" cy="1396.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="8284.5" y="1399.3198">~LineSource_SN()</text><ellipse cx="8275.5" cy="1408.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="8284.5" y="1412.1245">GetScatteringXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="8275.5" cy="1421.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="8284.5" y="1424.9292">GetTotalXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="8275.5" cy="1434.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="8284.5" y="1437.7339">SetupIC() : VectorVector</text><ellipse cx="8275.5" cy="1447.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="8284.5" y="1450.5386">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="8275.5" cy="1460.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="8284.5" y="1463.3433">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><!--MD5=[c76d395e7ad9096c1eaf2eb1a7befa0d]
class LineSource_SN_Pseudo1D--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="86.4141" id="LineSource_SN_Pseudo1D" style="stroke: #A80036; stroke-width: 1.5;" width="354" x="7862" y="2266.5"/><ellipse cx="7953.75" cy="2282.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7956.7188,2288.1406 Q7956.1406,2288.4375 7955.5,2288.5781 Q7954.8594,2288.7344 7954.1563,2288.7344 Q7951.6563,2288.7344 7950.3281,2287.0938 Q7949.0156,2285.4375 7949.0156,2282.3125 Q7949.0156,2279.1875 7950.3281,2277.5313 Q7951.6563,2275.875 7954.1563,2275.875 Q7954.8594,2275.875 7955.5,2276.0313 Q7956.1563,2276.1875 7956.7188,2276.4844 L7956.7188,2279.2031 Q7956.0938,2278.625 7955.5,2278.3594 Q7954.9063,2278.0781 7954.2813,2278.0781 Q7952.9375,2278.0781 7952.25,2279.1563 Q7951.5625,2280.2188 7951.5625,2282.3125 Q7951.5625,2284.4063 7952.25,2285.4844 Q7952.9375,2286.5469 7954.2813,2286.5469 Q7954.9063,2286.5469 7955.5,2286.2813 Q7956.0938,2286 7956.7188,2285.4219 L7956.7188,2288.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="162" x="7974.25" y="2286.6543">LineSource_SN_Pseudo1D</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7863" x2="8215" y1="2298.5" y2="2298.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7863" x2="8215" y1="2306.5" y2="2306.5"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="7870" y="2314.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="7882" y="2320.7104">LineSource_SN_Pseudo1D()</text><ellipse cx="7873" cy="2330.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="7882" y="2333.5151">LineSource_SN_Pseudo1D(Config* settings, Mesh* mesh)</text><ellipse cx="7873" cy="2343.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="7882" y="2346.3198">SetupIC() : VectorVector</text><!--MD5=[7eb692890580fae833ec9fabecfed6d6]
class MNSolver--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="304.0938" id="MNSolver" style="stroke: #A80036; stroke-width: 1.5;" width="256" x="3036" y="603"/><ellipse cx="3131.25" cy="619" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3134.2188,624.6406 Q3133.6406,624.9375 3133,625.0781 Q3132.3594,625.2344 3131.6563,625.2344 Q3129.1563,625.2344 3127.8281,623.5938 Q3126.5156,621.9375 3126.5156,618.8125 Q3126.5156,615.6875 3127.8281,614.0313 Q3129.1563,612.375 3131.6563,612.375 Q3132.3594,612.375 3133,612.5313 Q3133.6563,612.6875 3134.2188,612.9844 L3134.2188,615.7031 Q3133.5938,615.125 3133,614.8594 Q3132.4063,614.5781 3131.7813,614.5781 Q3130.4375,614.5781 3129.75,615.6563 Q3129.0625,616.7188 3129.0625,618.8125 Q3129.0625,620.9063 3129.75,621.9844 Q3130.4375,623.0469 3131.7813,623.0469 Q3132.4063,623.0469 3133,622.7813 Q3133.5938,622.5 3134.2188,621.9219 L3134.2188,624.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="57" x="3151.75" y="623.1543">MNSolver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3037" x2="3291" y1="635" y2="635"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="643"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3056" y="649.2104">_entropy : EntropyBase*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="655.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="3056" y="662.0151">_optimizer : OptimizerBase*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="668.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="3056" y="674.8198">_basis : SphericalHarmonics*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="681.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3056" y="687.6245">_scatterMatDiag : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="694.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3056" y="700.4292">_weights : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="707.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="3056" y="713.2339">_alpha : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="719.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="3056" y="726.0386">_moments : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="732.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3056" y="738.8433">_quadPoints : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="745.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="3056" y="751.6479">_quadPointsSphere : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="758.2422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="3056" y="764.4526">_sigmaA : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="771.0469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3056" y="777.2573">_nTotalEntries : unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="783.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="3056" y="790.062">_nMaxMomentsOrder : unsigned short</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3037" x2="3291" y1="796.6563" y2="796.6563"/><ellipse cx="3047" cy="807.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="3056" y="810.8667">MNSolver(Config* settings)</text><ellipse cx="3047" cy="820.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="3056" y="823.6714">~MNSolver()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="830.2656"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="3056" y="836.4761">ConstructFlux(unsigned idx_cell) : Vector</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="843.0703"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="3056" y="849.2808">GlobalIndex(int l, int k) : int {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3044" y="855.875"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="3056" y="862.0854">ComputeMoments() : void</text><ellipse cx="3047" cy="871.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="3056" y="874.8901">Save() : void {query}</text><ellipse cx="3047" cy="884.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="3056" y="887.6948">Save(int currEnergy) : void {query}</text><ellipse cx="3047" cy="897.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="3056" y="900.4995">Solve() : void</text><!--MD5=[1b7f494b8d8d44be90108f042140a060]
class MaxwellBoltzmannEntropy--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="150.4375" id="MaxwellBoltzmannEntropy" style="stroke: #A80036; stroke-width: 1.5;" width="246" x="3037" y="3053.5"/><ellipse cx="3076.75" cy="3069.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3079.7188,3075.1406 Q3079.1406,3075.4375 3078.5,3075.5781 Q3077.8594,3075.7344 3077.1563,3075.7344 Q3074.6563,3075.7344 3073.3281,3074.0938 Q3072.0156,3072.4375 3072.0156,3069.3125 Q3072.0156,3066.1875 3073.3281,3064.5313 Q3074.6563,3062.875 3077.1563,3062.875 Q3077.8594,3062.875 3078.5,3063.0313 Q3079.1563,3063.1875 3079.7188,3063.4844 L3079.7188,3066.2031 Q3079.0938,3065.625 3078.5,3065.3594 Q3077.9063,3065.0781 3077.2813,3065.0781 Q3075.9375,3065.0781 3075.25,3066.1563 Q3074.5625,3067.2188 3074.5625,3069.3125 Q3074.5625,3071.4063 3075.25,3072.4844 Q3075.9375,3073.5469 3077.2813,3073.5469 Q3077.9063,3073.5469 3078.5,3073.2813 Q3079.0938,3073 3079.7188,3072.4219 L3079.7188,3075.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="159" x="3096.25" y="3073.6543">MaxwellBoltzmannEntropy</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3038" x2="3282" y1="3085.5" y2="3085.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3038" x2="3282" y1="3093.5" y2="3093.5"/><ellipse cx="3048" cy="3104.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="3057" y="3107.7104">MaxwellBoltzmannEntropy()</text><ellipse cx="3048" cy="3117.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="3057" y="3120.5151">~MaxwellBoltzmannEntropy()</text><ellipse cx="3048" cy="3130.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="3057" y="3133.3198">CheckDomain(double z) : bool</text><ellipse cx="3048" cy="3142.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3057" y="3146.1245">Entropy(double z) : double</text><ellipse cx="3048" cy="3155.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="3057" y="3158.9292">EntropyDual(double y) : double</text><ellipse cx="3048" cy="3168.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="3057" y="3171.7339">EntropyHessianDual(double y) : double</text><ellipse cx="3048" cy="3181.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="3057" y="3184.5386">EntropyPrime(double z) : double</text><ellipse cx="3048" cy="3194.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="3057" y="3197.3433">EntropyPrimeDual(double y) : double</text><!--MD5=[49b4333bed3a745cc53311fcf54bbfcc]
class Mesh--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="598.6016" id="Mesh" style="stroke: #A80036; stroke-width: 1.5;" width="934" x="3651" y="1095"/><ellipse cx="4097.25" cy="1111" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4100.2188,1116.6406 Q4099.6406,1116.9375 4099,1117.0781 Q4098.3594,1117.2344 4097.6563,1117.2344 Q4095.1563,1117.2344 4093.8281,1115.5938 Q4092.5156,1113.9375 4092.5156,1110.8125 Q4092.5156,1107.6875 4093.8281,1106.0313 Q4095.1563,1104.375 4097.6563,1104.375 Q4098.3594,1104.375 4099,1104.5313 Q4099.6563,1104.6875 4100.2188,1104.9844 L4100.2188,1107.7031 Q4099.5938,1107.125 4099,1106.8594 Q4098.4063,1106.5781 4097.7813,1106.5781 Q4096.4375,1106.5781 4095.75,1107.6563 Q4095.0625,1108.7188 4095.0625,1110.8125 Q4095.0625,1112.9063 4095.75,1113.9844 Q4096.4375,1115.0469 4097.7813,1115.0469 Q4098.4063,1115.0469 4099,1114.7813 Q4099.5938,1114.5 4100.2188,1113.9219 L4100.2188,1116.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="4117.75" y="1115.1543">Mesh</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3652" x2="4584" y1="1127" y2="1127"/><polygon fill="none" points="3662,1133,3666,1137,3662,1141,3658,1137" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="3671" y="1141.2104">_nodeNeighbors : blaze::CompressedMatrix&lt;bool&gt;</text><polygon fill="none" points="3662,1145.8047,3666,1149.8047,3662,1153.8047,3658,1149.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3671" y="1154.0151">_dim : const unsigned</text><polygon fill="none" points="3662,1158.6094,3666,1162.6094,3662,1166.6094,3658,1162.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="3671" y="1166.8198">_ghostCellID : const unsigned</text><polygon fill="none" points="3662,1171.4141,3666,1175.4141,3662,1179.4141,3658,1175.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3671" y="1179.6245">_numBoundaries : const unsigned</text><polygon fill="none" points="3662,1184.2188,3666,1188.2188,3662,1192.2188,3658,1188.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3671" y="1192.4292">_numCells : const unsigned</text><polygon fill="none" points="3662,1197.0234,3666,1201.0234,3662,1205.0234,3658,1201.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="3671" y="1205.2339">_numNodes : const unsigned</text><polygon fill="none" points="3662,1209.8281,3666,1213.8281,3662,1217.8281,3658,1213.8281" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="3671" y="1218.0386">_numNodesPerCell : const unsigned</text><polygon fill="none" points="3662,1222.6328,3666,1226.6328,3662,1230.6328,3658,1226.6328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="3671" y="1230.8433">_cellBoundaryTypes : std::vector&lt;BOUNDARY_TYPE&gt;</text><polygon fill="none" points="3662,1235.4375,3666,1239.4375,3662,1243.4375,3658,1239.4375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="3671" y="1243.6479">_cellMidPoints : std::vector&lt;Vector&gt;</text><polygon fill="none" points="3662,1248.2422,3666,1252.2422,3662,1256.2422,3658,1252.2422" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="3671" y="1256.4526">_nodes : std::vector&lt;Vector&gt;</text><polygon fill="none" points="3662,1261.0469,3666,1265.0469,3662,1269.0469,3658,1265.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="3671" y="1269.2573">_cellAreas : std::vector&lt;double&gt;</text><polygon fill="none" points="3662,1273.8516,3666,1277.8516,3662,1281.8516,3658,1277.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="3671" y="1282.062">_boundaries : std::vector&lt;std::pair&lt;BOUNDARY_TYPE, std::vector&lt;unsigned&gt; &gt; &gt;</text><polygon fill="none" points="3662,1286.6563,3666,1290.6563,3662,1294.6563,3658,1290.6563" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="3671" y="1294.8667">_bounds : std::vector&lt;std::pair&lt;double, double&gt; &gt;</text><polygon fill="none" points="3662,1299.4609,3666,1303.4609,3662,1307.4609,3658,1303.4609" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="3671" y="1307.6714">_cellNormals : std::vector&lt;std::vector&lt;Vector&gt; &gt;</text><polygon fill="none" points="3662,1312.2656,3666,1316.2656,3662,1320.2656,3658,1316.2656" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="3671" y="1320.4761">_cellNeighbors : std::vector&lt;std::vector&lt;unsigned&gt; &gt;</text><polygon fill="none" points="3662,1325.0703,3666,1329.0703,3662,1333.0703,3658,1329.0703" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="3671" y="1333.2808">_cells : std::vector&lt;std::vector&lt;unsigned&gt; &gt;</text><polygon fill="none" points="3662,1337.875,3666,1341.875,3662,1345.875,3658,1341.875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="3671" y="1346.0854">_colors : std::vector&lt;unsigned&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3652" x2="4584" y1="1352.6797" y2="1352.6797"/><ellipse cx="3662" cy="1363.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="3671" y="1366.8901">Mesh()</text><ellipse cx="3662" cy="1376.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="908" x="3671" y="1379.6948">Mesh(std::vector&lt;Vector&gt; nodes, std::vector&lt;std::vector&lt;unsigned&gt; &gt; cells, std::vector&lt;std::pair&lt;BOUNDARY_TYPE, std::vector&lt;unsigned&gt; &gt; &gt; boundaries)</text><ellipse cx="3662" cy="1389.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="47" x="3671" y="1392.4995">~Mesh()</text><polygon fill="#FFFF44" points="3662,1397.0938,3666,1401.0938,3662,1405.0938,3658,1401.0938" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="3671" y="1405.3042">ComputeOutwardFacingNormal(const Vector&amp; nodeA, const Vector&amp; nodeB, const Vector&amp; cellCenter) : Vector</text><ellipse cx="3662" cy="1414.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="322" x="3671" y="1418.1089">GetDistanceToOrigin(unsigned idx_cell) : double {query}</text><ellipse cx="3662" cy="1427.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="3671" y="1430.9136">GetBoundaryTypes() : std::vector&lt;BOUNDARY_TYPE&gt;&amp; {query}</text><ellipse cx="3662" cy="1440.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="3671" y="1443.7183">GetCellMidPoints() : std::vector&lt;Vector&gt;&amp; {query}</text><ellipse cx="3662" cy="1453.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="3671" y="1456.5229">GetNodes() : std::vector&lt;Vector&gt;&amp; {query}</text><ellipse cx="3662" cy="1466.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="3671" y="1469.3276">GetCellAreas() : std::vector&lt;double&gt;&amp; {query}</text><ellipse cx="3662" cy="1478.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="370" x="3671" y="1482.1323">GetBounds() : std::vector&lt;std::pair&lt;double , double&gt; &gt; {query}</text><ellipse cx="3662" cy="1491.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="346" x="3671" y="1494.937">GetNormals() : std::vector&lt;std::vector&lt;Vector&gt; &gt;&amp; {query}</text><ellipse cx="3662" cy="1504.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="3671" y="1507.7417">GetCells() : std::vector&lt;std::vector&lt;unsigned&gt; &gt;&amp; {query}</text><ellipse cx="3662" cy="1517.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="3671" y="1520.5464">GetNeighbours() : std::vector&lt;std::vector&lt;unsigned&gt; &gt;&amp; {query}</text><ellipse cx="3662" cy="1530.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="3671" y="1533.3511">GetPartitionIDs() : std::vector&lt;unsigned&gt;&amp; {query}</text><ellipse cx="3662" cy="1542.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="3671" y="1546.1558">GetDim() : unsigned {query}</text><ellipse cx="3662" cy="1555.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="3671" y="1558.9604">GetNumCells() : unsigned {query}</text><ellipse cx="3662" cy="1568.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="3671" y="1571.7651">GetNumNodes() : unsigned {query}</text><ellipse cx="3662" cy="1581.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="3671" y="1584.5698">GetNumNodesPerCell() : unsigned {query}</text><polygon fill="#FFFF44" points="3662,1589.1641,3666,1593.1641,3662,1597.1641,3658,1593.1641" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="3671" y="1597.3745">ComputeBounds() : void</text><polygon fill="#FFFF44" points="3662,1601.9688,3666,1605.9688,3662,1609.9688,3658,1605.9688" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3671" y="1610.1792">ComputeCellAreas() : void</text><polygon fill="#FFFF44" points="3662,1614.7734,3666,1618.7734,3662,1622.7734,3658,1618.7734" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="3671" y="1622.9839">ComputeCellMidpoints() : void</text><polygon fill="#FFFF44" points="3662,1627.5781,3666,1631.5781,3662,1635.5781,3658,1631.5781" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="3671" y="1635.7886">ComputeConnectivity() : void</text><polygon fill="#FFFF44" points="3662,1640.3828,3666,1644.3828,3662,1648.3828,3658,1644.3828" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3671" y="1648.5933">ComputePartitioning() : void</text><ellipse cx="3662" cy="1658.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="675" x="3671" y="1661.3979">ComputeSlopes(unsigned nq, VectorVector&amp; psiDerX, VectorVector&amp; psiDerY, const VectorVector&amp; psi) : void {query}</text><ellipse cx="3662" cy="1670.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="699" x="3671" y="1674.2026">ReconstructSlopesS(unsigned nq, VectorVector&amp; psiDerX, VectorVector&amp; psiDerY, const VectorVector&amp; psi) : void {query}</text><ellipse cx="3662" cy="1683.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="699" x="3671" y="1687.0073">ReconstructSlopesU(unsigned nq, VectorVector&amp; psiDerX, VectorVector&amp; psiDerY, const VectorVector&amp; psi) : void {query}</text><!--MD5=[9906258dbb60b4563e0db7f61dc94d0e]
class NewtonOptimizer--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="227.2656" id="NewtonOptimizer" style="stroke: #A80036; stroke-width: 1.5;" width="557" x="4957.5" y="2196"/><ellipse cx="5179.75" cy="2212" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5182.7188,2217.6406 Q5182.1406,2217.9375 5181.5,2218.0781 Q5180.8594,2218.2344 5180.1563,2218.2344 Q5177.6563,2218.2344 5176.3281,2216.5938 Q5175.0156,2214.9375 5175.0156,2211.8125 Q5175.0156,2208.6875 5176.3281,2207.0313 Q5177.6563,2205.375 5180.1563,2205.375 Q5180.8594,2205.375 5181.5,2205.5313 Q5182.1563,2205.6875 5182.7188,2205.9844 L5182.7188,2208.7031 Q5182.0938,2208.125 5181.5,2207.8594 Q5180.9063,2207.5781 5180.2813,2207.5781 Q5178.9375,2207.5781 5178.25,2208.6563 Q5177.5625,2209.7188 5177.5625,2211.8125 Q5177.5625,2213.9063 5178.25,2214.9844 Q5178.9375,2216.0469 5180.2813,2216.0469 Q5180.9063,2216.0469 5181.5,2215.7813 Q5182.0938,2215.5 5182.7188,2214.9219 L5182.7188,2217.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="104" x="5200.25" y="2216.1543">NewtonOptimizer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4958.5" x2="5513.5" y1="2228" y2="2228"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2236"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="4977.5" y="2242.2104">_quadrature : QuadratureBase*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2248.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="4977.5" y="2255.0151">_weights : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2261.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="4977.5" y="2267.8198">_quadPointsSphere : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2274.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="4977.5" y="2280.6245">_alpha : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2287.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="4977.5" y="2293.4292">_epsilon : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2300.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="4977.5" y="2306.2339">_nq : unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2312.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="4977.5" y="2319.0386">_maxIterations : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2325.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="4977.5" y="2331.8433">_maxLineSearches : unsigned short</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4958.5" x2="5513.5" y1="2338.4375" y2="2338.4375"/><ellipse cx="4968.5" cy="2349.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="4977.5" y="2352.6479">NewtonOptimizer(Config* settings)</text><ellipse cx="4968.5" cy="2362.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="4977.5" y="2365.4526">~NewtonOptimizer()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2372.0469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="4977.5" y="2378.2573">ComputeObjFunc(Vector&amp; alpha, Vector&amp; sol, VectorVector&amp; moments) : double</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2384.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="531" x="4977.5" y="2391.062">ComputeGradient(Vector&amp; alpha, Vector&amp; sol, VectorVector&amp; moments, Vector&amp; grad) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4965.5" y="2397.6563"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="4977.5" y="2403.8667">ComputeHessian(Vector&amp; alpha, VectorVector&amp; moments, Matrix&amp; hessian) : void</text><ellipse cx="4968.5" cy="2413.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="4977.5" y="2416.6714">Solve(Vector&amp; lambda, Vector&amp; u, VectorVector&amp; moments) : void</text><!--MD5=[63c6af204b72495afb767f03716ed6bb]
class NumericalFlux--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="112.0234" id="NumericalFlux" style="stroke: #A80036; stroke-width: 1.5;" width="1316" x="4704" y="699"/><ellipse cx="5314.25" cy="715" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5314.3594,710.3438 L5313.2031,715.4219 L5315.5313,715.4219 L5314.3594,710.3438 Z M5312.875,708.1094 L5315.8594,708.1094 L5319.2188,720.5 L5316.7656,720.5 L5316,717.4375 L5312.7188,717.4375 L5311.9688,720.5 L5309.5313,720.5 L5312.875,708.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="87" x="5334.75" y="719.1543">NumericalFlux</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4705" x2="6019" y1="731" y2="731"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4705" x2="6019" y1="739" y2="739"/><ellipse cx="4715" cy="750" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="4724" y="753.2104">NumericalFlux()</text><ellipse cx="4715" cy="762.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="143" x="4724" y="766.0151">Create() : NumericalFlux*</text><ellipse cx="4715" cy="775.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1110" x="4724" y="778.8198">Flux(const Matrix AxPlus, const Matrix AxMinus, const Matrix AyPlus, const Matrix AyMinus, const Matrix AzPlus, const Matrix AzMinus, const Vector, const Vector, const Vector n) : Vector {query}</text><ellipse cx="4715" cy="788.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="502" x="4724" y="791.6245">Flux(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><ellipse cx="4715" cy="801.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="1290" x="4724" y="804.4292">FluxVanLeer(const Matrix&amp; Ax, const Matrix&amp; AxAbs, const Matrix&amp; Ay, const Matrix&amp; AyAbs, const Matrix&amp; Az, const Matrix&amp; AzAbs, const Vector&amp; psiL, const Vector&amp; psiR, const Vector&amp; n, Vector&amp; resultFlux) : void {query}</text><!--MD5=[560ef23bc914ac22dcacc44f391decfe]
class OptimizerBase--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="124.8281" id="OptimizerBase" style="stroke: #A80036; stroke-width: 1.5;" width="406" x="2731" y="1332"/><ellipse cx="2886.25" cy="1348" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2886.3594,1343.3438 L2885.2031,1348.4219 L2887.5313,1348.4219 L2886.3594,1343.3438 Z M2884.875,1341.1094 L2887.8594,1341.1094 L2891.2188,1353.5 L2888.7656,1353.5 L2888,1350.4375 L2884.7188,1350.4375 L2883.9688,1353.5 L2881.5313,1353.5 L2884.875,1341.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="87" x="2906.75" y="1352.1543">OptimizerBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2732" x2="3136" y1="1364" y2="1364"/><polygon fill="none" points="2742,1370,2746,1374,2742,1378,2738,1374" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2751" y="1378.2104">_settings : Config*</text><polygon fill="none" points="2742,1382.8047,2746,1386.8047,2742,1390.8047,2738,1386.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2751" y="1391.0151">_entropy : EntropyBase*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2732" x2="3136" y1="1397.6094" y2="1397.6094"/><ellipse cx="2742" cy="1408.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="2751" y="1411.8198">OptimizerBase(Config* settings)</text><ellipse cx="2742" cy="1421.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="2751" y="1424.6245">~OptimizerBase()</text><ellipse cx="2742" cy="1434.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="239" x="2751" y="1437.4292">Create(Config* settings) : OptimizerBase*</text><ellipse cx="2742" cy="1447.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="380" x="2751" y="1450.2339">Solve(Vector&amp; lambda, Vector&amp; u, VectorVector&amp; moments) : void</text><!--MD5=[57035cf667d2c1b3f498afd432858e1a]
class OptionBase--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="150.4375" id="OptionBase" style="stroke: #A80036; stroke-width: 1.5;" width="733" x="2240.5" y="3053.5"/><ellipse cx="2567.75" cy="3069.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2567.8594,3064.8438 L2566.7031,3069.9219 L2569.0313,3069.9219 L2567.8594,3064.8438 Z M2566.375,3062.6094 L2569.3594,3062.6094 L2572.7188,3075 L2570.2656,3075 L2569.5,3071.9375 L2566.2188,3071.9375 L2565.4688,3075 L2563.0313,3075 L2566.375,3062.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="70" x="2588.25" y="3073.6543">OptionBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2241.5" x2="2972.5" y1="3085.5" y2="3085.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2248.5" y="3093.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="2260.5" y="3099.7104">_value : std::vector&lt;std::string&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2241.5" x2="2972.5" y1="3106.3047" y2="3106.3047"/><ellipse cx="2251.5" cy="3117.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="2260.5" y="3120.5151">OptionBase()</text><ellipse cx="2251.5" cy="3130.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="82" x="2260.5" y="3133.3198">~OptionBase()</text><ellipse cx="2251.5" cy="3142.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="2260.5" y="3146.1245">SetValue(std::vector&lt;std::string&gt; value) : std::string</text><ellipse cx="2251.5" cy="3155.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="609" x="2260.5" y="3158.9292">badValue(std::vector&lt;std::string&gt;&amp; option_value, std::string type_id, std::string option_name) : std::string</text><ellipse cx="2251.5" cy="3168.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="707" x="2260.5" y="3171.7339">optionCheckMultipleValues(std::vector&lt;std::string&gt;&amp; option_value, std::string type_id, std::string option_name) : std::string</text><ellipse cx="2251.5" cy="3181.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="2260.5" y="3184.5386">GetValue() : std::vector&lt;std::string&gt;</text><ellipse cx="2251.5" cy="3194.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="102" x="2260.5" y="3197.3433">SetDefault() : void</text><!--MD5=[08673ca9a8f38161e36040eb5f4c9286]
class OptionBool--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="OptionBool" style="stroke: #A80036; stroke-width: 1.5;" width="484" x="6" y="3417.5"/><ellipse cx="210.25" cy="3433.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M210.3594,3428.8438 L209.2031,3433.9219 L211.5313,3433.9219 L210.3594,3428.8438 Z M208.875,3426.6094 L211.8594,3426.6094 L215.2188,3439 L212.7656,3439 L212,3435.9375 L208.7188,3435.9375 L207.9688,3439 L205.5313,3439 L208.875,3426.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="67" x="230.75" y="3437.6543">OptionBool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="489" y1="3449.5" y2="3449.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="3457.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="26" y="3463.7104">_def : bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="3470.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="26" y="3476.5151">_field : bool&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="3483.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="26" y="3489.3198">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="489" y1="3495.9141" y2="3495.9141"/><ellipse cx="17" cy="3506.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="26" y="3510.1245">OptionBool(std::string option_field_name, bool&amp; option_field, bool default_value)</text><ellipse cx="17" cy="3519.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="26" y="3522.9292">~OptionBool()</text><ellipse cx="17" cy="3532.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="26" y="3535.7339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="17" cy="3545.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="26" y="3548.5386">SetDefault() : void</text><!--MD5=[4c0d27bbf2263f91bc2f6695bd30d24a]
class OptionDouble--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="OptionDouble" style="stroke: #A80036; stroke-width: 1.5;" width="526" x="525" y="3417.5"/><ellipse cx="741.75" cy="3433.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M741.8594,3428.8438 L740.7031,3433.9219 L743.0313,3433.9219 L741.8594,3428.8438 Z M740.375,3426.6094 L743.3594,3426.6094 L746.7188,3439 L744.2656,3439 L743.5,3435.9375 L740.2188,3435.9375 L739.4688,3439 L737.0313,3439 L740.375,3426.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="84" x="762.25" y="3437.6543">OptionDouble</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="526" x2="1050" y1="3449.5" y2="3449.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="533" y="3457.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="545" y="3463.7104">_def : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="533" y="3470.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="545" y="3476.5151">_field : double&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="533" y="3483.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="545" y="3489.3198">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="526" x2="1050" y1="3495.9141" y2="3495.9141"/><ellipse cx="536" cy="3506.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="500" x="545" y="3510.1245">OptionDouble(std::string option_field_name, double&amp; option_field, double default_value)</text><ellipse cx="536" cy="3519.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="545" y="3522.9292">~OptionDouble()</text><ellipse cx="536" cy="3532.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="545" y="3535.7339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="536" cy="3545.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="545" y="3548.5386">SetDefault() : void</text><!--MD5=[144a480d156acaecaa75bd1afa651596]
class OptionEnum--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="150.4375" id="OptionEnum" style="stroke: #A80036; stroke-width: 1.5;" width="754" x="1086" y="3411.5"/><ellipse cx="1341.25" cy="3427.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1341.3594,3422.8438 L1340.2031,3427.9219 L1342.5313,3427.9219 L1341.3594,3422.8438 Z M1339.875,3420.6094 L1342.8594,3420.6094 L1346.2188,3433 L1343.7656,3433 L1343,3429.9375 L1339.7188,3429.9375 L1338.9688,3433 L1336.5313,3433 L1339.875,3420.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="75" x="1361.75" y="3431.6543">OptionEnum</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="158" x="1685" y="3408.5"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="156" x="1686" y="3420.6387">template &lt;class Tenum&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1087" x2="1839" y1="3443.5" y2="3443.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1094" y="3451.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="1106" y="3457.7104">_def : Tenum</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1094" y="3464.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="1106" y="3470.5151">_field : Tenum&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1094" y="3477.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="1106" y="3483.3198">_map : std::map&lt;std::string, Tenum&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1094" y="3489.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1106" y="3496.1245">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1087" x2="1839" y1="3502.7188" y2="3502.7188"/><ellipse cx="1097" cy="3513.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="728" x="1106" y="3516.9292">OptionEnum(std::string option_field_name, const std::map&lt;std::string, Tenum&gt; m, Tenum&amp; option_field, Tenum default_value)</text><ellipse cx="1097" cy="3526.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="1106" y="3529.7339">~OptionEnum()</text><ellipse cx="1097" cy="3539.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1106" y="3542.5386">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="1097" cy="3552.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1106" y="3555.3433">SetDefault() : void</text><!--MD5=[312548e8953d9a8be8e7376e3d9dc933]
class OptionInt--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="OptionInt" style="stroke: #A80036; stroke-width: 1.5;" width="453" x="1875.5" y="3417.5"/><ellipse cx="2069.25" cy="3433.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2069.3594,3428.8438 L2068.2031,3433.9219 L2070.5313,3433.9219 L2069.3594,3428.8438 Z M2067.875,3426.6094 L2070.8594,3426.6094 L2074.2188,3439 L2071.7656,3439 L2071,3435.9375 L2067.7188,3435.9375 L2066.9688,3439 L2064.5313,3439 L2067.875,3426.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="2089.75" y="3437.6543">OptionInt</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1876.5" x2="2327.5" y1="3449.5" y2="3449.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1883.5" y="3457.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="1895.5" y="3463.7104">_def : int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1883.5" y="3470.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="1895.5" y="3476.5151">_field : int&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1883.5" y="3483.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1895.5" y="3489.3198">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1876.5" x2="2327.5" y1="3495.9141" y2="3495.9141"/><ellipse cx="1886.5" cy="3506.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="427" x="1895.5" y="3510.1245">OptionInt(std::string option_field_name, int&amp; option_field, int default_value)</text><ellipse cx="1886.5" cy="3519.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="1895.5" y="3522.9292">~OptionInt()</text><ellipse cx="1886.5" cy="3532.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1895.5" y="3535.7339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="1886.5" cy="3545.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1895.5" y="3548.5386">SetDefault() : void</text><!--MD5=[5a6021cdd87015f95855dfa5482c4968]
class OptionLong--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="OptionLong" style="stroke: #A80036; stroke-width: 1.5;" width="486" x="2364" y="3417.5"/><ellipse cx="2567.25" cy="3433.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2567.3594,3428.8438 L2566.2031,3433.9219 L2568.5313,3433.9219 L2567.3594,3428.8438 Z M2565.875,3426.6094 L2568.8594,3426.6094 L2572.2188,3439 L2569.7656,3439 L2569,3435.9375 L2565.7188,3435.9375 L2564.9688,3439 L2562.5313,3439 L2565.875,3426.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="71" x="2587.75" y="3437.6543">OptionLong</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2365" x2="2849" y1="3449.5" y2="3449.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2372" y="3457.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="2384" y="3463.7104">_def : long</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2372" y="3470.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="2384" y="3476.5151">_field : long&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2372" y="3483.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2384" y="3489.3198">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2365" x2="2849" y1="3495.9141" y2="3495.9141"/><ellipse cx="2375" cy="3506.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="460" x="2384" y="3510.1245">OptionLong(std::string option_field_name, long&amp; option_field, long default_value)</text><ellipse cx="2375" cy="3519.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2384" y="3522.9292">~OptionLong()</text><ellipse cx="2375" cy="3532.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="2384" y="3535.7339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="2375" cy="3545.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2384" y="3548.5386">SetDefault() : void</text><!--MD5=[bf56439615fff4baebef5224d94f191f]
class OptionString--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="OptionString" style="stroke: #A80036; stroke-width: 1.5;" width="563" x="2885.5" y="3417.5"/><ellipse cx="3124.25" cy="3433.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3124.3594,3428.8438 L3123.2031,3433.9219 L3125.5313,3433.9219 L3124.3594,3428.8438 Z M3122.875,3426.6094 L3125.8594,3426.6094 L3129.2188,3439 L3126.7656,3439 L3126,3435.9375 L3122.7188,3435.9375 L3121.9688,3439 L3119.5313,3439 L3122.875,3426.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="77" x="3144.75" y="3437.6543">OptionString</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2886.5" x2="3447.5" y1="3449.5" y2="3449.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2893.5" y="3457.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2905.5" y="3463.7104">_def : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2893.5" y="3470.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2905.5" y="3476.5151">_name : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2893.5" y="3483.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="2905.5" y="3489.3198">_field : std::string&amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2886.5" x2="3447.5" y1="3495.9141" y2="3495.9141"/><ellipse cx="2896.5" cy="3506.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="537" x="2905.5" y="3510.1245">OptionString(std::string option_field_name, std::string&amp; option_field, std::string default_value)</text><ellipse cx="2896.5" cy="3519.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="2905.5" y="3522.9292">~OptionString()</text><ellipse cx="2896.5" cy="3532.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="2905.5" y="3535.7339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="2896.5" cy="3545.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2905.5" y="3548.5386">SetDefault() : void</text><!--MD5=[38769d96d097cc3e9dcdba9c5b2e9fed]
class OptionStringList--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="OptionStringList" style="stroke: #A80036; stroke-width: 1.5;" width="669" x="3483.5" y="3417.5"/><ellipse cx="3764.75" cy="3433.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3764.8594,3428.8438 L3763.7031,3433.9219 L3766.0313,3433.9219 L3764.8594,3428.8438 Z M3763.375,3426.6094 L3766.3594,3426.6094 L3769.7188,3439 L3767.2656,3439 L3766.5,3435.9375 L3763.2188,3435.9375 L3762.4688,3439 L3760.0313,3439 L3763.375,3426.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="3785.25" y="3437.6543">OptionStringList</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3484.5" x2="4151.5" y1="3449.5" y2="3449.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3491.5" y="3457.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3503.5" y="3463.7104">_name : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3491.5" y="3470.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3503.5" y="3476.5151">_field : std::vector&lt;std::string&gt;&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3491.5" y="3483.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3503.5" y="3489.3198">_size : unsigned short&amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3484.5" x2="4151.5" y1="3495.9141" y2="3495.9141"/><ellipse cx="3494.5" cy="3506.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="643" x="3503.5" y="3510.1245">OptionStringList(std::string option_field_name, unsigned short&amp; list_size, std::vector&lt;std::string&gt;&amp; option_field)</text><ellipse cx="3494.5" cy="3519.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="3503.5" y="3522.9292">~OptionStringList()</text><ellipse cx="3494.5" cy="3532.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="3503.5" y="3535.7339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="3494.5" cy="3545.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="3503.5" y="3548.5386">SetDefault() : void</text><!--MD5=[1768df87b6b1b7f59e02793f187f93bb]
class OptionULong--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="OptionULong" style="stroke: #A80036; stroke-width: 1.5;" width="606" x="4188" y="3417.5"/><ellipse cx="4446.75" cy="3433.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4446.8594,3428.8438 L4445.7031,3433.9219 L4448.0313,3433.9219 L4446.8594,3428.8438 Z M4445.375,3426.6094 L4448.3594,3426.6094 L4451.7188,3439 L4449.2656,3439 L4448.5,3435.9375 L4445.2188,3435.9375 L4444.4688,3439 L4442.0313,3439 L4445.375,3426.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="80" x="4467.25" y="3437.6543">OptionULong</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4189" x2="4793" y1="3449.5" y2="3449.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4196" y="3457.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="4208" y="3463.7104">_name : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4196" y="3470.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="4208" y="3476.5151">_def : unsigned long</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4196" y="3483.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="4208" y="3489.3198">_field : unsigned long&amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4189" x2="4793" y1="3495.9141" y2="3495.9141"/><ellipse cx="4199" cy="3506.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="580" x="4208" y="3510.1245">OptionULong(std::string option_field_name, unsigned long&amp; option_field, unsigned long default_value)</text><ellipse cx="4199" cy="3519.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="4208" y="3522.9292">~OptionULong()</text><ellipse cx="4199" cy="3532.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="4208" y="3535.7339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="4199" cy="3545.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="4208" y="3548.5386">SetDefault() : void</text><!--MD5=[63a18a3a0e06d0eb3aaf9119d090c727]
class OptionUShort--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="OptionUShort" style="stroke: #A80036; stroke-width: 1.5;" width="622" x="4829" y="3417.5"/><ellipse cx="5094.25" cy="3433.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5094.3594,3428.8438 L5093.2031,3433.9219 L5095.5313,3433.9219 L5094.3594,3428.8438 Z M5092.875,3426.6094 L5095.8594,3426.6094 L5099.2188,3439 L5096.7656,3439 L5096,3435.9375 L5092.7188,3435.9375 L5091.9688,3439 L5089.5313,3439 L5092.875,3426.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="83" x="5114.75" y="3437.6543">OptionUShort</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4830" x2="5450" y1="3449.5" y2="3449.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4837" y="3457.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="4849" y="3463.7104">_name : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4837" y="3470.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="4849" y="3476.5151">_def : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4837" y="3483.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="4849" y="3489.3198">_field : unsigned short&amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4830" x2="5450" y1="3495.9141" y2="3495.9141"/><ellipse cx="4840" cy="3506.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="596" x="4849" y="3510.1245">OptionUShort(std::string option_field_name, unsigned short&amp; option_field, unsigned short default_value)</text><ellipse cx="4840" cy="3519.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="4849" y="3522.9292">~OptionUShort()</text><ellipse cx="4840" cy="3532.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="4849" y="3535.7339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="4840" cy="3545.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="4849" y="3548.5386">SetDefault() : void</text><!--MD5=[028d686bb00a69dc66bb7319bc812d88]
class PNSolver--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="560.1875" id="PNSolver" style="stroke: #A80036; stroke-width: 1.5;" width="237" x="6054.5" y="475"/><ellipse cx="6141.25" cy="491" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6144.2188,496.6406 Q6143.6406,496.9375 6143,497.0781 Q6142.3594,497.2344 6141.6563,497.2344 Q6139.1563,497.2344 6137.8281,495.5938 Q6136.5156,493.9375 6136.5156,490.8125 Q6136.5156,487.6875 6137.8281,486.0313 Q6139.1563,484.375 6141.6563,484.375 Q6142.3594,484.375 6143,484.5313 Q6143.6563,484.6875 6144.2188,484.9844 L6144.2188,487.7031 Q6143.5938,487.125 6143,486.8594 Q6142.4063,486.5781 6141.7813,486.5781 Q6140.4375,486.5781 6139.75,487.6563 Q6139.0625,488.7188 6139.0625,490.8125 Q6139.0625,492.9063 6139.75,493.9844 Q6140.4375,495.0469 6141.7813,495.0469 Q6142.4063,495.0469 6143,494.7813 Q6143.5938,494.5 6144.2188,493.9219 L6144.2188,496.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="6161.75" y="495.1543">PNSolver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6055.5" x2="6290.5" y1="507" y2="507"/><polygon fill="none" points="6065.5,513,6069.5,517,6065.5,521,6061.5,517" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="6074.5" y="521.2104">_AxAbs : Matrix</text><polygon fill="none" points="6065.5,525.8047,6069.5,529.8047,6065.5,533.8047,6061.5,529.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="6074.5" y="534.0151">_AxMinus : Matrix</text><polygon fill="none" points="6065.5,538.6094,6069.5,542.6094,6065.5,546.6094,6061.5,542.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="6074.5" y="546.8198">_AxPlus : Matrix</text><polygon fill="none" points="6065.5,551.4141,6069.5,555.4141,6065.5,559.4141,6061.5,555.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="6074.5" y="559.6245">_AyAbs : Matrix</text><polygon fill="none" points="6065.5,564.2188,6069.5,568.2188,6065.5,572.2188,6061.5,568.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="6074.5" y="572.4292">_AyMinus : Matrix</text><polygon fill="none" points="6065.5,577.0234,6069.5,581.0234,6065.5,585.0234,6061.5,581.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="6074.5" y="585.2339">_AyPlus : Matrix</text><polygon fill="none" points="6065.5,589.8281,6069.5,593.8281,6065.5,597.8281,6061.5,593.8281" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="6074.5" y="598.0386">_AzAbs : Matrix</text><polygon fill="none" points="6065.5,602.6328,6069.5,606.6328,6065.5,610.6328,6061.5,606.6328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="6074.5" y="610.8433">_AzMinus : Matrix</text><polygon fill="none" points="6065.5,615.4375,6069.5,619.4375,6065.5,623.4375,6061.5,619.4375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="6074.5" y="623.6479">_AzPlus : Matrix</text><polygon fill="none" points="6065.5,628.2422,6069.5,632.2422,6065.5,636.2422,6061.5,632.2422" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="6074.5" y="636.4526">_Ax : SymMatrix</text><polygon fill="none" points="6065.5,641.0469,6069.5,645.0469,6065.5,649.0469,6061.5,645.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="6074.5" y="649.2573">_Ay : SymMatrix</text><polygon fill="none" points="6065.5,653.8516,6069.5,657.8516,6065.5,661.8516,6061.5,657.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="6074.5" y="662.062">_Az : SymMatrix</text><polygon fill="none" points="6065.5,666.6563,6069.5,670.6563,6065.5,674.6563,6061.5,670.6563" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="6074.5" y="674.8667">_scatterMatDiag : Vector</text><polygon fill="none" points="6065.5,679.4609,6069.5,683.4609,6065.5,687.4609,6061.5,683.4609" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="6074.5" y="687.6714">_sigmaA : VectorVector</text><polygon fill="none" points="6065.5,692.2656,6069.5,696.2656,6065.5,700.2656,6061.5,696.2656" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="6074.5" y="700.4761">_LMaxDegree : unsigned</text><polygon fill="none" points="6065.5,705.0703,6069.5,709.0703,6065.5,713.0703,6061.5,709.0703" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="6074.5" y="713.2808">_nTotalEntries : unsigned</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6055.5" x2="6290.5" y1="719.875" y2="719.875"/><ellipse cx="6065.5" cy="730.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="6074.5" y="734.0854">PNSolver(Config* settings)</text><polygon fill="#FFFF44" points="6065.5,738.6797,6069.5,742.6797,6065.5,746.6797,6061.5,742.6797" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="6074.5" y="746.8901">CheckIndex(int l, int k) : bool {query}</text><polygon fill="#FFFF44" points="6065.5,751.4844,6069.5,755.4844,6065.5,759.4844,6061.5,755.4844" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="6074.5" y="759.6948">AParam(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,764.2891,6069.5,768.2891,6065.5,772.2891,6061.5,768.2891" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="6074.5" y="772.4995">BParam(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,777.0938,6069.5,781.0938,6065.5,785.0938,6061.5,781.0938" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="6074.5" y="785.3042">CParam(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,789.8984,6069.5,793.8984,6065.5,797.8984,6061.5,793.8984" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="6074.5" y="798.1089">CTilde(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,802.7031,6069.5,806.7031,6065.5,810.7031,6061.5,806.7031" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="6074.5" y="810.9136">DParam(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,815.5078,6069.5,819.5078,6065.5,823.5078,6061.5,819.5078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="6074.5" y="823.7183">DTilde(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,828.3125,6069.5,832.3125,6065.5,836.3125,6061.5,832.3125" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="6074.5" y="836.5229">EParam(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,841.1172,6069.5,845.1172,6065.5,849.1172,6061.5,845.1172" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="6074.5" y="849.3276">ETilde(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,853.9219,6069.5,857.9219,6065.5,861.9219,6061.5,857.9219" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="6074.5" y="862.1323">FParam(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,866.7266,6069.5,870.7266,6065.5,874.7266,6061.5,870.7266" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="6074.5" y="874.937">FTilde(int l, int k) : double {query}</text><polygon fill="#FFFF44" points="6065.5,879.5313,6069.5,883.5313,6065.5,887.5313,6061.5,883.5313" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="6074.5" y="887.7417">LegendrePoly(double x, int l) : double</text><polygon fill="#FFFF44" points="6065.5,892.3359,6069.5,896.3359,6065.5,900.3359,6061.5,896.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="6074.5" y="900.5464">GlobalIndex(int l, int k) : int {query}</text><polygon fill="#FFFF44" points="6065.5,905.1406,6069.5,909.1406,6065.5,913.1406,6061.5,909.1406" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="6074.5" y="913.3511">Sgn(int k) : int {query}</text><polygon fill="#FFFF44" points="6065.5,917.9453,6069.5,921.9453,6065.5,925.9453,6061.5,921.9453" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="6074.5" y="926.1558">kMinus(int k) : int {query}</text><polygon fill="#FFFF44" points="6065.5,930.75,6069.5,934.75,6065.5,938.75,6061.5,934.75" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="6074.5" y="938.9604">kPlus(int k) : int {query}</text><polygon fill="#FFFF44" points="6065.5,943.5547,6069.5,947.5547,6065.5,951.5547,6061.5,947.5547" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="6074.5" y="951.7651">CleanFluxMatrices() : void</text><polygon fill="#FFFF44" points="6065.5,956.3594,6069.5,960.3594,6065.5,964.3594,6061.5,960.3594" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="6074.5" y="964.5698">ComputeFluxComponents() : void</text><polygon fill="#FFFF44" points="6065.5,969.1641,6069.5,973.1641,6065.5,977.1641,6061.5,973.1641" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="6074.5" y="977.3745">ComputeScatterMatrix() : void</text><polygon fill="#FFFF44" points="6065.5,981.9688,6069.5,985.9688,6065.5,989.9688,6061.5,985.9688" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="6074.5" y="990.1792">ComputeSystemMatrices() : void</text><ellipse cx="6065.5" cy="999.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="6074.5" y="1002.9839">Save() : void {query}</text><ellipse cx="6065.5" cy="1012.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="6074.5" y="1015.7886">Save(int currEnergy) : void {query}</text><ellipse cx="6065.5" cy="1025.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="6074.5" y="1028.5933">Solve() : void</text><!--MD5=[b78e42fe1f33f5c4bf0e37a39b0075a9]
class Physics--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="214.4609" id="Physics" style="stroke: #A80036; stroke-width: 1.5;" width="605" x="8250.5" y="2202.5"/><ellipse cx="8525.75" cy="2218.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8528.7188,2224.1406 Q8528.1406,2224.4375 8527.5,2224.5781 Q8526.8594,2224.7344 8526.1563,2224.7344 Q8523.6563,2224.7344 8522.3281,2223.0938 Q8521.0156,2221.4375 8521.0156,2218.3125 Q8521.0156,2215.1875 8522.3281,2213.5313 Q8523.6563,2211.875 8526.1563,2211.875 Q8526.8594,2211.875 8527.5,2212.0313 Q8528.1563,2212.1875 8528.7188,2212.4844 L8528.7188,2215.2031 Q8528.0938,2214.625 8527.5,2214.3594 Q8526.9063,2214.0781 8526.2813,2214.0781 Q8524.9375,2214.0781 8524.25,2215.1563 Q8523.5625,2216.2188 8523.5625,2218.3125 Q8523.5625,2220.4063 8524.25,2221.4844 Q8524.9375,2222.5469 8526.2813,2222.5469 Q8526.9063,2222.5469 8527.5,2222.2813 Q8528.0938,2222 8528.7188,2221.4219 L8528.7188,2224.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="8546.25" y="2222.6543">Physics</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8251.5" x2="8854.5" y1="2234.5" y2="2234.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8258.5" y="2242.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="8270.5" y="2248.7104">_stpowH2O : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8258.5" y="2255.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="8270.5" y="2261.5151">_xsH2O : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8258.5" y="2268.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="8270.5" y="2274.3198">_xsTotalH2O : VectorVector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8258.5" y="2280.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="8270.5" y="2287.1245">_xsTransportH2O : VectorVector</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8251.5" x2="8854.5" y1="2293.7188" y2="2293.7188"/><ellipse cx="8261.5" cy="2304.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="51" x="8270.5" y="2307.9292">Physics()</text><ellipse cx="8261.5" cy="2317.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="107" x="8270.5" y="2320.7339">Create() : Physics*</text><ellipse cx="8261.5" cy="2330.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="354" x="8270.5" y="2333.5386">GetScatteringXS(Vector energies, Vector angle) : VectorVector</text><ellipse cx="8261.5" cy="2343.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="376" x="8270.5" y="2346.3433">GetStoppingPower(Vector energies, Vector density) : VectorVector</text><ellipse cx="8261.5" cy="2355.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="8270.5" y="2359.1479">GetTotalXS(Vector energies, Vector density) : VectorVector</text><ellipse cx="8261.5" cy="2368.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="8270.5" y="2371.9526">GetTransportXS(Vector energies, Vector density) : VectorVector</text><ellipse cx="8261.5" cy="2381.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="8270.5" y="2384.7573">ReadStoppingPowers(std::string fileName) : VectorVector</text><ellipse cx="8261.5" cy="2394.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="579" x="8270.5" y="2397.562">ReadENDL(std::string filename) : std::tuple&lt;std::vector&lt;VectorVector&gt; , std::vector&lt;VectorVector&gt; &gt;</text><ellipse cx="8261.5" cy="2407.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="567" x="8270.5" y="2410.3667">LoadDatabase(std::string fileName_H, std::string fileName_O, std::string fileName_stppower) : void</text><!--MD5=[aeda3338894f4a84d351a17291d2f6fe]
class ProblemBase--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="265.6797" id="ProblemBase" style="stroke: #A80036; stroke-width: 1.5;" width="518" x="7000" y="622"/><ellipse cx="7214.75" cy="638" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7214.8594,633.3438 L7213.7031,638.4219 L7216.0313,638.4219 L7214.8594,633.3438 Z M7213.375,631.1094 L7216.3594,631.1094 L7219.7188,643.5 L7217.2656,643.5 L7216.5,640.4375 L7213.2188,640.4375 L7212.4688,643.5 L7210.0313,643.5 L7213.375,631.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="80" x="7235.25" y="642.1543">ProblemBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7001" x2="7517" y1="654" y2="654"/><polygon fill="none" points="7011,660,7015,664,7011,668,7007,664" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="7020" y="668.2104">_settings : Config*</text><polygon fill="none" points="7011,672.8047,7015,676.8047,7011,680.8047,7007,676.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="7020" y="681.0151">_mesh : Mesh*</text><polygon fill="none" points="7011,685.6094,7015,689.6094,7011,693.6094,7007,689.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="7020" y="693.8198">_physics : Physics*</text><polygon fill="none" points="7011,698.4141,7015,702.4141,7011,706.4141,7007,702.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="7020" y="706.6245">_density : std::vector&lt;double&gt;</text><polygon fill="none" points="7011,711.2188,7015,715.2188,7011,719.2188,7007,715.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="7020" y="719.4292">_stoppingPower : std::vector&lt;double&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7001" x2="7517" y1="726.0234" y2="726.0234"/><ellipse cx="7011" cy="737.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="7020" y="740.2339">ProblemBase(Config* settings, Mesh* mesh)</text><polygon fill="#FFFF44" points="7011,744.8281,7015,748.8281,7011,752.8281,7007,748.8281" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="7020" y="753.0386">ProblemBase()</text><ellipse cx="7011" cy="762.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="7020" y="765.8433">~ProblemBase()</text><ellipse cx="7011" cy="775.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="312" x="7020" y="778.6479">Create(Config* settings, Mesh* mesh) : ProblemBase*</text><ellipse cx="7011" cy="788.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="7020" y="791.4526">GetTotalXSE(const Vector&amp; energies) : Vector</text><ellipse cx="7011" cy="801.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="399" x="7020" y="804.2573">GetScatteringXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="7011" cy="813.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="7020" y="817.062">GetScatteringXSE(const Vector&amp; energies, const Vector&amp; angles) : VectorVector</text><ellipse cx="7011" cy="826.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="7020" y="829.8667">GetTotalXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="7011" cy="839.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="7020" y="842.6714">SetupIC() : VectorVector</text><ellipse cx="7011" cy="852.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="492" x="7020" y="855.4761">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="7011" cy="865.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="393" x="7020" y="868.2808">GetDensity(const VectorVector&amp; cellMidPoints) : std::vector&lt;double&gt;</text><ellipse cx="7011" cy="877.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="7020" y="881.0854">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><!--MD5=[296293fbdb23d0a6b21645666f72f612]
class QDummy--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="124.8281" id="QDummy" style="stroke: #A80036; stroke-width: 1.5;" width="188" x="7886" y="3424"/><ellipse cx="7948.75" cy="3440" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7951.7188,3445.6406 Q7951.1406,3445.9375 7950.5,3446.0781 Q7949.8594,3446.2344 7949.1563,3446.2344 Q7946.6563,3446.2344 7945.3281,3444.5938 Q7944.0156,3442.9375 7944.0156,3439.8125 Q7944.0156,3436.6875 7945.3281,3435.0313 Q7946.6563,3433.375 7949.1563,3433.375 Q7949.8594,3433.375 7950.5,3433.5313 Q7951.1563,3433.6875 7951.7188,3433.9844 L7951.7188,3436.7031 Q7951.0938,3436.125 7950.5,3435.8594 Q7949.9063,3435.5781 7949.2813,3435.5781 Q7947.9375,3435.5781 7947.25,3436.6563 Q7946.5625,3437.7188 7946.5625,3439.8125 Q7946.5625,3441.9063 7947.25,3442.9844 Q7947.9375,3444.0469 7949.2813,3444.0469 Q7949.9063,3444.0469 7950.5,3443.7813 Q7951.0938,3443.5 7951.7188,3442.9219 L7951.7188,3445.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="54" x="7969.25" y="3444.1543">QDummy</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7887" x2="8073" y1="3456" y2="3456"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7887" x2="8073" y1="3464" y2="3464"/><ellipse cx="7897" cy="3475" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="7906" y="3478.2104">QDummy(unsigned order)</text><ellipse cx="7897" cy="3487.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="7906" y="3491.0151">~QDummy()</text><ellipse cx="7897" cy="3500.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="7906" y="3503.8198">SetConnectivity() : void</text><ellipse cx="7897" cy="3513.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="7906" y="3516.6245">SetName() : void</text><ellipse cx="7897" cy="3526.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="7906" y="3529.4292">SetNq() : void</text><ellipse cx="7897" cy="3539.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="7906" y="3542.2339">SetPointsAndWeights() : void</text><!--MD5=[03565d70be7b68281d5fd283d1b74ab3]
class QGaussLegendre1D--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="163.2422" id="QGaussLegendre1D" style="stroke: #A80036; stroke-width: 1.5;" width="472" x="8109" y="3405"/><ellipse cx="8278.75" cy="3421" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8281.7188,3426.6406 Q8281.1406,3426.9375 8280.5,3427.0781 Q8279.8594,3427.2344 8279.1563,3427.2344 Q8276.6563,3427.2344 8275.3281,3425.5938 Q8274.0156,3423.9375 8274.0156,3420.8125 Q8274.0156,3417.6875 8275.3281,3416.0313 Q8276.6563,3414.375 8279.1563,3414.375 Q8279.8594,3414.375 8280.5,3414.5313 Q8281.1563,3414.6875 8281.7188,3414.9844 L8281.7188,3417.7031 Q8281.0938,3417.125 8280.5,3416.8594 Q8279.9063,3416.5781 8279.2813,3416.5781 Q8277.9375,3416.5781 8277.25,3417.6563 Q8276.5625,3418.7188 8276.5625,3420.8125 Q8276.5625,3422.9063 8277.25,3423.9844 Q8277.9375,3425.0469 8279.2813,3425.0469 Q8279.9063,3425.0469 8280.5,3424.7813 Q8281.0938,3424.5 8281.7188,3423.9219 L8281.7188,3426.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="124" x="8299.25" y="3425.1543">QGaussLegendre1D</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8110" x2="8580" y1="3437" y2="3437"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8110" x2="8580" y1="3445" y2="3445"/><ellipse cx="8120" cy="3456" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="8129" y="3459.2104">QGaussLegendre1D(unsigned order)</text><ellipse cx="8120" cy="3468.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="8129" y="3472.0151">~QGaussLegendre1D()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8117" y="3478.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="8129" y="3484.8198">CheckOrder() : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8117" y="3491.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="8129" y="3497.6245">Pythag(const double a, const double b) : double</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8117" y="3504.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="8129" y="3510.4292">ComputeEigenValTriDiagMatrix(const Matrix&amp; mat) : std::pair&lt;Vector , Matrix&gt;</text><ellipse cx="8120" cy="3520.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="8129" y="3523.2339">SetConnectivity() : void</text><ellipse cx="8120" cy="3532.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="8129" y="3536.0386">SetName() : void</text><ellipse cx="8120" cy="3545.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="8129" y="3548.8433">SetNq() : void</text><ellipse cx="8120" cy="3558.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="8129" y="3561.6479">SetPointsAndWeights() : void</text><!--MD5=[43fb1c5f2053cc224ff05d9a3a1d1cbc]
class QGaussLegendreTensorized--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="176.0469" id="QGaussLegendreTensorized" style="stroke: #A80036; stroke-width: 1.5;" width="472" x="8616" y="3398.5"/><ellipse cx="8760.75" cy="3414.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8763.7188,3420.1406 Q8763.1406,3420.4375 8762.5,3420.5781 Q8761.8594,3420.7344 8761.1563,3420.7344 Q8758.6563,3420.7344 8757.3281,3419.0938 Q8756.0156,3417.4375 8756.0156,3414.3125 Q8756.0156,3411.1875 8757.3281,3409.5313 Q8758.6563,3407.875 8761.1563,3407.875 Q8761.8594,3407.875 8762.5,3408.0313 Q8763.1563,3408.1875 8763.7188,3408.4844 L8763.7188,3411.2031 Q8763.0938,3410.625 8762.5,3410.3594 Q8761.9063,3410.0781 8761.2813,3410.0781 Q8759.9375,3410.0781 8759.25,3411.1563 Q8758.5625,3412.2188 8758.5625,3414.3125 Q8758.5625,3416.4063 8759.25,3417.4844 Q8759.9375,3418.5469 8761.2813,3418.5469 Q8761.9063,3418.5469 8762.5,3418.2813 Q8763.0938,3418 8763.7188,3417.4219 L8763.7188,3420.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="174" x="8781.25" y="3418.6543">QGaussLegendreTensorized</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8617" x2="9087" y1="3430.5" y2="3430.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8617" x2="9087" y1="3438.5" y2="3438.5"/><ellipse cx="8627" cy="3449.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="8636" y="3452.7104">QGaussLegendreTensorized(unsigned order)</text><ellipse cx="8627" cy="3462.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="8636" y="3465.5151">~QGaussLegendreTensorized()</text><ellipse cx="8627" cy="3475.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="8636" y="3478.3198">GetPointsSphere() : VectorVector {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8624" y="3484.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="8636" y="3491.1245">CheckOrder() : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8624" y="3497.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="8636" y="3503.9292">Pythag(const double a, const double b) : double</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="8624" y="3510.5234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="446" x="8636" y="3516.7339">ComputeEigenValTriDiagMatrix(const Matrix&amp; mat) : std::pair&lt;Vector , Matrix&gt;</text><ellipse cx="8627" cy="3526.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="8636" y="3529.5386">SetConnectivity() : void</text><ellipse cx="8627" cy="3539.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="8636" y="3542.3433">SetName() : void</text><ellipse cx="8627" cy="3551.9375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="8636" y="3555.1479">SetNq() : void</text><ellipse cx="8627" cy="3564.7422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="8636" y="3567.9526">SetPointsAndWeights() : void</text><!--MD5=[ac9a63b98acee02cdcc7ea962cb05a73]
class QLDFESA--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="124.8281" id="QLDFESA" style="stroke: #A80036; stroke-width: 1.5;" width="196" x="8950" y="3641"/><ellipse cx="9016.25" cy="3657" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9019.2188,3662.6406 Q9018.6406,3662.9375 9018,3663.0781 Q9017.3594,3663.2344 9016.6563,3663.2344 Q9014.1563,3663.2344 9012.8281,3661.5938 Q9011.5156,3659.9375 9011.5156,3656.8125 Q9011.5156,3653.6875 9012.8281,3652.0313 Q9014.1563,3650.375 9016.6563,3650.375 Q9017.3594,3650.375 9018,3650.5313 Q9018.6563,3650.6875 9019.2188,3650.9844 L9019.2188,3653.7031 Q9018.5938,3653.125 9018,3652.8594 Q9017.4063,3652.5781 9016.7813,3652.5781 Q9015.4375,3652.5781 9014.75,3653.6563 Q9014.0625,3654.7188 9014.0625,3656.8125 Q9014.0625,3658.9063 9014.75,3659.9844 Q9015.4375,3661.0469 9016.7813,3661.0469 Q9017.4063,3661.0469 9018,3660.7813 Q9018.5938,3660.5 9019.2188,3659.9219 L9019.2188,3662.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="9036.75" y="3661.1543">QLDFESA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8951" x2="9145" y1="3673" y2="3673"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8951" x2="9145" y1="3681" y2="3681"/><ellipse cx="8961" cy="3692" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="8970" y="3695.2104">QLDFESA(unsigned order)</text><ellipse cx="8961" cy="3704.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="8970" y="3708.0151">~QLDFESA()</text><ellipse cx="8961" cy="3717.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="8970" y="3720.8198">GetLookupTable() : std::string</text><ellipse cx="8961" cy="3730.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="8970" y="3733.6245">SetAvailOrders() : void</text><ellipse cx="8961" cy="3743.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="8970" y="3746.4292">SetConnectivity() : void</text><ellipse cx="8961" cy="3756.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="8970" y="3759.2339">SetName() : void</text><!--MD5=[dc3edd32582cc9c24358ef5ad5d35bc3]
class QLebedev--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="124.8281" id="QLebedev" style="stroke: #A80036; stroke-width: 1.5;" width="196" x="9181" y="3641"/><ellipse cx="9244.25" cy="3657" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9247.2188,3662.6406 Q9246.6406,3662.9375 9246,3663.0781 Q9245.3594,3663.2344 9244.6563,3663.2344 Q9242.1563,3663.2344 9240.8281,3661.5938 Q9239.5156,3659.9375 9239.5156,3656.8125 Q9239.5156,3653.6875 9240.8281,3652.0313 Q9242.1563,3650.375 9244.6563,3650.375 Q9245.3594,3650.375 9246,3650.5313 Q9246.6563,3650.6875 9247.2188,3650.9844 L9247.2188,3653.7031 Q9246.5938,3653.125 9246,3652.8594 Q9245.4063,3652.5781 9244.7813,3652.5781 Q9243.4375,3652.5781 9242.75,3653.6563 Q9242.0625,3654.7188 9242.0625,3656.8125 Q9242.0625,3658.9063 9242.75,3659.9844 Q9243.4375,3661.0469 9244.7813,3661.0469 Q9245.4063,3661.0469 9246,3660.7813 Q9246.5938,3660.5 9247.2188,3659.9219 L9247.2188,3662.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="9264.75" y="3661.1543">QLebedev</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9182" x2="9376" y1="3673" y2="3673"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="9182" x2="9376" y1="3681" y2="3681"/><ellipse cx="9192" cy="3692" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="9201" y="3695.2104">QLebedev(unsigned order)</text><ellipse cx="9192" cy="3704.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="9201" y="3708.0151">~QLebedev()</text><ellipse cx="9192" cy="3717.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="9201" y="3720.8198">GetLookupTable() : std::string</text><ellipse cx="9192" cy="3730.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="9201" y="3733.6245">SetAvailOrders() : void</text><ellipse cx="9192" cy="3743.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="9201" y="3746.4292">SetConnectivity() : void</text><ellipse cx="9192" cy="3756.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="9201" y="3759.2339">SetName() : void</text><!--MD5=[32917a1120b013c593a0f5a6a5c75a15]
class QLevelSymmetric--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="124.8281" id="QLevelSymmetric" style="stroke: #A80036; stroke-width: 1.5;" width="220" x="9412" y="3641"/><ellipse cx="9465.75" cy="3657" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9468.7188,3662.6406 Q9468.1406,3662.9375 9467.5,3663.0781 Q9466.8594,3663.2344 9466.1563,3663.2344 Q9463.6563,3663.2344 9462.3281,3661.5938 Q9461.0156,3659.9375 9461.0156,3656.8125 Q9461.0156,3653.6875 9462.3281,3652.0313 Q9463.6563,3650.375 9466.1563,3650.375 Q9466.8594,3650.375 9467.5,3650.5313 Q9468.1563,3650.6875 9468.7188,3650.9844 L9468.7188,3653.7031 Q9468.0938,3653.125 9467.5,3652.8594 Q9466.9063,3652.5781 9466.2813,3652.5781 Q9464.9375,3652.5781 9464.25,3653.6563 Q9463.5625,3654.7188 9463.5625,3656.8125 Q9463.5625,3658.9063 9464.25,3659.9844 Q9464.9375,3661.0469 9466.2813,3661.0469 Q9466.9063,3661.0469 9467.5,3660.7813 Q9468.0938,3660.5 9468.7188,3659.9219 L9468.7188,3662.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="104" x="9486.25" y="3661.1543">QLevelSymmetric</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9413" x2="9631" y1="3673" y2="3673"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="9413" x2="9631" y1="3681" y2="3681"/><ellipse cx="9423" cy="3692" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="9432" y="3695.2104">QLevelSymmetric(unsigned order)</text><ellipse cx="9423" cy="3704.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="9432" y="3708.0151">~QLevelSymmetric()</text><ellipse cx="9423" cy="3717.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="9432" y="3720.8198">GetLookupTable() : std::string</text><ellipse cx="9423" cy="3730.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="9432" y="3733.6245">SetAvailOrders() : void</text><ellipse cx="9423" cy="3743.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="9432" y="3746.4292">SetConnectivity() : void</text><ellipse cx="9423" cy="3756.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="9432" y="3759.2339">SetName() : void</text><!--MD5=[da3a73dd60c7a6cd3bfc963f796656da]
class QLookupQuadrature--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="188.8516" id="QLookupQuadrature" style="stroke: #A80036; stroke-width: 1.5;" width="311" x="9123.5" y="3392"/><ellipse cx="9212.25" cy="3408" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9212.3594,3403.3438 L9211.2031,3408.4219 L9213.5313,3408.4219 L9212.3594,3403.3438 Z M9210.875,3401.1094 L9213.8594,3401.1094 L9217.2188,3413.5 L9214.7656,3413.5 L9214,3410.4375 L9210.7188,3410.4375 L9209.9688,3413.5 L9207.5313,3413.5 L9210.875,3401.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="125" x="9232.75" y="3412.1543">QLookupQuadrature</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9124.5" x2="9433.5" y1="3424" y2="3424"/><polygon fill="none" points="9134.5,3430,9138.5,3434,9134.5,3438,9130.5,3434" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="9143.5" y="3438.2104">_availableOrders : std::vector&lt;unsigned&gt;</text><polygon fill="none" points="9134.5,3442.8047,9138.5,3446.8047,9134.5,3450.8047,9130.5,3446.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="9143.5" y="3451.0151">_nqByOrder : std::vector&lt;unsigned&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9124.5" x2="9433.5" y1="3457.6094" y2="3457.6094"/><ellipse cx="9134.5" cy="3468.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="9143.5" y="3471.8198">QLookupQuadrature(unsigned order)</text><ellipse cx="9134.5" cy="3481.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="9143.5" y="3484.6245">~QLookupQuadrature()</text><polygon fill="#FFFF44" points="9134.5,3489.2188,9138.5,3493.2188,9134.5,3497.2188,9130.5,3493.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="9143.5" y="3497.4292">CheckOrder() : bool</text><polygon fill="#FFFF44" points="9134.5,3502.0234,9138.5,3506.0234,9134.5,3510.0234,9130.5,3506.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="168" x="9143.5" y="3510.2339">GetLookupTable() : std::string</text><ellipse cx="9134.5" cy="3519.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="9143.5" y="3523.0386">getAvailOrders() : std::vector&lt;unsigned&gt; {query}</text><polygon fill="#FFFF44" points="9134.5,3527.6328,9138.5,3531.6328,9134.5,3535.6328,9130.5,3531.6328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="129" x="9143.5" y="3535.8433">SetAvailOrders() : void</text><polygon fill="#FFFF44" points="9134.5,3540.4375,9138.5,3544.4375,9134.5,3548.4375,9130.5,3544.4375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="9143.5" y="3548.6479">SetNq() : void</text><polygon fill="#FFFF44" points="9134.5,3553.2422,9138.5,3557.2422,9134.5,3561.2422,9130.5,3557.2422" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="9143.5" y="3561.4526">SetPointsAndWeights() : void</text><ellipse cx="9134.5" cy="3571.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="9143.5" y="3574.2573">printAvailOrders() : void {query}</text><!--MD5=[7cd9cfd355b807b7d67babb7c40cfbb5]
class QMonteCarlo--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="QMonteCarlo" style="stroke: #A80036; stroke-width: 1.5;" width="264" x="9470" y="3417.5"/><ellipse cx="9557.75" cy="3433.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9560.7188,3439.1406 Q9560.1406,3439.4375 9559.5,3439.5781 Q9558.8594,3439.7344 9558.1563,3439.7344 Q9555.6563,3439.7344 9554.3281,3438.0938 Q9553.0156,3436.4375 9553.0156,3433.3125 Q9553.0156,3430.1875 9554.3281,3428.5313 Q9555.6563,3426.875 9558.1563,3426.875 Q9558.8594,3426.875 9559.5,3427.0313 Q9560.1563,3427.1875 9560.7188,3427.4844 L9560.7188,3430.2031 Q9560.0938,3429.625 9559.5,3429.3594 Q9558.9063,3429.0781 9558.2813,3429.0781 Q9556.9375,3429.0781 9556.25,3430.1563 Q9555.5625,3431.2188 9555.5625,3433.3125 Q9555.5625,3435.4063 9556.25,3436.4844 Q9556.9375,3437.5469 9558.2813,3437.5469 Q9558.9063,3437.5469 9559.5,3437.2813 Q9560.0938,3437 9560.7188,3436.4219 L9560.7188,3439.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="9578.25" y="3437.6543">QMonteCarlo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9471" x2="9733" y1="3449.5" y2="3449.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="9471" x2="9733" y1="3457.5" y2="3457.5"/><ellipse cx="9481" cy="3468.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="9490" y="3471.7104">QMonteCarlo(unsigned order)</text><ellipse cx="9481" cy="3481.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="9490" y="3484.5151">~QMonteCarlo()</text><ellipse cx="9481" cy="3494.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="9490" y="3497.3198">GetPointsSphere() : VectorVector {query}</text><ellipse cx="9481" cy="3506.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="9490" y="3510.1245">SetConnectivity() : void</text><ellipse cx="9481" cy="3519.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="9490" y="3522.9292">SetName() : void</text><ellipse cx="9481" cy="3532.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="9490" y="3535.7339">SetNq() : void</text><ellipse cx="9481" cy="3545.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="9490" y="3548.5386">SetPointsAndWeights() : void</text><!--MD5=[fd98663caa810a189b8dddb0ed9e3149]
class QuadraticEntropy--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="150.4375" id="QuadraticEntropy" style="stroke: #A80036; stroke-width: 1.5;" width="246" x="3318" y="3053.5"/><ellipse cx="3382.25" cy="3069.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3385.2188,3075.1406 Q3384.6406,3075.4375 3384,3075.5781 Q3383.3594,3075.7344 3382.6563,3075.7344 Q3380.1563,3075.7344 3378.8281,3074.0938 Q3377.5156,3072.4375 3377.5156,3069.3125 Q3377.5156,3066.1875 3378.8281,3064.5313 Q3380.1563,3062.875 3382.6563,3062.875 Q3383.3594,3062.875 3384,3063.0313 Q3384.6563,3063.1875 3385.2188,3063.4844 L3385.2188,3066.2031 Q3384.5938,3065.625 3384,3065.3594 Q3383.4063,3065.0781 3382.7813,3065.0781 Q3381.4375,3065.0781 3380.75,3066.1563 Q3380.0625,3067.2188 3380.0625,3069.3125 Q3380.0625,3071.4063 3380.75,3072.4844 Q3381.4375,3073.5469 3382.7813,3073.5469 Q3383.4063,3073.5469 3384,3073.2813 Q3384.5938,3073 3385.2188,3072.4219 L3385.2188,3075.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="109" x="3402.75" y="3073.6543">QuadraticEntropy</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3319" x2="3563" y1="3085.5" y2="3085.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3319" x2="3563" y1="3093.5" y2="3093.5"/><ellipse cx="3329" cy="3104.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="3338" y="3107.7104">QuadraticEntropy()</text><ellipse cx="3329" cy="3117.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="3338" y="3120.5151">~QuadraticEntropy()</text><ellipse cx="3329" cy="3130.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="3338" y="3133.3198">CheckDomain(double z) : bool</text><ellipse cx="3329" cy="3142.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3338" y="3146.1245">Entropy(double z) : double</text><ellipse cx="3329" cy="3155.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="3338" y="3158.9292">EntropyDual(double y) : double</text><ellipse cx="3329" cy="3168.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="3338" y="3171.7339">EntropyHessianDual(double y) : double</text><ellipse cx="3329" cy="3181.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="3338" y="3184.5386">EntropyPrime(double z) : double</text><ellipse cx="3329" cy="3194.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="3338" y="3197.3433">EntropyPrimeDual(double y) : double</text><!--MD5=[0703d2d8d2d3d1a8b8965fa3fe3c728c]
class QuadratureBase--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="406.5313" id="QuadratureBase" style="stroke: #A80036; stroke-width: 1.5;" width="597" x="8553.5" y="2925"/><ellipse cx="8797.25" cy="2941" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8797.3594,2936.3438 L8796.2031,2941.4219 L8798.5313,2941.4219 L8797.3594,2936.3438 Z M8795.875,2934.1094 L8798.8594,2934.1094 L8802.2188,2946.5 L8799.7656,2946.5 L8799,2943.4375 L8795.7188,2943.4375 L8794.9688,2946.5 L8792.5313,2946.5 L8795.875,2934.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="101" x="8817.75" y="2945.1543">QuadratureBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8554.5" x2="9149.5" y1="2957" y2="2957"/><polygon fill="none" points="8564.5,2963,8568.5,2967,8564.5,2971,8560.5,2967" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="8573.5" y="2971.2104">_weights : Vector</text><polygon fill="none" points="8564.5,2975.8047,8568.5,2979.8047,8564.5,2983.8047,8560.5,2979.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="8573.5" y="2984.0151">_points : VectorVector</text><polygon fill="none" points="8564.5,2988.6094,8568.5,2992.6094,8564.5,2996.6094,8560.5,2992.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="8573.5" y="2996.8198">_pointsSphere : VectorVector</text><polygon fill="none" points="8564.5,3001.4141,8568.5,3005.4141,8564.5,3009.4141,8560.5,3005.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="8573.5" y="3009.6245">_connectivity : VectorVectorU</text><polygon fill="none" points="8564.5,3014.2188,8568.5,3018.2188,8564.5,3022.2188,8560.5,3018.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="8573.5" y="3022.4292">_name : std::string</text><polygon fill="none" points="8564.5,3027.0234,8568.5,3031.0234,8564.5,3035.0234,8560.5,3031.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="8573.5" y="3035.2339">_nq : unsigned</text><polygon fill="none" points="8564.5,3039.8281,8568.5,3043.8281,8564.5,3047.8281,8560.5,3043.8281" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="8573.5" y="3048.0386">_order : unsigned</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8554.5" x2="9149.5" y1="3054.6328" y2="3054.6328"/><ellipse cx="8564.5" cy="3065.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="8573.5" y="3068.8433">QuadratureBase(unsigned order)</text><ellipse cx="8564.5" cy="3078.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="8573.5" y="3081.6479">~QuadratureBase()</text><ellipse cx="8564.5" cy="3091.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="423" x="8573.5" y="3094.4526">CreateQuadrature(QUAD_NAME name, unsigned order) : QuadratureBase*</text><ellipse cx="8564.5" cy="3104.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="8573.5" y="3107.2573">GetWeights() : Vector {query}</text><ellipse cx="8564.5" cy="3116.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="8573.5" y="3120.062">GetPoints() : VectorVector {query}</text><ellipse cx="8564.5" cy="3129.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="8573.5" y="3132.8667">GetPointsSphere() : VectorVector {query}</text><ellipse cx="8564.5" cy="3142.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="8573.5" y="3145.6714">GetConnectivity() : VectorVectorU {query}</text><ellipse cx="8564.5" cy="3155.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="8573.5" y="3158.4761">Integrate(double(f)(doublex0,doublex1,doublex2)) : double</text><ellipse cx="8564.5" cy="3168.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="8573.5" y="3171.2808">SumUpWeights() : double</text><ellipse cx="8564.5" cy="3180.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="8573.5" y="3184.0854">GetName() : std::string {query}</text><ellipse cx="8564.5" cy="3193.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="571" x="8573.5" y="3196.8901">Integrate(std::vector&lt;double &gt;(f)(doublex0,doublex1,doublex2), unsigned len) : std::vector&lt;double&gt;</text><ellipse cx="8564.5" cy="3206.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="8573.5" y="3209.6948">GetNq() : unsigned {query}</text><ellipse cx="8564.5" cy="3219.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="8573.5" y="3222.4995">GetOrder() : unsigned {query}</text><ellipse cx="8564.5" cy="3232.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="8573.5" y="3235.3042">PrintPoints() : void</text><ellipse cx="8564.5" cy="3244.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="8573.5" y="3248.1089">PrintPointsAndWeights() : void</text><ellipse cx="8564.5" cy="3257.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="8573.5" y="3260.9136">PrintWeights() : void</text><polygon fill="#FFFF44" points="8564.5,3265.5078,8568.5,3269.5078,8564.5,3273.5078,8560.5,3269.5078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="132" x="8573.5" y="3273.7183">SetConnectivity() : void</text><polygon fill="#FFFF44" points="8564.5,3278.3125,8568.5,3282.3125,8564.5,3286.3125,8560.5,3282.3125" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="95" x="8573.5" y="3286.5229">SetName() : void</text><polygon fill="#FFFF44" points="8564.5,3291.1172,8568.5,3295.1172,8564.5,3299.1172,8560.5,3295.1172" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="77" x="8573.5" y="3299.3276">SetNq() : void</text><polygon fill="#FFFF44" points="8564.5,3303.9219,8568.5,3307.9219,8564.5,3311.9219,8560.5,3307.9219" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="8573.5" y="3312.1323">SetOrder(unsigned order) : void</text><polygon fill="#FFFF44" points="8564.5,3316.7266,8568.5,3320.7266,8564.5,3324.7266,8560.5,3320.7266" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="8573.5" y="3324.937">SetPointsAndWeights() : void</text><!--MD5=[168618c52cf8b01b81c881510cd68189]
class Reconstructor--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="73.6094" id="Reconstructor" style="stroke: #A80036; stroke-width: 1.5;" width="697" x="2723.5" y="174.5"/><ellipse cx="3023.25" cy="190.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3026.2188,196.1406 Q3025.6406,196.4375 3025,196.5781 Q3024.3594,196.7344 3023.6563,196.7344 Q3021.1563,196.7344 3019.8281,195.0938 Q3018.5156,193.4375 3018.5156,190.3125 Q3018.5156,187.1875 3019.8281,185.5313 Q3021.1563,183.875 3023.6563,183.875 Q3024.3594,183.875 3025,184.0313 Q3025.6563,184.1875 3026.2188,184.4844 L3026.2188,187.2031 Q3025.5938,186.625 3025,186.3594 Q3024.4063,186.0781 3023.7813,186.0781 Q3022.4375,186.0781 3021.75,187.1563 Q3021.0625,188.2188 3021.0625,190.3125 Q3021.0625,192.4063 3021.75,193.4844 Q3022.4375,194.5469 3023.7813,194.5469 Q3024.4063,194.5469 3025,194.2813 Q3025.5938,194 3026.2188,193.4219 L3026.2188,196.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="89" x="3043.75" y="194.6543">Reconstructor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2724.5" x2="3419.5" y1="206.5" y2="206.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2724.5" x2="3419.5" y1="214.5" y2="214.5"/><ellipse cx="2734.5" cy="225.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="2743.5" y="228.7104">Reconstructor(Config* settings)</text><ellipse cx="2734.5" cy="238.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="671" x="2743.5" y="241.5151">ReconstructSlopeStruct(double uL, double uC, double uR, double dxL, double dxR, std::string limiter) : double {query}</text><!--MD5=[0b503fe5c24e14c3c70681465d2d6a28]
class SNSolver--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="SNSolver" style="stroke: #A80036; stroke-width: 1.5;" width="227" x="8961.5" y="686"/><ellipse cx="9043.25" cy="702" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9046.2188,707.6406 Q9045.6406,707.9375 9045,708.0781 Q9044.3594,708.2344 9043.6563,708.2344 Q9041.1563,708.2344 9039.8281,706.5938 Q9038.5156,704.9375 9038.5156,701.8125 Q9038.5156,698.6875 9039.8281,697.0313 Q9041.1563,695.375 9043.6563,695.375 Q9044.3594,695.375 9045,695.5313 Q9045.6563,695.6875 9046.2188,695.9844 L9046.2188,698.7031 Q9045.5938,698.125 9045,697.8594 Q9044.4063,697.5781 9043.7813,697.5781 Q9042.4375,697.5781 9041.75,698.6563 Q9041.0625,699.7188 9041.0625,701.8125 Q9041.0625,703.9063 9041.75,704.9844 Q9042.4375,706.0469 9043.7813,706.0469 Q9044.4063,706.0469 9045,705.7813 Q9045.5938,705.5 9046.2188,704.9219 L9046.2188,707.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="9063.75" y="706.1543">SNSolver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8962.5" x2="9187.5" y1="718" y2="718"/><polygon fill="none" points="8972.5,724,8976.5,728,8972.5,732,8968.5,728" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="8981.5" y="732.2104">_scatteringKernel : Matrix</text><polygon fill="none" points="8972.5,736.8047,8976.5,740.8047,8972.5,744.8047,8968.5,740.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="8981.5" y="745.0151">_weights : Vector</text><polygon fill="none" points="8972.5,749.6094,8976.5,753.6094,8972.5,757.6094,8968.5,753.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="8981.5" y="757.8198">_quadPoints : VectorVector</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8962.5" x2="9187.5" y1="764.4141" y2="764.4141"/><ellipse cx="8972.5" cy="775.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="8981.5" y="778.6245">SNSolver(Config* settings)</text><ellipse cx="8972.5" cy="788.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="8981.5" y="791.4292">Save() : void {query}</text><ellipse cx="8972.5" cy="801.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="8981.5" y="804.2339">Save(int currEnergy) : void {query}</text><ellipse cx="8972.5" cy="813.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="8981.5" y="817.0386">Solve() : void</text><!--MD5=[bb8b308f4b3fca4e9e4f2a7f2b74c7a7]
class SNSolverMPI--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="86.4141" id="SNSolverMPI" style="stroke: #A80036; stroke-width: 1.5;" width="197" x="9223.5" y="1351.5"/><ellipse cx="9279.75" cy="1367.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9282.7188,1373.1406 Q9282.1406,1373.4375 9281.5,1373.5781 Q9280.8594,1373.7344 9280.1563,1373.7344 Q9277.6563,1373.7344 9276.3281,1372.0938 Q9275.0156,1370.4375 9275.0156,1367.3125 Q9275.0156,1364.1875 9276.3281,1362.5313 Q9277.6563,1360.875 9280.1563,1360.875 Q9280.8594,1360.875 9281.5,1361.0313 Q9282.1563,1361.1875 9282.7188,1361.4844 L9282.7188,1364.2031 Q9282.0938,1363.625 9281.5,1363.3594 Q9280.9063,1363.0781 9280.2813,1363.0781 Q9278.9375,1363.0781 9278.25,1364.1563 Q9277.5625,1365.2188 9277.5625,1367.3125 Q9277.5625,1369.4063 9278.25,1370.4844 Q9278.9375,1371.5469 9280.2813,1371.5469 Q9280.9063,1371.5469 9281.5,1371.2813 Q9282.0938,1371 9282.7188,1370.4219 L9282.7188,1373.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="9300.25" y="1371.6543">SNSolverMPI</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9224.5" x2="9419.5" y1="1383.5" y2="1383.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="9224.5" x2="9419.5" y1="1391.5" y2="1391.5"/><ellipse cx="9234.5" cy="1402.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="9243.5" y="1405.7104">SNSolverMPI(Config* settings)</text><ellipse cx="9234.5" cy="1415.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="9243.5" y="1418.5151">Save() : void {query}</text><ellipse cx="9234.5" cy="1428.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="9243.5" y="1431.3198">Solve() : void</text><!--MD5=[16f9774f924e6e8a5f8fdff2c2e63062]
class ScatteringKernel--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="124.8281" id="ScatteringKernel" style="stroke: #A80036; stroke-width: 1.5;" width="533" x="9016.5" y="2247"/><ellipse cx="9226.25" cy="2263" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M9226.3594,2258.3438 L9225.2031,2263.4219 L9227.5313,2263.4219 L9226.3594,2258.3438 Z M9224.875,2256.1094 L9227.8594,2256.1094 L9231.2188,2268.5 L9228.7656,2268.5 L9228,2265.4375 L9224.7188,2265.4375 L9223.9688,2268.5 L9221.5313,2268.5 L9224.875,2256.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="105" x="9246.75" y="2267.1543">ScatteringKernel</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9017.5" x2="9548.5" y1="2279" y2="2279"/><polygon fill="none" points="9027.5,2285,9031.5,2289,9027.5,2293,9023.5,2289" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="9036.5" y="2293.2104">_quad : QuadratureBase*</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="9017.5" x2="9548.5" y1="2299.8047" y2="2299.8047"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="9024.5" y="2307.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="9036.5" y="2314.0151">ScatteringKernel()</text><ellipse cx="9027.5" cy="2323.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="9036.5" y="2326.8198">ScatteringKernel(QuadratureBase* quad)</text><ellipse cx="9027.5" cy="2336.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="9036.5" y="2339.6245">~ScatteringKernel()</text><ellipse cx="9027.5" cy="2349.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="168" x="9036.5" y="2352.4292">GetScatteringKernel() : Matrix</text><ellipse cx="9027.5" cy="2362.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="507" x="9036.5" y="2365.2339">CreateScatteringKernel(KERNEL_NAME name, QuadratureBase* quad) : ScatteringKernel*</text><!--MD5=[7e0cc054e68485d8dbab588155cf841a]
class Solver--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="406.5313" id="Solver" style="stroke: #A80036; stroke-width: 1.5;" width="315" x="5609.5" y="8"/><ellipse cx="5743.75" cy="24" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5743.8594,19.3438 L5742.7031,24.4219 L5745.0313,24.4219 L5743.8594,19.3438 Z M5742.375,17.1094 L5745.3594,17.1094 L5748.7188,29.5 L5746.2656,29.5 L5745.5,26.4375 L5742.2188,26.4375 L5741.4688,29.5 L5739.0313,29.5 L5742.375,17.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="38" x="5764.25" y="28.1543">Solver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5610.5" x2="5923.5" y1="40" y2="40"/><polygon fill="none" points="5620.5,46,5624.5,50,5620.5,54,5616.5,50" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="5629.5" y="54.2104">_settings : Config*</text><polygon fill="none" points="5620.5,58.8047,5624.5,62.8047,5620.5,66.8047,5616.5,62.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="5629.5" y="67.0151">_mesh : Mesh*</text><polygon fill="none" points="5620.5,71.6094,5624.5,75.6094,5620.5,79.6094,5616.5,75.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="5629.5" y="79.8198">_g : NumericalFlux*</text><polygon fill="none" points="5620.5,84.4141,5624.5,88.4141,5620.5,92.4141,5616.5,88.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="5629.5" y="92.6245">_problem : ProblemBase*</text><polygon fill="none" points="5620.5,97.2188,5624.5,101.2188,5620.5,105.2188,5616.5,101.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="5629.5" y="105.4292">_quadrature : QuadratureBase*</text><polygon fill="none" points="5620.5,110.0234,5624.5,114.0234,5620.5,118.0234,5616.5,114.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="5629.5" y="118.2339">_sigmaS : VectorVector</text><polygon fill="none" points="5620.5,122.8281,5624.5,126.8281,5620.5,130.8281,5616.5,126.8281" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="5629.5" y="131.0386">_sigmaT : VectorVector</text><polygon fill="none" points="5620.5,135.6328,5624.5,139.6328,5620.5,143.6328,5616.5,139.6328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="5629.5" y="143.8433">_sol : VectorVector</text><polygon fill="none" points="5620.5,148.4375,5624.5,152.4375,5620.5,156.4375,5616.5,152.4375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="5629.5" y="156.6479">_dE : double</text><polygon fill="none" points="5620.5,161.2422,5624.5,165.2422,5620.5,169.2422,5616.5,165.2422" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="5629.5" y="169.4526">_boundaryCells : std::vector&lt;BOUNDARY_TYPE&gt;</text><polygon fill="none" points="5620.5,174.0469,5624.5,178.0469,5620.5,182.0469,5616.5,178.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="5629.5" y="182.2573">_Q : std::vector&lt;VectorVector&gt;</text><polygon fill="none" points="5620.5,186.8516,5624.5,190.8516,5620.5,194.8516,5616.5,190.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="5629.5" y="195.062">_areas : std::vector&lt;double&gt;</text><polygon fill="none" points="5620.5,199.6563,5624.5,203.6563,5620.5,207.6563,5616.5,203.6563" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="5629.5" y="207.8667">_density : std::vector&lt;double&gt;</text><polygon fill="none" points="5620.5,212.4609,5624.5,216.4609,5620.5,220.4609,5616.5,216.4609" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="5629.5" y="220.6714">_energies : std::vector&lt;double&gt;</text><polygon fill="none" points="5620.5,225.2656,5624.5,229.2656,5620.5,233.2656,5616.5,229.2656" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="5629.5" y="233.4761">_s : std::vector&lt;double&gt;</text><polygon fill="none" points="5620.5,238.0703,5624.5,242.0703,5620.5,246.0703,5616.5,242.0703" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="5629.5" y="246.2808">_solverOutput : std::vector&lt;double&gt;</text><polygon fill="none" points="5620.5,250.875,5624.5,254.875,5620.5,258.875,5616.5,254.875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="5629.5" y="259.0854">_normals : std::vector&lt;std::vector&lt;Vector&gt; &gt;</text><polygon fill="none" points="5620.5,263.6797,5624.5,267.6797,5620.5,271.6797,5616.5,267.6797" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="5629.5" y="271.8901">_neighbors : std::vector&lt;std::vector&lt;unsigned&gt; &gt;</text><polygon fill="none" points="5620.5,276.4844,5624.5,280.4844,5620.5,284.4844,5616.5,280.4844" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="5629.5" y="284.6948">_nCells : unsigned</text><polygon fill="none" points="5620.5,289.2891,5624.5,293.2891,5620.5,297.2891,5616.5,293.2891" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="5629.5" y="297.4995">_nEnergies : unsigned</text><polygon fill="none" points="5620.5,302.0938,5624.5,306.0938,5620.5,310.0938,5616.5,306.0938" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="5629.5" y="310.3042">_nq : unsigned</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5610.5" x2="5923.5" y1="316.8984" y2="316.8984"/><ellipse cx="5620.5" cy="327.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="5629.5" y="331.1089">Solver(Config* settings)</text><ellipse cx="5620.5" cy="340.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="5629.5" y="343.9136">~Solver()</text><ellipse cx="5620.5" cy="353.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="192" x="5629.5" y="356.7183">Create(Config* settings) : Solver*</text><polygon fill="#FFFF44" points="5620.5,361.3125,5624.5,365.3125,5620.5,369.3125,5616.5,365.3125" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="5629.5" y="369.5229">ComputeTimeStep(double cfl) : double {query}</text><ellipse cx="5620.5" cy="379.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="123" x="5629.5" y="382.3276">Save() : void {query}</text><ellipse cx="5620.5" cy="391.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="204" x="5629.5" y="395.1323">Save(int currEnergy) : void {query}</text><ellipse cx="5620.5" cy="404.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="75" x="5629.5" y="407.937">Solve() : void</text><!--MD5=[c003162fad8b6c8dcf5366b775e18093]
class SphericalHarmonics--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="227.2656" id="SphericalHarmonics" style="stroke: #A80036; stroke-width: 1.5;" width="443" x="3172.5" y="1281"/><ellipse cx="3327.75" cy="1297" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3330.7188,1302.6406 Q3330.1406,1302.9375 3329.5,1303.0781 Q3328.8594,1303.2344 3328.1563,1303.2344 Q3325.6563,1303.2344 3324.3281,1301.5938 Q3323.0156,1299.9375 3323.0156,1296.8125 Q3323.0156,1293.6875 3324.3281,1292.0313 Q3325.6563,1290.375 3328.1563,1290.375 Q3328.8594,1290.375 3329.5,1290.5313 Q3330.1563,1290.6875 3330.7188,1290.9844 L3330.7188,1293.7031 Q3330.0938,1293.125 3329.5,1292.8594 Q3328.9063,1292.5781 3328.2813,1292.5781 Q3326.9375,1292.5781 3326.25,1293.6563 Q3325.5625,1294.7188 3325.5625,1296.8125 Q3325.5625,1298.9063 3326.25,1299.9844 Q3326.9375,1301.0469 3328.2813,1301.0469 Q3328.9063,1301.0469 3329.5,1300.7813 Q3330.0938,1300.5 3330.7188,1299.9219 L3330.7188,1302.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="124" x="3348.25" y="1301.1543">SphericalHarmonics</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3173.5" x2="3614.5" y1="1313" y2="1313"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3180.5" y="1321"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="3192.5" y="1327.2104">_YBasis : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3180.5" y="1333.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="3192.5" y="1340.0151">_aParam : std::vector&lt;double&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3180.5" y="1346.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="3192.5" y="1352.8198">_assLegendreP : std::vector&lt;double&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3180.5" y="1359.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="3192.5" y="1365.6245">_bParam : std::vector&lt;double&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3180.5" y="1372.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="3192.5" y="1378.4292">_LMaxDegree : unsigned</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3173.5" x2="3614.5" y1="1385.0234" y2="1385.0234"/><ellipse cx="3183.5" cy="1396.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="3192.5" y="1399.2339">SphericalHarmonics(unsigned L_degree)</text><ellipse cx="3183.5" cy="1408.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="3192.5" y="1412.0386">ComputeSphericalBasis(double my, double phi) : Vector</text><ellipse cx="3183.5" cy="1421.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="351" x="3192.5" y="1424.8433">ComputeSphericalBasis(double x, double y, double z) : Vector</text><ellipse cx="3183.5" cy="1434.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="348" x="3192.5" y="1437.6479">GetAssLegendrePoly(const double my) : std::vector&lt;double&gt;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3180.5" y="1444.2422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="417" x="3192.5" y="1450.4526">GlobalIdxAssLegendreP(unsigned l_degree, unsigned k_order) : unsigned</text><ellipse cx="3183.5" cy="1460.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="368" x="3192.5" y="1463.2573">GlobalIdxBasis(unsigned l_degree, unsigned k_order) : unsigned</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3180.5" y="1469.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="3192.5" y="1476.062">ComputeAssLegendrePoly(const double my) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3180.5" y="1482.6563"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="3192.5" y="1488.8667">ComputeCoefficients() : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3180.5" y="1495.4609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="3192.5" y="1501.6714">ComputeYBasis(const double phi) : void</text><!--MD5=[a030d157fa00dd6dd61ccf2a05ea46ea]
class Spline--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="265.6797" id="Spline" style="stroke: #A80036; stroke-width: 1.5;" width="693" x="3455.5" y="78.5"/><ellipse cx="3778.75" cy="94.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3781.7188,100.1406 Q3781.1406,100.4375 3780.5,100.5781 Q3779.8594,100.7344 3779.1563,100.7344 Q3776.6563,100.7344 3775.3281,99.0938 Q3774.0156,97.4375 3774.0156,94.3125 Q3774.0156,91.1875 3775.3281,89.5313 Q3776.6563,87.875 3779.1563,87.875 Q3779.8594,87.875 3780.5,88.0313 Q3781.1563,88.1875 3781.7188,88.4844 L3781.7188,91.2031 Q3781.0938,90.625 3780.5,90.3594 Q3779.9063,90.0781 3779.2813,90.0781 Q3777.9375,90.0781 3777.25,91.1563 Q3776.5625,92.2188 3776.5625,94.3125 Q3776.5625,96.4063 3777.25,97.4844 Q3777.9375,98.5469 3779.2813,98.5469 Q3779.9063,98.5469 3780.5,98.2813 Q3781.0938,98 3781.7188,97.4219 L3781.7188,100.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="3799.25" y="98.6543">Spline</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3456.5" x2="4147.5" y1="110.5" y2="110.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="118.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="3475.5" y="124.7104">m_a : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="131.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="3475.5" y="137.5151">m_b : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="144.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3475.5" y="150.3198">m_c : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="156.9141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3475.5" y="163.1245">m_x : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="169.7188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="3475.5" y="175.9292">m_y : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="182.5234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="3475.5" y="188.7339">m_left : bd_type</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="195.3281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="3475.5" y="201.5386">m_right : bd_type</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="208.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="3475.5" y="214.3433">m_force_linear_extrapolation : bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="220.9375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3475.5" y="227.1479">m_b0 : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="233.7422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="3475.5" y="239.9526">m_c0 : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="246.5469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="3475.5" y="252.7573">m_left_value : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3463.5" y="259.3516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="3475.5" y="265.562">m_right_value : double</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3456.5" x2="4147.5" y1="272.1563" y2="272.1563"/><ellipse cx="3466.5" cy="283.1563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="43" x="3475.5" y="286.3667">Spline()</text><ellipse cx="3466.5" cy="295.9609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="3475.5" y="299.1714">operator()(double x) : double {query}</text><ellipse cx="3466.5" cy="308.7656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="667" x="3475.5" y="311.9761">set_boundary(bd_type left, double left_value, bd_type right, double right_value, bool force_linear_extrapolation) : void</text><ellipse cx="3466.5" cy="321.5703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="560" x="3475.5" y="324.7808">set_points(const std::vector&lt;double&gt;&amp; x, const std::vector&lt;double&gt;&amp; y, bool cubic_Spline) : void</text><ellipse cx="3466.5" cy="334.375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="398" x="3475.5" y="337.5854">set_points(const Vector&amp; x, const Vector&amp; y, bool cubic_Spline) : void</text><!--MD5=[5c1f2380e58c36d5ea81108e4a7509d5]
class UpwindFlux--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="99.2188" id="UpwindFlux" style="stroke: #A80036; stroke-width: 1.5;" width="1310" x="5185" y="1345"/><ellipse cx="5801.25" cy="1361" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5804.2188,1366.6406 Q5803.6406,1366.9375 5803,1367.0781 Q5802.3594,1367.2344 5801.6563,1367.2344 Q5799.1563,1367.2344 5797.8281,1365.5938 Q5796.5156,1363.9375 5796.5156,1360.8125 Q5796.5156,1357.6875 5797.8281,1356.0313 Q5799.1563,1354.375 5801.6563,1354.375 Q5802.3594,1354.375 5803,1354.5313 Q5803.6563,1354.6875 5804.2188,1354.9844 L5804.2188,1357.7031 Q5803.5938,1357.125 5803,1356.8594 Q5802.4063,1356.5781 5801.7813,1356.5781 Q5800.4375,1356.5781 5799.75,1357.6563 Q5799.0625,1358.7188 5799.0625,1360.8125 Q5799.0625,1362.9063 5799.75,1363.9844 Q5800.4375,1365.0469 5801.7813,1365.0469 Q5802.4063,1365.0469 5803,1364.7813 Q5803.5938,1364.5 5804.2188,1363.9219 L5804.2188,1366.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="69" x="5821.75" y="1365.1543">UpwindFlux</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5186" x2="6494" y1="1377" y2="1377"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="5186" x2="6494" y1="1385" y2="1385"/><ellipse cx="5196" cy="1396" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="5205" y="1399.2104">UpwindFlux()</text><ellipse cx="5196" cy="1408.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1156" x="5205" y="1412.0151">Flux(const Matrix AxPlus, const Matrix AxMinus, const Matrix AyPlus, const Matrix AyMinus, const Matrix AzPlus, const Matrix AzMinus, const Vector psiL, const Vector psiR, const Vector n) : Vector {query}</text><ellipse cx="5196" cy="1421.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="5205" y="1424.8198">Flux(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><ellipse cx="5196" cy="1434.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1284" x="5205" y="1437.6245">FluxVanLeer(const Matrix&amp; Ax, const Matrix&amp; AxAbs, const Matrix&amp; Ay, const Matrix&amp; AyAbs, const Matrix&amp; Az, const Matrix&amp; AzAbs, const Vector&amp; psiL, const Vector&amp; psiR, const Vector&amp; n, Vector&amp; resultFlux) : void {query}</text><!--MD5=[73e5f3ede57037b30fe36e3ed032a406]
class WaterPhantom--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="137.6328" id="WaterPhantom" style="stroke: #A80036; stroke-width: 1.5;" width="519" x="7156.5" y="2240.5"/><ellipse cx="7365.25" cy="2256.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7368.2188,2262.1406 Q7367.6406,2262.4375 7367,2262.5781 Q7366.3594,2262.7344 7365.6563,2262.7344 Q7363.1563,2262.7344 7361.8281,2261.0938 Q7360.5156,2259.4375 7360.5156,2256.3125 Q7360.5156,2253.1875 7361.8281,2251.5313 Q7363.1563,2249.875 7365.6563,2249.875 Q7366.3594,2249.875 7367,2250.0313 Q7367.6563,2250.1875 7368.2188,2250.4844 L7368.2188,2253.2031 Q7367.5938,2252.625 7367,2252.3594 Q7366.4063,2252.0781 7365.7813,2252.0781 Q7364.4375,2252.0781 7363.75,2253.1563 Q7363.0625,2254.2188 7363.0625,2256.3125 Q7363.0625,2258.4063 7363.75,2259.4844 Q7364.4375,2260.5469 7365.7813,2260.5469 Q7366.4063,2260.5469 7367,2260.2813 Q7367.5938,2260 7368.2188,2259.4219 L7368.2188,2262.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="93" x="7385.75" y="2260.6543">WaterPhantom</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7157.5" x2="7674.5" y1="2272.5" y2="2272.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7157.5" x2="7674.5" y1="2280.5" y2="2280.5"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="7164.5" y="2288.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="7176.5" y="2294.7104">WaterPhantom()</text><ellipse cx="7167.5" cy="2304.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="7176.5" y="2307.5151">WaterPhantom(Config* settings, Mesh* mesh)</text><ellipse cx="7167.5" cy="2317.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="7176.5" y="2320.3198">~WaterPhantom()</text><ellipse cx="7167.5" cy="2329.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="7176.5" y="2333.1245">SetupIC() : VectorVector</text><ellipse cx="7167.5" cy="2342.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="7176.5" y="2345.9292">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="7167.5" cy="2355.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="393" x="7176.5" y="2358.7339">GetDensity(const VectorVector&amp; cellMidPoints) : std::vector&lt;double&gt;</text><ellipse cx="7167.5" cy="2368.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="7176.5" y="2371.5386">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><!--MD5=[2f6d06e17746718185fc96242bb8b19f]
class BOUNDARY_TYPE--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="99.2188" id="BOUNDARY_TYPE" style="stroke: #A80036; stroke-width: 1.5;" width="135" x="1918.5" y="705.5"/><ellipse cx="1933.5" cy="721.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1937.6094,727.5 L1929.8906,727.5 L1929.8906,715.1094 L1937.6094,715.1094 L1937.6094,717.2656 L1932.3438,717.2656 L1932.3438,719.9375 L1937.1094,719.9375 L1937.1094,722.0938 L1932.3438,722.0938 L1932.3438,725.3438 L1937.6094,725.3438 L1937.6094,727.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="103" x="1947.5" y="725.6543">BOUNDARY_TYPE</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1919.5" x2="2052.5" y1="737.5" y2="737.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="1924.5" y="751.7104">DIRICHLET</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="42" x="1924.5" y="764.5151">INVALID</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1924.5" y="777.3198">NEUMANN</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="32" x="1924.5" y="790.1245">NONE</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1919.5" x2="2052.5" y1="796.7188" y2="796.7188"/><!--MD5=[7d96b260274ec8c2006fcf36603e9819]
class ENTROPY_NAME--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="99.2188" id="ENTROPY_NAME" style="stroke: #A80036; stroke-width: 1.5;" width="133" x="2088.5" y="705.5"/><ellipse cx="2105.3" cy="721.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2109.4094,727.5 L2101.6906,727.5 L2101.6906,715.1094 L2109.4094,715.1094 L2109.4094,717.2656 L2104.1438,717.2656 L2104.1438,719.9375 L2108.9094,719.9375 L2108.9094,722.0938 L2104.1438,722.0938 L2104.1438,725.3438 L2109.4094,725.3438 L2109.4094,727.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="97" x="2119.7" y="725.6543">ENTROPY_NAME</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2089.5" x2="2220.5" y1="737.5" y2="737.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="2094.5" y="751.7104">BOSE_EINSTEIN</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="2094.5" y="764.5151">FERMI_DIRAC</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2094.5" y="777.3198">MAXWELL_BOLZMANN</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="2094.5" y="790.1245">QUADRATIC</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2089.5" x2="2220.5" y1="796.7188" y2="796.7188"/><!--MD5=[68cd91d5615ccadb6700a0a296529008]
class KERNEL_NAME--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="73.6094" id="KERNEL_NAME" style="stroke: #A80036; stroke-width: 1.5;" width="124" x="2257" y="718"/><ellipse cx="2274.25" cy="734" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2278.3594,740 L2270.6406,740 L2270.6406,727.6094 L2278.3594,727.6094 L2278.3594,729.7656 L2273.0938,729.7656 L2273.0938,732.4375 L2277.8594,732.4375 L2277.8594,734.5938 L2273.0938,734.5938 L2273.0938,737.8438 L2278.3594,737.8438 L2278.3594,740 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="87" x="2288.75" y="738.1543">KERNEL_NAME</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2258" x2="2380" y1="750" y2="750"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="2263" y="764.2104">KERNEL_Isotropic</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="2263" y="777.0151">KERNEL_Isotropic1D</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2258" x2="2380" y1="783.6094" y2="783.6094"/><!--MD5=[54ec0f4632edfa5da6e9d333b2ab18bb]
class OPTIMIZER_NAME--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="73.6094" id="OPTIMIZER_NAME" style="stroke: #A80036; stroke-width: 1.5;" width="138" x="2416" y="718"/><ellipse cx="2431" cy="734" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2435.1094,740 L2427.3906,740 L2427.3906,727.6094 L2435.1094,727.6094 L2435.1094,729.7656 L2429.8438,729.7656 L2429.8438,732.4375 L2434.6094,732.4375 L2434.6094,734.5938 L2429.8438,734.5938 L2429.8438,737.8438 L2435.1094,737.8438 L2435.1094,740 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="106" x="2445" y="738.1543">OPTIMIZER_NAME</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2417" x2="2553" y1="750" y2="750"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="15" x="2422" y="764.2104">ML</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="48" x="2422" y="777.0151">NEWTON</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2417" x2="2553" y1="783.6094" y2="783.6094"/><!--MD5=[bca9a10492242ad7f949a711b29b6c8e]
class PROBLEM_NAME--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="112.0234" id="PROBLEM_NAME" style="stroke: #A80036; stroke-width: 1.5;" width="203" x="1884.5" y="1338.5"/><ellipse cx="1932.75" cy="1354.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1936.8594,1360.5 L1929.1406,1360.5 L1929.1406,1348.1094 L1936.8594,1348.1094 L1936.8594,1350.2656 L1931.5938,1350.2656 L1931.5938,1352.9375 L1936.3594,1352.9375 L1936.3594,1355.0938 L1931.5938,1355.0938 L1931.5938,1358.3438 L1936.8594,1358.3438 L1936.8594,1360.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="98" x="1953.25" y="1358.6543">PROBLEM_NAME</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1885.5" x2="2086.5" y1="1370.5" y2="1370.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1890.5" y="1384.7104">PROBLEM_Checkerboard</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1890.5" y="1397.5151">PROBLEM_ElectronRT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="1890.5" y="1410.3198">PROBLEM_LineSource</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="1890.5" y="1423.1245">PROBLEM_LineSource_Pseudo_1D</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1890.5" y="1435.9292">PROBLEM_WaterPhantom</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1885.5" x2="2086.5" y1="1442.5234" y2="1442.5234"/><!--MD5=[30a9f32f1054ef51fd0c6378da396cd5]
class QUAD_NAME--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="124.8281" id="QUAD_NAME" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="2123" y="1332"/><ellipse cx="2181.75" cy="1348" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2185.8594,1354 L2178.1406,1354 L2178.1406,1341.6094 L2185.8594,1341.6094 L2185.8594,1343.7656 L2180.5938,1343.7656 L2180.5938,1346.4375 L2185.3594,1346.4375 L2185.3594,1348.5938 L2180.5938,1348.5938 L2180.5938,1351.8438 L2185.8594,1351.8438 L2185.8594,1354 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="2202.25" y="1352.1543">QUAD_NAME</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2124" x2="2324" y1="1364" y2="1364"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2129" y="1378.2104">QUAD_GaussLegendre1D</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="2129" y="1391.0151">QUAD_GaussLegendreTensorized</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="2129" y="1403.8198">QUAD_LDFESA</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="2129" y="1416.6245">QUAD_Lebedev</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="2129" y="1429.4292">QUAD_LevelSymmetric</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2129" y="1442.2339">QUAD_MonteCarlo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2124" x2="2324" y1="1448.8281" y2="1448.8281"/><!--MD5=[329b2a342f204483b823a2716a5a2473]
class SOLVER_NAME--><rect fill="#FEFECE" filter="url(#fyifc8oh1zrtn)" height="86.4141" id="SOLVER_NAME" style="stroke: #A80036; stroke-width: 1.5;" width="120" x="2360" y="1351.5"/><ellipse cx="2375" cy="1367.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2379.1094,1373.5 L2371.3906,1373.5 L2371.3906,1361.1094 L2379.1094,1361.1094 L2379.1094,1363.2656 L2373.8438,1363.2656 L2373.8438,1365.9375 L2378.6094,1365.9375 L2378.6094,1368.0938 L2373.8438,1368.0938 L2373.8438,1371.3438 L2379.1094,1371.3438 L2379.1094,1373.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="2389" y="1371.6543">SOLVER_NAME</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2361" x2="2479" y1="1383.5" y2="1383.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="2366" y="1397.7104">MN_SOLVER</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="65" x="2366" y="1410.5151">PN_SOLVER</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2366" y="1423.3198">SN_SOLVER</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2361" x2="2479" y1="1429.9141" y2="1429.9141"/><!--MD5=[b0fb3a41c0da1dd6d85c4f39212f7048]
reverse link ElectronRT to WaterPhantom--><path d="M7416,1516.02 C7416,1710.26 7416,2086.29 7416,2240.26 " fill="none" id="ElectronRT&lt;-WaterPhantom" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7409,1515.82,7416,1495.82,7423,1515.82,7409,1515.82" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9d52fbd0a3c0c334d7930925179aad93]
reverse link EntropyBase to MaxwellBoltzmannEntropy--><path d="M3183.67,2411.28 C3178.17,2577.78 3167.3,2906.49 3162.45,3053.46 " fill="none" id="EntropyBase&lt;-MaxwellBoltzmannEntropy" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3176.68,2410.83,3184.34,2391.07,3190.67,2411.29,3176.68,2410.83" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8c7c86d8ad1952b736a89a0eae22156c]
reverse link EntropyBase to QuadraticEntropy--><path d="M3218.02,2410.26 C3269.68,2576.44 3372.2,2906.19 3417.98,3053.46 " fill="none" id="EntropyBase&lt;-QuadraticEntropy" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3211.3,2412.25,3212.05,2391.07,3224.67,2408.09,3211.3,2412.25" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[afbdd02abc4e371dab1c36a18e6b0ee8]
reverse link LineSource_SN to LineSource_SN_Pseudo1D--><path d="M8437.25,1484.2 C8373.69,1553.12 8289.07,1653.58 8233,1754 C8133.44,1932.32 8070.93,2170.95 8048.43,2266.43 " fill="none" id="LineSource_SN&lt;-LineSource_SN_Pseudo1D" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8432.13,1479.42,8450.88,1469.55,8442.38,1488.96,8432.13,1479.42" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[51a439b0c181719f1a10a280166c3aa3]
reverse link NumericalFlux to LaxFriedrichsFlux--><path d="M5308.53,827.46 C5208.63,960.98 4996.54,1244.43 4916.48,1351.43 " fill="none" id="NumericalFlux&lt;-LaxFriedrichsFlux" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="5303.12,823,5320.71,811.18,5314.33,831.39,5303.12,823" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2c8ea5724d5b402e5c8d4ca42df5ffb9]
reverse link NumericalFlux to UpwindFlux--><path d="M5415.64,827.53 C5513.75,958.38 5719.72,1233.09 5803.45,1344.75 " fill="none" id="NumericalFlux&lt;-UpwindFlux" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="5409.77,831.38,5403.38,811.18,5420.97,822.98,5409.77,831.38" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[25793f6b6df20fd94b246185d4ef2c65]
reverse link OptimizerBase to NewtonOptimizer--><path d="M2973.81,1475.07 C3011.59,1542.77 3074.53,1637.72 3155,1694 C3192.92,1720.52 4399.08,2068.48 4957.42,2228.72 " fill="none" id="OptimizerBase&lt;-NewtonOptimizer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2967.48,1478.1,2964.05,1457.19,2979.77,1471.39,2967.48,1478.1" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[26f5b683aa171679e8b6fee44399f468]
reverse link OptionBase to OptionBool--><path d="M2220.26,3152.03 C1795.41,3182.73 1095.23,3250.92 507,3392 C478.41,3398.86 448.61,3407.82 419.83,3417.47 " fill="none" id="OptionBase&lt;-OptionBool" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2219.83,3145.04,2240.28,3150.6,2220.83,3159.01,2219.83,3145.04" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c38598f153a5ddcc699faf2b9a04cc16]
reverse link OptionBase to OptionDouble--><path d="M2220.33,3178.69 C1907.02,3222.55 1455.54,3294.86 1068,3392 C1038.92,3399.29 1008.51,3408.13 978.89,3417.43 " fill="none" id="OptionBase&lt;-OptionDouble" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2219.52,3171.74,2240.3,3175.91,2221.46,3185.6,2219.52,3171.74" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c130641e7aee8d75e85f6f46bf583c71]
reverse link OptionBase to OptionEnum--><path d="M2349.75,3209.55 C2155.44,3270.02 1890.77,3352.38 1701.27,3411.35 " fill="none" id="OptionBase&lt;-OptionEnum" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2347.74,3202.85,2368.92,3203.59,2351.9,3216.21,2347.74,3202.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5e35d27cc5d4afcebc1c0fea76403421]
reverse link OptionBase to OptionInt--><path d="M2485.4,3215.22 C2397.43,3277.24 2280.15,3359.91 2198.57,3417.42 " fill="none" id="OptionBase&lt;-OptionInt" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2481.37,3209.5,2501.75,3203.7,2489.44,3220.94,2481.37,3209.5" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4f5f1ba1b4e7189a5be2bc0c996c0772]
reverse link OptionBase to OptionLong--><path d="M2607,3224.05 C2607,3284.91 2607,3362.6 2607,3417.42 " fill="none" id="OptionBase&lt;-OptionLong" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2600,3223.7,2607,3203.7,2614,3223.7,2600,3223.7" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[19ddf22e3daa26dec94e61c0062eaab6]
reverse link OptionBase to OptionString--><path d="M2740.63,3214.45 C2838.31,3276.55 2969.07,3359.67 3059.92,3417.42 " fill="none" id="OptionBase&lt;-OptionString" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2736.84,3220.33,2723.71,3203.7,2744.35,3208.52,2736.84,3220.33" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[338b565911eb84685aef9ab67888724e]
reverse link OptionBase to OptionStringList--><path d="M2748.82,3213.43 C2826.18,3255.5 2925.09,3303.45 3019,3332 C3210.78,3390.3 3269.41,3352.86 3466,3392 C3502.43,3399.25 3540.68,3408.1 3578,3417.43 " fill="none" id="OptionBase&lt;-OptionStringList" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2745.3,3219.48,2731.15,3203.72,2752.05,3207.22,2745.3,3219.48" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e543dabbd1238d0ea510f148afd54dcb]
reverse link OptionBase to OptionULong--><path d="M2742.75,3213.63 C2820.58,3257.32 2921.86,3306.73 3019,3332 C3514.76,3460.94 3664.94,3306.47 4170,3392 C4207.06,3398.28 4245.9,3407.36 4283.26,3417.43 " fill="none" id="OptionBase&lt;-OptionULong" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2738.93,3219.51,2725,3203.54,2745.85,3207.34,2738.93,3219.51" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5349d1bdb58a79f66579e20df16b117e]
reverse link OptionBase to OptionUShort--><path d="M2741.71,3213.85 C2819.6,3257.87 2921.27,3307.55 3019,3332 C3405.53,3428.7 4417.34,3330.42 4811,3392 C4849.72,3398.06 4890.34,3407.21 4929.31,3417.45 " fill="none" id="OptionBase&lt;-OptionUShort" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2737.83,3219.69,2723.96,3203.67,2744.79,3207.54,2737.83,3219.69" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4ad7caf68528ed95174c5ed7c9497b48]
reverse link ProblemBase to Checkerboard--><path d="M7149.91,904.29 C7061.89,1023.92 6940.49,1188.94 6863.62,1293.43 " fill="none" id="ProblemBase&lt;-Checkerboard" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7144.33,900.05,7161.82,888.09,7155.61,908.35,7144.33,900.05" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9e04a2c05544cc22196b31db1f220344]
reverse link ProblemBase to ElectronRT--><path d="M7296.34,907.6 C7325.73,1026.95 7365.86,1189.9 7391.36,1293.43 " fill="none" id="ProblemBase&lt;-ElectronRT" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7289.52,909.18,7291.53,888.09,7303.11,905.84,7289.52,909.18" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a53eb093e4b8a8f125444e2df6542754]
reverse link ProblemBase to LineSource_PN--><path d="M7457.39,900.35 C7533.3,958.28 7619.29,1027.3 7693,1095 C7768.5,1164.34 7847.34,1250.9 7901.51,1312.92 " fill="none" id="ProblemBase&lt;-LineSource_PN" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7453.04,905.83,7441.35,888.16,7461.51,894.69,7453.04,905.83" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[fb3130a9bb4da766ad9f75b51b5d9cb5]
reverse link ProblemBase to LineSource_SN--><path d="M7537.55,812.72 C7745.03,863.85 8028.93,953.17 8247,1095 C8339.16,1154.94 8421.56,1252.2 8472.06,1319.32 " fill="none" id="ProblemBase&lt;-LineSource_SN" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7535.81,819.5,7518.03,807.97,7539.12,805.9,7535.81,819.5" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f29213e6409b0dbeddb5359456126346]
reverse link QLookupQuadrature to QLDFESA--><path d="M9163.49,3595.01 C9146.53,3610.8 9129.57,3626.58 9114.08,3641 " fill="none" id="QLookupQuadrature&lt;-QLDFESA" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9158.94,3589.68,9178.35,3581.18,9168.48,3599.93,9158.94,3589.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e6462bb42d962df88f12397729eebeae]
reverse link QLookupQuadrature to QLebedev--><path d="M9279,3601.23 C9279,3614.92 9279,3628.47 9279,3641 " fill="none" id="QLookupQuadrature&lt;-QLebedev" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9272,3601.18,9279,3581.18,9286,3601.18,9272,3601.18" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5c097905ed270dc8517366d8f0d54a26]
reverse link QLookupQuadrature to QLevelSymmetric--><path d="M9399.97,3594.53 C9417.99,3610.48 9436.03,3626.43 9452.49,3641 " fill="none" id="QLookupQuadrature&lt;-QLevelSymmetric" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9395.22,3599.67,9384.88,3581.18,9404.49,3589.19,9395.22,3599.67" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e1b6629996e78d6831d3c62b50670482]
reverse link QuadratureBase to QDummy--><path d="M8533.83,3211.18 C8393.33,3254.27 8229.27,3314.48 8092,3392 C8076.12,3400.97 8060.31,3412.29 8045.79,3423.93 " fill="none" id="QuadratureBase&lt;-QDummy" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8531.88,3204.46,8553.05,3205.35,8535.95,3217.86,8531.88,3204.46" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d78554115d81d3317d7b542e5a03e78e]
reverse link QuadratureBase to QGaussLegendre1D--><path d="M8546.72,3343.86 C8516.08,3365.37 8486.5,3386.14 8459.87,3404.84 " fill="none" id="QuadratureBase&lt;-QGaussLegendre1D" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8542.93,3337.96,8563.32,3332.2,8550.98,3349.42,8542.93,3337.96" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a98013c9e348f9d44b08ef11aadf8b85]
reverse link QuadratureBase to QGaussLegendreTensorized--><path d="M8852,3352.35 C8852,3368.38 8852,3383.89 8852,3398.31 " fill="none" id="QuadratureBase&lt;-QGaussLegendreTensorized" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8845,3352.2,8852,3332.2,8859,3352.2,8845,3352.2" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7f3b490deb3fa0388444aa1c9301dfa9]
reverse link QuadratureBase to QLookupQuadrature--><path d="M9110.76,3345.24 C9130.14,3361.39 9148.99,3377.11 9166.65,3391.83 " fill="none" id="QuadratureBase&lt;-QLookupQuadrature" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9106,3350.38,9095.13,3332.2,9114.97,3339.63,9106,3350.38" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[835644a82503d26b2c146b2473052e94]
reverse link QuadratureBase to QMonteCarlo--><path d="M9169.54,3331.59 C9292.34,3377.46 9338.34,3346.19 9452,3392 C9469.22,3398.94 9486.68,3407.82 9503.3,3417.34 " fill="none" id="QuadratureBase&lt;-QMonteCarlo" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9166.9,3338.07,9150.85,3324.24,9172.02,3325.04,9166.9,3338.07" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[20bceda4fd9f7d282a56c4fc76b2af8d]
reverse link SNSolver to CSDSNSolver--><path d="M9075,844.41 C9075,964.25 9075,1177.32 9075,1299.83 " fill="none" id="SNSolver&lt;-CSDSNSolver" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9068,844.22,9075,824.22,9082,844.22,9068,844.22" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2e06b8dedd2168b5103be088faff7764]
reverse link SNSolver to SNSolverMPI--><path d="M9108.68,842.92 C9162.43,981.65 9265.62,1247.99 9305.61,1351.19 " fill="none" id="SNSolver&lt;-SNSolverMPI" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9102.13,845.4,9101.43,824.22,9115.19,840.34,9102.13,845.4" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[0c6d7d9ad37f11c252a553ed6ad7cf18]
reverse link ScatteringKernel to Isotropic--><path d="M9283,2392.47 C9283,2561.39 9283,2943.75 9283,3078.99 " fill="none" id="ScatteringKernel&lt;-Isotropic" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9276,2392.24,9283,2372.24,9290,2392.24,9276,2392.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b02984eceb62e08a5144c7350df9ee2e]
reverse link ScatteringKernel to Isotropic1D--><path d="M9306.55,2391.7 C9355.44,2560.23 9466.64,2943.54 9505.93,3078.99 " fill="none" id="ScatteringKernel&lt;-Isotropic1D" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="9299.76,2393.4,9300.91,2372.24,9313.21,2389.5,9299.76,2393.4" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e73b5d06c478f29454c29f878c4bbdfb]
reverse link Solver to MNSolver--><path d="M5589.4,233.35 C5285.99,270.63 4649.28,356.08 4120,475 C3819.52,542.51 3474.35,651.15 3292.16,711 " fill="none" id="Solver&lt;-MNSolver" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="5588.64,226.39,5609.34,230.91,5590.34,240.29,5588.64,226.39" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[faae707549c5b849b462190841f2994c]
reverse link Solver to PNSolver--><path d="M5938.97,362.08 C5973.86,397.06 6008.53,435.67 6037,475 C6042.92,483.18 6048.71,491.67 6054.35,500.36 " fill="none" id="Solver&lt;-PNSolver" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="5933.86,366.87,5924.56,347.83,5943.7,356.91,5933.86,366.87" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2865e895988d2514b2f754bd9f7b9c94]
reverse link Solver to SNSolver--><path d="M5944.69,217.19 C6575.85,235.2 8685.35,307.51 8934,475 C9005.91,523.44 9042.98,620.07 9060.69,685.88 " fill="none" id="Solver&lt;-SNSolver" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="5944.45,224.18,5924.66,216.62,5944.85,210.19,5944.45,224.18" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6f3e8055153de70049284169234b6312]
reverse link CSDSNSolver to Physics--><path d="M9014.89,1500.64 C8914.62,1676.02 8714.31,2026.36 8613.67,2202.39 " fill="none" id="CSDSNSolver&lt;-Physics" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="9021.35,1489.34,9014.8984,1492.5614,9015.3907,1499.7557,9021.8422,1496.5343,9021.35,1489.34" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[efa8e6fe7dfd8fd64f02aecfb3519694]
reverse link Config to OptionBase--><path d="M2607,2878.42 C2607,2947.06 2607,3008.58 2607,3053.31 " fill="none" id="Config&lt;-OptionBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2607,2865.06,2603,2871.06,2607,2877.06,2611,2871.06,2607,2865.06" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e25c6fc22ec9b6b4a4e7a248f8c9170f]
reverse link MNSolver to EntropyBase--><path d="M3024.09,817.58 C2917.15,873.08 2777.48,965.87 2713,1095 C2653.53,1214.09 2627.74,1591.78 2713,1694 C2808.21,1808.14 2933.01,1652.93 3042,1754 C3174.97,1877.31 3192.1,2106.08 3190.94,2227.66 " fill="none" id="MNSolver&lt;-EntropyBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3035.97,811.49,3028.8061,810.6659,3025.2901,816.9618,3032.454,817.7858,3035.97,811.49" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[566912fc28779e4f18da123165c903db]
reverse link MNSolver to OptimizerBase--><path d="M3105,919.54 C3056.45,1054.11 2990.27,1237.53 2956.24,1331.87 " fill="none" id="MNSolver&lt;-OptimizerBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3109.49,907.08,3103.6904,911.3654,3105.4156,918.3671,3111.2152,914.0817,3109.49,907.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e0412eb96ee83df559286f8b93fba368]
reverse link MNSolver to SphericalHarmonics--><path d="M3222.92,919.32 C3263.8,1032.62 3317.19,1180.61 3353.38,1280.91 " fill="none" id="MNSolver&lt;-SphericalHarmonics" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="3218.51,907.08,3216.7848,914.0817,3222.5844,918.3671,3224.3096,911.3654,3218.51,907.08" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6f945cf53f8e7cc6ebb4977224b3e8b4]
reverse link NewtonOptimizer to QuadratureBase--><path d="M5527.25,2408.36 C5897.98,2529.91 6559.9,2736.84 7139,2865 C7629.95,2973.65 8209.94,3052.31 8553.49,3093.84 " fill="none" id="NewtonOptimizer&lt;-QuadratureBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5514.73,2404.25,5519.1888,2409.9174,5526.1351,2407.9814,5521.6764,2402.314,5514.73,2404.25" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[78be9fb5a55eb8eed897f2f3eb36bb8e]
reverse link OptimizerBase to Config--><path d="M2907.47,1469.58 C2883.6,1536.22 2846.15,1640.77 2805.69,1753.76 " fill="none" id="OptimizerBase&lt;-Config" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2911.91,1457.18,2906.1209,1461.4795,2907.8631,1468.477,2913.6522,1464.1775,2911.91,1457.18" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[dd1e9a28a1d3bc25edd085798b943026]
reverse link OptimizerBase to EntropyBase--><path d="M2957.23,1469.73 C2979.67,1542.06 3014.23,1655.27 3042,1754 C3089.22,1921.87 3139.74,2119.76 3166.91,2227.9 " fill="none" id="OptimizerBase&lt;-EntropyBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2953.33,1457.15,2951.2904,1464.0666,2956.8905,1468.6096,2958.9301,1461.693,2953.33,1457.15" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2db0e6a27ad7c543f0bdce8067e321b2]
reverse link ProblemBase to Config--><path d="M7199.92,900.52 C7177.74,959.89 7154.24,1029.88 7139,1095 C7108.45,1225.54 7166.63,1604.29 7067,1694 C6983.9,1768.82 3142.18,1704.33 3042,1754 C3036.38,1756.79 3030.81,1759.68 3025.3,1762.68 " fill="none" id="ProblemBase&lt;-Config" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="7204.63,888.02,7198.7698,892.2222,7200.3948,899.2478,7206.255,895.0456,7204.63,888.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3fa3d6f3939238218e3ee9bd7eff69f6]
reverse link ProblemBase to Mesh--><path d="M6987.41,855.51 C6799.66,919.39 6542.59,997.21 6309,1035 C5934.52,1095.59 4966.13,985.28 4603,1095 C4597.08,1096.79 4591.17,1098.67 4585.26,1100.63 " fill="none" id="ProblemBase&lt;-Mesh" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="6999.96,851.23,6992.99,849.381,6988.6024,855.1037,6995.5724,856.9527,6999.96,851.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a9f16d3977b996ccf6a0381ea5be28ca]
reverse link ProblemBase to Physics--><path d="M7531.2,775.81 C7930.46,811.18 8644.62,900.5 8801,1095 C8884.41,1198.74 8826.37,1563.33 8801,1694 C8764.71,1880.91 8671.69,2082.97 8610.46,2202.48 " fill="none" id="ProblemBase&lt;-Physics" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="7518.01,774.66,7523.6353,779.1717,7529.9636,775.7143,7524.3382,771.2026,7518.01,774.66" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a8fcaaca6c951ff4f3654d94ed994252]
reverse link ScatteringKernel to QuadratureBase--><path d="M9244.29,2383.88 C9180.61,2504.59 9051.59,2749.16 8958.88,2924.9 " fill="none" id="ScatteringKernel&lt;-QuadratureBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="9250.43,2372.24,9244.0948,2375.6846,9244.8378,2382.8573,9251.173,2379.4127,9250.43,2372.24" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8718454a90ca902832a0d12e61307c14]
reverse link Solver to Config--><path d="M5596.24,238.3 C5304,281.5 4688.87,368.33 4166,415 C4038.78,426.36 3127.27,408.86 3018,475 C2600.08,727.95 2530.46,1312.35 2544.66,1753.88 " fill="none" id="Solver&lt;-Config" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5609.48,236.33,5602.9597,233.2501,5597.6089,238.0843,5604.1292,241.1642,5609.48,236.33" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[1ddc86840206f8769827b49fc9d67fda]
reverse link Solver to Mesh--><path d="M5596.25,214.94 C5368.14,226.28 4960.88,275.6 4686,475 C4473.06,629.47 4322.91,890.54 4230.69,1094.95 " fill="none" id="Solver&lt;-Mesh" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5609.33,214.32,5603.1477,210.608,5597.3434,214.887,5603.5257,218.599,5609.33,214.32" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[141236dffacf4bdc2074205320151f00]
reverse link Solver to NumericalFlux--><path d="M5607.49,425.77 C5533.34,524.91 5451.13,634.83 5403.15,698.98 " fill="none" id="Solver&lt;-NumericalFlux" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5615.33,415.29,5608.5337,417.7005,5608.1448,424.9011,5614.9411,422.4906,5615.33,415.29" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[432d473e5485753f91a485dfddb206c5]
reverse link Solver to ProblemBase--><path d="M5937.13,274.25 C6197,368.56 6694.7,549.2 6999.74,659.9 " fill="none" id="Solver&lt;-ProblemBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5924.55,269.68,5928.8212,275.49,5935.8271,273.782,5931.5559,267.9719,5924.55,269.68" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[bb9a4cdc6a2951ea9e1a97057fffbacb]
reverse link Solver to QuadratureBase--><path d="M5937.75,221.2 C6257.5,241.12 6965.66,302.44 7535,475 C8152.6,662.18 8492.3,556.53 8848,1095 C8909.09,1187.48 8888.23,2483.71 8873,2865 C8872.22,2884.41 8871.13,2904.62 8869.84,2924.81 " fill="none" id="Solver&lt;-QuadratureBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="5924.68,220.4,5930.4227,224.7614,5936.6573,221.1379,5930.9146,216.7765,5924.68,220.4" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[afaa5d468eee2294a302c50898e1d153]
link Cubic2DSpline to ErrorMessages--><!--MD5=[31de88253031076c59e403dc6909dd47]
link ErrorMessages to Reconstructor--><!--MD5=[47f65b3cb61ec5cb068038f975a898d3]
link Reconstructor to Spline--><!--MD5=[d87b7e544a4995120f710732591c46e0]
link Cubic2DSpline to BOUNDARY_TYPE--><!--MD5=[5068b7fe7e53115ae5a6ccf5de881bbf]
link BOUNDARY_TYPE to ENTROPY_NAME--><!--MD5=[a9637ce4857e88bf7e4e6e67a2c9efb0]
link ENTROPY_NAME to KERNEL_NAME--><!--MD5=[eebee6147c861975cf9ef000dfd6447a]
link KERNEL_NAME to OPTIMIZER_NAME--><!--MD5=[f3e965e2c84be31358081085cd2f8922]
link BOUNDARY_TYPE to PROBLEM_NAME--><!--MD5=[473e70d7e9c3537554dc719ca99463dc]
link PROBLEM_NAME to QUAD_NAME--><!--MD5=[3d5edcd17373635ebdd0144e59664bec]
link QUAD_NAME to SOLVER_NAME--><!--MD5=[229b3104e47a8c8dc1ee40ab5fa6c5f6]
@startuml






class CSDSNSolver {
	+CSDSNSolver(Config* settings)
	-_physics : Physics*
	-_angle : Vector
	-_density : Vector
	-_energies : Vector
	-_sigmaTE : Vector
	-_sigmaSE : VectorVector
	-_dose : std::vector<double>
	+Save() : void {query}
	+Save(int currEnergy) : void {query}
	+Solve() : void
}


class Checkerboard {
	-Checkerboard()
	+Checkerboard(Config* settings, Mesh* mesh)
	+~Checkerboard()
	-_scatteringXS : Vector
	-_totalXS : Vector
	+GetScatteringXS(const std::vector<double>& energies) : VectorVector
	+GetTotalXS(const std::vector<double>& energies) : VectorVector
	+SetupIC() : VectorVector
	-isAbsorption(const Vector& pos) : bool {query}
	-isSource(const Vector& pos) : bool {query}
	+GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
}


class Config {
	+Config(std::string case_filename)
	+~Config(void)
	+GetBoundaryType(std::string nameMarker) : BOUNDARY_TYPE {query}
	+GetEntropyName() : ENTROPY_NAME {query}
	-_entropyName : ENTROPY_NAME
	+GetKernelName() : KERNEL_NAME {query}
	-_kernelName : KERNEL_NAME
	+GetOptimizerName() : OPTIMIZER_NAME {query}
	-_entropyOptimizerName : OPTIMIZER_NAME
	+GetProblemName() : PROBLEM_NAME {query}
	-_problemName : PROBLEM_NAME
	+GetQuadName() : QUAD_NAME {query}
	-_quadName : QUAD_NAME
	+GetSolverName() : SOLVER_NAME {query}
	-_solverName : SOLVER_NAME
	+GetCleanFluxMat() : bool {query}
	+GetNewtonFastMode() : bool {query}
	+IsCSD() : bool {query}
	-TokenizeString(std::string& str, std::string& option_name, std::vector<std::string>& option_value) : bool
	-_baseConfig : bool
	-_cleanFluxMat : bool
	-_csd : bool
	-_newtonFastMode : bool
	+GetCFL() : double {query}
	+GetNewtonOptimizerEpsilon() : double {query}
	+GetNewtonStepSize() : double {query}
	+GetTEnd() : double {query}
	-_CFL : double
	-_newtonStepSize : double
	-_optimizerEpsilon : double
	-_tEnd : double
	-_optionMap : std::map<std::string, OptionBase*>
	-_allOptions : std::map<std::string, bool>
	+GetCTFile() : std::string {query}
	+GetLogDir() : std::string {query}
	+GetMeshFile() : std::string {query}
	+GetOutputDir() : std::string {query}
	+GetOutputFile() : std::string {query}
	-_ctFile : std::string
	-_fileName : std::string
	-_inputDir : std::string
	-_logDir : std::string
	-_meshFile : std::string
	-_outputDir : std::string
	-_outputFile : std::string
	-_boundaries : std::vector<std::pair<std::string, BOUNDARY_TYPE> >
	-_MarkerDirichlet : std::vector<std::string>
	-_MarkerNeumann : std::vector<std::string>
	+GetMaxLineSearches() : unsigned {query}
	+GetMaxMomentDegree() : unsigned
	+GetNCells() : unsigned
	+GetNQuadPoints() : unsigned
	+GetNewtonIter() : unsigned {query}
	+GetReconsOrder() : unsigned
	-_nCells : unsigned
	-_nQuadPoints : unsigned
	+GetMaxMomentDegree() : unsigned short {query}
	+GetQuadOrder() : unsigned short {query}
	-_maxMomentDegree : unsigned short
	-_nMarkerDirichlet : unsigned short
	-_nMarkerNeumann : unsigned short
	-_newtonIter : unsigned short
	-_newtonLineSearchIter : unsigned short
	-_quadOrder : unsigned short
	-_reconsOrder : unsigned short
	-AddBoolOption(const std::string name, bool& option_field, bool default_value) : void
	-AddDoubleOption(const std::string name, double& option_field, double default_value) : void
	-AddEnumOption(const std::string name, Tenum& option_field, const std::map<std::string, Tenum>& enum_map, Tenum default_value) : void
	-AddIntegerOption(const std::string name, int& option_field, int default_value) : void
	-AddLongOption(const std::string name, long& option_field, long default_value) : void
	-AddStringListOption(const std::string name, unsigned short& num_marker, std::vector<std::string>& option_field) : void
	-AddStringOption(const std::string name, std::string& option_field, std::string default_value) : void
	-AddUnsignedLongOption(const std::string name, unsigned long& option_field, unsigned long default_value) : void
	-AddUnsignedShortOption(const std::string name, unsigned short& option_field, unsigned short default_value) : void
	-InitLogger() : void
	-SetConfigOptions(void) : void
	-SetConfigParsing(std::string case_filename) : void
	-SetDefault(void) : void
	+SetNCells(unsigned nCells) : void
	+SetNQuadPoints(unsigned nq) : void
	-SetOutput(void) : void
	-SetPointersNull(void) : void
	-SetPostprocessing(void) : void
}


class Cubic2DSpline {
	-Cubic2DSpline()
	+Cubic2DSpline(const Vector& x, const Vector& y, const Matrix& data)
	+~Cubic2DSpline()
	-_data : Matrix
	-_x : Vector
	-_y : Vector
	-interpolate1D(double param, double x) : double
	+operator()(double x, double y) : double
	-indexOfClosestValue(double value, const Vector& v) : unsigned
}


class ElectronRT {
	-ElectronRT()
	+ElectronRT(Config* settings, Mesh* mesh)
	+~ElectronRT()
	+GetTotalXSE(const Vector& energies) : Vector
	+GetScatteringXS(const std::vector<double>& energies) : VectorVector
	+GetScatteringXSE(const Vector& energies, const Vector& angles) : VectorVector
	+GetTotalXS(const std::vector<double>& energies) : VectorVector
	+SetupIC() : VectorVector
	+GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+GetDensity(const VectorVector& cellMidPoints) : std::vector<double>
	+GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
	-LoadXSH20(std::string fileSigmaS, std::string fileSigmaT) : void
}


abstract class EntropyBase {
	+EntropyBase()
	+~EntropyBase()
	+{static} Create(Config* settings) : EntropyBase*
	+{abstract} CheckDomain(double z) : bool
	+{abstract} Entropy(double z) : double
	+{abstract} EntropyDual(double y) : double
	+{abstract} EntropyHessianDual(double y) : double
	+{abstract} EntropyPrime(double z) : double
	+{abstract} EntropyPrimeDual(double z) : double
}


class ErrorMessages {
	+ErrorMessages()
	+{static} Error(std::string ErrorMsg, std::string FunctionName) : void
	+{static} OptionNotSetError(std::string OptionName, std::string FunctionName) : void
}


class Isotropic {
	-Isotropic()
	+Isotropic(QuadratureBase* q)
	+~Isotropic()
	+GetScatteringKernel() : Matrix
}


class Isotropic1D {
	-Isotropic1D()
	+Isotropic1D(QuadratureBase* q)
	+~Isotropic1D()
	+GetScatteringKernel() : Matrix
}


class LaxFriedrichsFlux {
	+LaxFriedrichsFlux()
	+Flux(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
	-_dt : double
}


class LineSource_PN {
	-LineSource_PN()
	+LineSource_PN(Config* settings, Mesh* mesh)
	+~LineSource_PN()
	+GetScatteringXS(const std::vector<double>& energies) : VectorVector
	+GetTotalXS(const std::vector<double>& energies) : VectorVector
	+SetupIC() : VectorVector
	-GlobalIndex(int l, int k) : int {query}
	+GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
}


class LineSource_SN {
	-LineSource_SN()
	+LineSource_SN(Config* settings, Mesh* mesh)
	+~LineSource_SN()
	+GetScatteringXS(const std::vector<double>& energies) : VectorVector
	+GetTotalXS(const std::vector<double>& energies) : VectorVector
	+SetupIC() : VectorVector
	+GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
}


class LineSource_SN_Pseudo1D {
	-LineSource_SN_Pseudo1D()
	+LineSource_SN_Pseudo1D(Config* settings, Mesh* mesh)
	+SetupIC() : VectorVector
}


class MNSolver {
	+MNSolver(Config* settings)
	+~MNSolver()
	-_entropy : EntropyBase*
	-_optimizer : OptimizerBase*
	-_basis : SphericalHarmonics*
	-ConstructFlux(unsigned idx_cell) : Vector
	-_scatterMatDiag : Vector
	-_weights : Vector
	-_alpha : VectorVector
	-_moments : VectorVector
	-_quadPoints : VectorVector
	-_quadPointsSphere : VectorVector
	-_sigmaA : VectorVector
	-GlobalIndex(int l, int k) : int {query}
	-_nTotalEntries : unsigned
	-_nMaxMomentsOrder : unsigned short
	-ComputeMoments() : void
	+Save() : void {query}
	+Save(int currEnergy) : void {query}
	+Solve() : void
}


class MaxwellBoltzmannEntropy {
	+MaxwellBoltzmannEntropy()
	+~MaxwellBoltzmannEntropy()
	+CheckDomain(double z) : bool
	+Entropy(double z) : double
	+EntropyDual(double y) : double
	+EntropyHessianDual(double y) : double
	+EntropyPrime(double z) : double
	+EntropyPrimeDual(double y) : double
}


class Mesh {
	+Mesh()
	+Mesh(std::vector<Vector> nodes, std::vector<std::vector<unsigned> > cells, std::vector<std::pair<BOUNDARY_TYPE, std::vector<unsigned> > > boundaries)
	+~Mesh()
	#ComputeOutwardFacingNormal(const Vector& nodeA, const Vector& nodeB, const Vector& cellCenter) : Vector
	#_nodeNeighbors : blaze::CompressedMatrix<bool>
	#_dim : const unsigned
	#_ghostCellID : const unsigned
	#_numBoundaries : const unsigned
	#_numCells : const unsigned
	#_numNodes : const unsigned
	#_numNodesPerCell : const unsigned
	+GetDistanceToOrigin(unsigned idx_cell) : double {query}
	#_cellBoundaryTypes : std::vector<BOUNDARY_TYPE>
	+GetBoundaryTypes() : std::vector<BOUNDARY_TYPE>& {query}
	#_cellMidPoints : std::vector<Vector>
	#_nodes : std::vector<Vector>
	+GetCellMidPoints() : std::vector<Vector>& {query}
	+GetNodes() : std::vector<Vector>& {query}
	#_cellAreas : std::vector<double>
	+GetCellAreas() : std::vector<double>& {query}
	#_boundaries : std::vector<std::pair<BOUNDARY_TYPE, std::vector<unsigned> > >
	+GetBounds() : std::vector<std::pair<double , double> > {query}
	#_bounds : std::vector<std::pair<double, double> >
	#_cellNormals : std::vector<std::vector<Vector> >
	+GetNormals() : std::vector<std::vector<Vector> >& {query}
	#_cellNeighbors : std::vector<std::vector<unsigned> >
	#_cells : std::vector<std::vector<unsigned> >
	+GetCells() : std::vector<std::vector<unsigned> >& {query}
	+GetNeighbours() : std::vector<std::vector<unsigned> >& {query}
	#_colors : std::vector<unsigned>
	+GetPartitionIDs() : std::vector<unsigned>& {query}
	+GetDim() : unsigned {query}
	+GetNumCells() : unsigned {query}
	+GetNumNodes() : unsigned {query}
	+GetNumNodesPerCell() : unsigned {query}
	#ComputeBounds() : void
	#ComputeCellAreas() : void
	#ComputeCellMidpoints() : void
	#ComputeConnectivity() : void
	#ComputePartitioning() : void
	+ComputeSlopes(unsigned nq, VectorVector& psiDerX, VectorVector& psiDerY, const VectorVector& psi) : void {query}
	+ReconstructSlopesS(unsigned nq, VectorVector& psiDerX, VectorVector& psiDerY, const VectorVector& psi) : void {query}
	+ReconstructSlopesU(unsigned nq, VectorVector& psiDerX, VectorVector& psiDerY, const VectorVector& psi) : void {query}
}


class NewtonOptimizer {
	+NewtonOptimizer(Config* settings)
	+~NewtonOptimizer()
	-_quadrature : QuadratureBase*
	-_weights : Vector
	-_quadPointsSphere : VectorVector
	-ComputeObjFunc(Vector& alpha, Vector& sol, VectorVector& moments) : double
	-_alpha : double
	-_epsilon : double
	-_nq : unsigned
	-_maxIterations : unsigned short
	-_maxLineSearches : unsigned short
	-ComputeGradient(Vector& alpha, Vector& sol, VectorVector& moments, Vector& grad) : void
	-ComputeHessian(Vector& alpha, VectorVector& moments, Matrix& hessian) : void
	+Solve(Vector& lambda, Vector& u, VectorVector& moments) : void
}


abstract class NumericalFlux {
	+NumericalFlux()
	+{static} Create() : NumericalFlux*
	+{abstract} Flux(const Matrix AxPlus, const Matrix AxMinus, const Matrix AyPlus, const Matrix AyMinus, const Matrix AzPlus, const Matrix AzMinus, const Vector, const Vector, const Vector n) : Vector {query}
	+{abstract} Flux(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
	+{abstract} FluxVanLeer(const Matrix& Ax, const Matrix& AxAbs, const Matrix& Ay, const Matrix& AyAbs, const Matrix& Az, const Matrix& AzAbs, const Vector& psiL, const Vector& psiR, const Vector& n, Vector& resultFlux) : void {query}
}


abstract class OptimizerBase {
	+OptimizerBase(Config* settings)
	+~OptimizerBase()
	#_settings : Config*
	#_entropy : EntropyBase*
	+{static} Create(Config* settings) : OptimizerBase*
	+{abstract} Solve(Vector& lambda, Vector& u, VectorVector& moments) : void
}


abstract class OptionBase {
	+OptionBase()
	+{abstract} ~OptionBase()
	+SetValue(std::vector<std::string> value) : std::string
	+badValue(std::vector<std::string>& option_value, std::string type_id, std::string option_name) : std::string
	+optionCheckMultipleValues(std::vector<std::string>& option_value, std::string type_id, std::string option_name) : std::string
	+GetValue() : std::vector<std::string>
	-_value : std::vector<std::string>
	+{abstract} SetDefault() : void
}


abstract class OptionBool {
	+OptionBool(std::string option_field_name, bool& option_field, bool default_value)
	+~OptionBool()
	-_def : bool
	-_field : bool&
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionDouble {
	+OptionDouble(std::string option_field_name, double& option_field, double default_value)
	+~OptionDouble()
	-_def : double
	-_field : double&
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionEnum <template <class Tenum>> {
	+OptionEnum(std::string option_field_name, const std::map<std::string, Tenum> m, Tenum& option_field, Tenum default_value)
	+~OptionEnum()
	-_def : Tenum
	-_field : Tenum&
	-_map : std::map<std::string, Tenum>
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionInt {
	+OptionInt(std::string option_field_name, int& option_field, int default_value)
	+~OptionInt()
	-_def : int
	-_field : int&
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionLong {
	+OptionLong(std::string option_field_name, long& option_field, long default_value)
	+~OptionLong()
	-_def : long
	-_field : long&
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionString {
	+OptionString(std::string option_field_name, std::string& option_field, std::string default_value)
	+~OptionString()
	+SetValue(std::vector<std::string> option_value) : std::string
	-_def : std::string
	-_name : std::string
	-_field : std::string&
	+SetDefault() : void
}


abstract class OptionStringList {
	+OptionStringList(std::string option_field_name, unsigned short& list_size, std::vector<std::string>& option_field)
	+~OptionStringList()
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	-_field : std::vector<std::string>&
	-_size : unsigned short&
	+SetDefault() : void
}


abstract class OptionULong {
	+OptionULong(std::string option_field_name, unsigned long& option_field, unsigned long default_value)
	+~OptionULong()
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	-_def : unsigned long
	-_field : unsigned long&
	+SetDefault() : void
}


abstract class OptionUShort {
	+OptionUShort(std::string option_field_name, unsigned short& option_field, unsigned short default_value)
	+~OptionUShort()
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	-_def : unsigned short
	-_field : unsigned short&
	+SetDefault() : void
}


class PNSolver {
	+PNSolver(Config* settings)
	#_AxAbs : Matrix
	#_AxMinus : Matrix
	#_AxPlus : Matrix
	#_AyAbs : Matrix
	#_AyMinus : Matrix
	#_AyPlus : Matrix
	#_AzAbs : Matrix
	#_AzMinus : Matrix
	#_AzPlus : Matrix
	#_Ax : SymMatrix
	#_Ay : SymMatrix
	#_Az : SymMatrix
	#_scatterMatDiag : Vector
	#_sigmaA : VectorVector
	#CheckIndex(int l, int k) : bool {query}
	#AParam(int l, int k) : double {query}
	#BParam(int l, int k) : double {query}
	#CParam(int l, int k) : double {query}
	#CTilde(int l, int k) : double {query}
	#DParam(int l, int k) : double {query}
	#DTilde(int l, int k) : double {query}
	#EParam(int l, int k) : double {query}
	#ETilde(int l, int k) : double {query}
	#FParam(int l, int k) : double {query}
	#FTilde(int l, int k) : double {query}
	#LegendrePoly(double x, int l) : double
	#GlobalIndex(int l, int k) : int {query}
	#Sgn(int k) : int {query}
	#kMinus(int k) : int {query}
	#kPlus(int k) : int {query}
	#_LMaxDegree : unsigned
	#_nTotalEntries : unsigned
	#CleanFluxMatrices() : void
	#ComputeFluxComponents() : void
	#ComputeScatterMatrix() : void
	#ComputeSystemMatrices() : void
	+Save() : void {query}
	+Save(int currEnergy) : void {query}
	+Solve() : void
}


class Physics {
	+Physics()
	+{static} Create() : Physics*
	+GetScatteringXS(Vector energies, Vector angle) : VectorVector
	+GetStoppingPower(Vector energies, Vector density) : VectorVector
	+GetTotalXS(Vector energies, Vector density) : VectorVector
	+GetTransportXS(Vector energies, Vector density) : VectorVector
	+ReadStoppingPowers(std::string fileName) : VectorVector
	-_stpowH2O : VectorVector
	-_xsH2O : VectorVector
	-_xsTotalH2O : VectorVector
	-_xsTransportH2O : VectorVector
	+ReadENDL(std::string filename) : std::tuple<std::vector<VectorVector> , std::vector<VectorVector> >
	+LoadDatabase(std::string fileName_H, std::string fileName_O, std::string fileName_stppower) : void
}


abstract class ProblemBase {
	+ProblemBase(Config* settings, Mesh* mesh)
	#ProblemBase()
	+~ProblemBase()
	#_settings : Config*
	#_mesh : Mesh*
	#_physics : Physics*
	+{static} Create(Config* settings, Mesh* mesh) : ProblemBase*
	+GetTotalXSE(const Vector& energies) : Vector
	+{abstract} GetScatteringXS(const std::vector<double>& energies) : VectorVector
	+GetScatteringXSE(const Vector& energies, const Vector& angles) : VectorVector
	+{abstract} GetTotalXS(const std::vector<double>& energies) : VectorVector
	+{abstract} SetupIC() : VectorVector
	+{abstract} GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+GetDensity(const VectorVector& cellMidPoints) : std::vector<double>
	+{abstract} GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
	#_density : std::vector<double>
	#_stoppingPower : std::vector<double>
}


class QDummy {
	+QDummy(unsigned order)
	+~QDummy()
	+SetConnectivity() : void
	+SetName() : void
	+SetNq() : void
	+SetPointsAndWeights() : void
}


class QGaussLegendre1D {
	+QGaussLegendre1D(unsigned order)
	+~QGaussLegendre1D()
	-CheckOrder() : bool
	-Pythag(const double a, const double b) : double
	-ComputeEigenValTriDiagMatrix(const Matrix& mat) : std::pair<Vector , Matrix>
	+SetConnectivity() : void
	+SetName() : void
	+SetNq() : void
	+SetPointsAndWeights() : void
}


class QGaussLegendreTensorized {
	+QGaussLegendreTensorized(unsigned order)
	+~QGaussLegendreTensorized()
	+GetPointsSphere() : VectorVector {query}
	-CheckOrder() : bool
	-Pythag(const double a, const double b) : double
	-ComputeEigenValTriDiagMatrix(const Matrix& mat) : std::pair<Vector , Matrix>
	+SetConnectivity() : void
	+SetName() : void
	+SetNq() : void
	+SetPointsAndWeights() : void
}


class QLDFESA {
	+QLDFESA(unsigned order)
	+~QLDFESA()
	+GetLookupTable() : std::string
	+SetAvailOrders() : void
	+SetConnectivity() : void
	+SetName() : void
}


class QLebedev {
	+QLebedev(unsigned order)
	+~QLebedev()
	+GetLookupTable() : std::string
	+SetAvailOrders() : void
	+SetConnectivity() : void
	+SetName() : void
}


class QLevelSymmetric {
	+QLevelSymmetric(unsigned order)
	+~QLevelSymmetric()
	+GetLookupTable() : std::string
	+SetAvailOrders() : void
	+SetConnectivity() : void
	+SetName() : void
}


abstract class QLookupQuadrature {
	+QLookupQuadrature(unsigned order)
	+~QLookupQuadrature()
	#CheckOrder() : bool
	#{abstract} GetLookupTable() : std::string
	#_availableOrders : std::vector<unsigned>
	#_nqByOrder : std::vector<unsigned>
	+getAvailOrders() : std::vector<unsigned> {query}
	#{abstract} SetAvailOrders() : void
	#SetNq() : void
	#SetPointsAndWeights() : void
	+printAvailOrders() : void {query}
}


class QMonteCarlo {
	+QMonteCarlo(unsigned order)
	+~QMonteCarlo()
	+GetPointsSphere() : VectorVector {query}
	+SetConnectivity() : void
	+SetName() : void
	+SetNq() : void
	+SetPointsAndWeights() : void
}


class QuadraticEntropy {
	+QuadraticEntropy()
	+~QuadraticEntropy()
	+CheckDomain(double z) : bool
	+Entropy(double z) : double
	+EntropyDual(double y) : double
	+EntropyHessianDual(double y) : double
	+EntropyPrime(double z) : double
	+EntropyPrimeDual(double y) : double
}


abstract class QuadratureBase {
	+QuadratureBase(unsigned order)
	+~QuadratureBase()
	+{static} CreateQuadrature(QUAD_NAME name, unsigned order) : QuadratureBase*
	+GetWeights() : Vector {query}
	#_weights : Vector
	+GetPoints() : VectorVector {query}
	+GetPointsSphere() : VectorVector {query}
	#_points : VectorVector
	#_pointsSphere : VectorVector
	+GetConnectivity() : VectorVectorU {query}
	#_connectivity : VectorVectorU
	+Integrate(double(f)(doublex0,doublex1,doublex2)) : double
	+SumUpWeights() : double
	+GetName() : std::string {query}
	#_name : std::string
	+Integrate(std::vector<double >(f)(doublex0,doublex1,doublex2), unsigned len) : std::vector<double>
	+GetNq() : unsigned {query}
	+GetOrder() : unsigned {query}
	#_nq : unsigned
	#_order : unsigned
	+PrintPoints() : void
	+PrintPointsAndWeights() : void
	+PrintWeights() : void
	#{abstract} SetConnectivity() : void
	#{abstract} SetName() : void
	#{abstract} SetNq() : void
	#SetOrder(unsigned order) : void
	#{abstract} SetPointsAndWeights() : void
}


class Reconstructor {
	+Reconstructor(Config* settings)
	+ReconstructSlopeStruct(double uL, double uC, double uR, double dxL, double dxR, std::string limiter) : double {query}
}


class SNSolver {
	+SNSolver(Config* settings)
	#_scatteringKernel : Matrix
	#_weights : Vector
	#_quadPoints : VectorVector
	+Save() : void {query}
	+Save(int currEnergy) : void {query}
	+Solve() : void
}


class SNSolverMPI {
	+SNSolverMPI(Config* settings)
	+Save() : void {query}
	+Solve() : void
}


abstract class ScatteringKernel {
	-ScatteringKernel()
	+ScatteringKernel(QuadratureBase* quad)
	+~ScatteringKernel()
	+{abstract} GetScatteringKernel() : Matrix
	#_quad : QuadratureBase*
	+{static} CreateScatteringKernel(KERNEL_NAME name, QuadratureBase* quad) : ScatteringKernel*
}


abstract class Solver {
	+Solver(Config* settings)
	+~Solver()
	#_settings : Config*
	#_mesh : Mesh*
	#_g : NumericalFlux*
	#_problem : ProblemBase*
	#_quadrature : QuadratureBase*
	+{static} Create(Config* settings) : Solver*
	#_sigmaS : VectorVector
	#_sigmaT : VectorVector
	#_sol : VectorVector
	#ComputeTimeStep(double cfl) : double {query}
	#_dE : double
	#_boundaryCells : std::vector<BOUNDARY_TYPE>
	#_Q : std::vector<VectorVector>
	#_areas : std::vector<double>
	#_density : std::vector<double>
	#_energies : std::vector<double>
	#_s : std::vector<double>
	#_solverOutput : std::vector<double>
	#_normals : std::vector<std::vector<Vector> >
	#_neighbors : std::vector<std::vector<unsigned> >
	#_nCells : unsigned
	#_nEnergies : unsigned
	#_nq : unsigned
	+{abstract} Save() : void {query}
	+{abstract} Save(int currEnergy) : void {query}
	+{abstract} Solve() : void
}


class SphericalHarmonics {
	+SphericalHarmonics(unsigned L_degree)
	+ComputeSphericalBasis(double my, double phi) : Vector
	+ComputeSphericalBasis(double x, double y, double z) : Vector
	-_YBasis : Vector
	+GetAssLegendrePoly(const double my) : std::vector<double>
	-_aParam : std::vector<double>
	-_assLegendreP : std::vector<double>
	-_bParam : std::vector<double>
	-GlobalIdxAssLegendreP(unsigned l_degree, unsigned k_order) : unsigned
	+GlobalIdxBasis(unsigned l_degree, unsigned k_order) : unsigned
	-_LMaxDegree : unsigned
	-ComputeAssLegendrePoly(const double my) : void
	-ComputeCoefficients() : void
	-ComputeYBasis(const double phi) : void
}


class Spline {
	+Spline()
	-m_a : Vector
	-m_b : Vector
	-m_c : Vector
	-m_x : Vector
	-m_y : Vector
	-m_left : bd_type
	-m_right : bd_type
	-m_force_linear_extrapolation : bool
	-m_b0 : double
	-m_c0 : double
	-m_left_value : double
	-m_right_value : double
	+operator()(double x) : double {query}
	+set_boundary(bd_type left, double left_value, bd_type right, double right_value, bool force_linear_extrapolation) : void
	+set_points(const std::vector<double>& x, const std::vector<double>& y, bool cubic_Spline) : void
	+set_points(const Vector& x, const Vector& y, bool cubic_Spline) : void
}


class UpwindFlux {
	+UpwindFlux()
	+Flux(const Matrix AxPlus, const Matrix AxMinus, const Matrix AyPlus, const Matrix AyMinus, const Matrix AzPlus, const Matrix AzMinus, const Vector psiL, const Vector psiR, const Vector n) : Vector {query}
	+Flux(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
	+FluxVanLeer(const Matrix& Ax, const Matrix& AxAbs, const Matrix& Ay, const Matrix& AyAbs, const Matrix& Az, const Matrix& AzAbs, const Vector& psiL, const Vector& psiR, const Vector& n, Vector& resultFlux) : void {query}
}


class WaterPhantom {
	-WaterPhantom()
	+WaterPhantom(Config* settings, Mesh* mesh)
	+~WaterPhantom()
	+SetupIC() : VectorVector
	+GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+GetDensity(const VectorVector& cellMidPoints) : std::vector<double>
	+GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
}


enum BOUNDARY_TYPE {
	DIRICHLET
	INVALID
	NEUMANN
	NONE
}


enum ENTROPY_NAME {
	BOSE_EINSTEIN
	FERMI_DIRAC
	MAXWELL_BOLZMANN
	QUADRATIC
}


enum KERNEL_NAME {
	KERNEL_Isotropic
	KERNEL_Isotropic1D
}


enum OPTIMIZER_NAME {
	ML
	NEWTON
}


enum PROBLEM_NAME {
	PROBLEM_Checkerboard
	PROBLEM_ElectronRT
	PROBLEM_LineSource
	PROBLEM_LineSource_Pseudo_1D
	PROBLEM_WaterPhantom
}


enum QUAD_NAME {
	QUAD_GaussLegendre1D
	QUAD_GaussLegendreTensorized
	QUAD_LDFESA
	QUAD_Lebedev
	QUAD_LevelSymmetric
	QUAD_MonteCarlo
}


enum SOLVER_NAME {
	MN_SOLVER
	PN_SOLVER
	SN_SOLVER
}






ElectronRT <|- - WaterPhantom


EntropyBase <|- - MaxwellBoltzmannEntropy


EntropyBase <|- - QuadraticEntropy


LineSource_SN <|- - LineSource_SN_Pseudo1D


NumericalFlux <|- - LaxFriedrichsFlux


NumericalFlux <|- - UpwindFlux


OptimizerBase <|- - NewtonOptimizer


OptionBase <|- - OptionBool


OptionBase <|- - OptionDouble


OptionBase <|- - OptionEnum


OptionBase <|- - OptionInt


OptionBase <|- - OptionLong


OptionBase <|- - OptionString


OptionBase <|- - OptionStringList


OptionBase <|- - OptionULong


OptionBase <|- - OptionUShort


ProblemBase <|- - Checkerboard


ProblemBase <|- - ElectronRT


ProblemBase <|- - LineSource_PN


ProblemBase <|- - LineSource_SN


QLookupQuadrature <|- - QLDFESA


QLookupQuadrature <|- - QLebedev


QLookupQuadrature <|- - QLevelSymmetric


QuadratureBase <|- - QDummy


QuadratureBase <|- - QGaussLegendre1D


QuadratureBase <|- - QGaussLegendreTensorized


QuadratureBase <|- - QLookupQuadrature


QuadratureBase <|- - QMonteCarlo


SNSolver <|- - CSDSNSolver


SNSolver <|- - SNSolverMPI


ScatteringKernel <|- - Isotropic


ScatteringKernel <|- - Isotropic1D


Solver <|- - MNSolver


Solver <|- - PNSolver


Solver <|- - SNSolver






CSDSNSolver o- - Physics


Config o- - OptionBase


MNSolver o- - EntropyBase


MNSolver o- - OptimizerBase


MNSolver o- - SphericalHarmonics


NewtonOptimizer o- - QuadratureBase


OptimizerBase o- - Config


OptimizerBase o- - EntropyBase


ProblemBase o- - Config


ProblemBase o- - Mesh


ProblemBase o- - Physics


ScatteringKernel o- - QuadratureBase


Solver o- - Config


Solver o- - Mesh


Solver o- - NumericalFlux


Solver o- - ProblemBase


Solver o- - QuadratureBase





@enduml

PlantUML version 1.2020.07(Sun Apr 19 13:42:40 CEST 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 1.8.0_252-b09
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>