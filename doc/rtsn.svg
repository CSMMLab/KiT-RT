<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1000px" preserveAspectRatio="none" style="width:2433px;height:1000px;" version="1.1" viewBox="0 0 2433 1000" width="2433px" zoomAndPan="magnify"><defs><filter height="300%" id="f1dl1ek4f66eks" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[041e745b51d1bd870567d4f38869c776]
class LaxFriedrichsFlux--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="86.4141" id="LaxFriedrichsFlux" style="stroke: #A80036; stroke-width: 1.5;" width="529" x="813.5" y="903"/><ellipse cx="1021.25" cy="919" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1024.2188,924.6406 Q1023.6406,924.9375 1023,925.0781 Q1022.3594,925.2344 1021.6563,925.2344 Q1019.1563,925.2344 1017.8281,923.5938 Q1016.5156,921.9375 1016.5156,918.8125 Q1016.5156,915.6875 1017.8281,914.0313 Q1019.1563,912.375 1021.6563,912.375 Q1022.3594,912.375 1023,912.5313 Q1023.6563,912.6875 1024.2188,912.9844 L1024.2188,915.7031 Q1023.5938,915.125 1023,914.8594 Q1022.4063,914.5781 1021.7813,914.5781 Q1020.4375,914.5781 1019.75,915.6563 Q1019.0625,916.7188 1019.0625,918.8125 Q1019.0625,920.9063 1019.75,921.9844 Q1020.4375,923.0469 1021.7813,923.0469 Q1022.4063,923.0469 1023,922.7813 Q1023.5938,922.5 1024.2188,921.9219 L1024.2188,924.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="105" x="1041.75" y="923.1543">LaxFriedrichsFlux</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="814.5" x2="1341.5" y1="935" y2="935"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="821.5" y="943"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="833.5" y="949.2104">_dt : double</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="814.5" x2="1341.5" y1="955.8047" y2="955.8047"/><ellipse cx="824.5" cy="966.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="833.5" y="970.0151">LaxFriedrichsFlux(Settings* settings)</text><ellipse cx="824.5" cy="979.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="833.5" y="982.8198">Flux(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><!--MD5=[49b4333bed3a745cc53311fcf54bbfcc]
class Mesh--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="457.75" id="Mesh" style="stroke: #A80036; stroke-width: 1.5;" width="934" x="6" y="8"/><ellipse cx="452.25" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M455.2188,29.6406 Q454.6406,29.9375 454,30.0781 Q453.3594,30.2344 452.6563,30.2344 Q450.1563,30.2344 448.8281,28.5938 Q447.5156,26.9375 447.5156,23.8125 Q447.5156,20.6875 448.8281,19.0313 Q450.1563,17.375 452.6563,17.375 Q453.3594,17.375 454,17.5313 Q454.6563,17.6875 455.2188,17.9844 L455.2188,20.7031 Q454.5938,20.125 454,19.8594 Q453.4063,19.5781 452.7813,19.5781 Q451.4375,19.5781 450.75,20.6563 Q450.0625,21.7188 450.0625,23.8125 Q450.0625,25.9063 450.75,26.9844 Q451.4375,28.0469 452.7813,28.0469 Q453.4063,28.0469 454,27.7813 Q454.5938,27.5 455.2188,26.9219 L455.2188,29.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="472.75" y="28.1543">Mesh</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="939" y1="40" y2="40"/><polygon fill="none" points="17,46,21,50,17,54,13,50" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="26" y="54.2104">_nodeNeighbors : blaze::CompressedMatrix&lt;bool&gt;</text><polygon fill="none" points="17,58.8047,21,62.8047,17,66.8047,13,62.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="26" y="67.0151">_dim : const unsigned</text><polygon fill="none" points="17,71.6094,21,75.6094,17,79.6094,13,75.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="26" y="79.8198">_ghostCellID : const unsigned</text><polygon fill="none" points="17,84.4141,21,88.4141,17,92.4141,13,88.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="26" y="92.6245">_numBoundaries : const unsigned</text><polygon fill="none" points="17,97.2188,21,101.2188,17,105.2188,13,101.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="26" y="105.4292">_numCells : const unsigned</text><polygon fill="none" points="17,110.0234,21,114.0234,17,118.0234,13,114.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="26" y="118.2339">_numNodes : const unsigned</text><polygon fill="none" points="17,122.8281,21,126.8281,17,130.8281,13,126.8281" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="26" y="131.0386">_numNodesPerCell : const unsigned</text><polygon fill="none" points="17,135.6328,21,139.6328,17,143.6328,13,139.6328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="26" y="143.8433">_log : std::shared_ptr&lt;spdlog::logger&gt;</text><polygon fill="none" points="17,148.4375,21,152.4375,17,156.4375,13,152.4375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="26" y="156.6479">_nodes : std::vector&lt;Vector&gt;</text><polygon fill="none" points="17,161.2422,21,165.2422,17,169.2422,13,165.2422" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="26" y="169.4526">_isBoundaryCell : std::vector&lt;bool&gt;</text><polygon fill="none" points="17,174.0469,21,178.0469,17,182.0469,13,178.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="26" y="182.2573">_cellAreas : std::vector&lt;double&gt;</text><polygon fill="none" points="17,186.8516,21,190.8516,17,194.8516,13,190.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="26" y="195.062">_boundaries : std::vector&lt;std::pair&lt;BOUNDARY_TYPE, std::vector&lt;unsigned&gt; &gt; &gt;</text><polygon fill="none" points="17,199.6563,21,203.6563,17,207.6563,13,203.6563" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="26" y="207.8667">_cellNormals : std::vector&lt;std::vector&lt;Vector&gt; &gt;</text><polygon fill="none" points="17,212.4609,21,216.4609,17,220.4609,13,216.4609" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="26" y="220.6714">_cellNeighbors : std::vector&lt;std::vector&lt;unsigned&gt; &gt;</text><polygon fill="none" points="17,225.2656,21,229.2656,17,233.2656,13,229.2656" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="26" y="233.4761">_cells : std::vector&lt;std::vector&lt;unsigned&gt; &gt;</text><polygon fill="none" points="17,238.0703,21,242.0703,17,246.0703,13,242.0703" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="26" y="246.2808">_colors : std::vector&lt;unsigned&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="939" y1="252.875" y2="252.875"/><ellipse cx="17" cy="263.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="26" y="267.0854">Mesh()</text><ellipse cx="17" cy="276.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="908" x="26" y="279.8901">Mesh(std::vector&lt;Vector&gt; nodes, std::vector&lt;std::vector&lt;unsigned&gt; &gt; cells, std::vector&lt;std::pair&lt;BOUNDARY_TYPE, std::vector&lt;unsigned&gt; &gt; &gt; boundaries)</text><ellipse cx="17" cy="289.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="47" x="26" y="292.6948">~Mesh()</text><polygon fill="#FFFF44" points="17,297.2891,21,301.2891,17,305.2891,13,301.2891" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="26" y="305.4995">ComputeOutwardFacingNormal(const Vector&amp; nodeA, const Vector&amp; nodeB, const Vector&amp; cellCenter) : Vector</text><ellipse cx="17" cy="315.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="26" y="318.3042">GetNodes() : std::vector&lt;Vector&gt;&amp; {query}</text><ellipse cx="17" cy="327.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="26" y="331.1089">GetCellAreas() : std::vector&lt;double&gt;&amp; {query}</text><ellipse cx="17" cy="340.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="26" y="343.9136">GetCells() : std::vector&lt;std::vector&lt;unsigned&gt; &gt;&amp; {query}</text><ellipse cx="17" cy="353.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="26" y="356.7183">GetPartitionIDs() : std::vector&lt;unsigned&gt;&amp; {query}</text><ellipse cx="17" cy="366.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="26" y="369.5229">GetDim() : unsigned {query}</text><ellipse cx="17" cy="379.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="26" y="382.3276">GetNumCells() : unsigned {query}</text><ellipse cx="17" cy="391.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="26" y="395.1323">GetNumNodes() : unsigned {query}</text><ellipse cx="17" cy="404.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="26" y="407.937">GetNumNodesPerCell() : unsigned {query}</text><polygon fill="#FFFF44" points="17,412.5313,21,416.5313,17,420.5313,13,416.5313" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="26" y="420.7417">ComputeCellAreas() : void</text><polygon fill="#FFFF44" points="17,425.3359,21,429.3359,17,433.3359,13,429.3359" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="26" y="433.5464">ComputeConnectivity() : void</text><polygon fill="#FFFF44" points="17,438.1406,21,442.1406,17,446.1406,13,442.1406" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="26" y="446.3511">ComputeNormals() : void</text><polygon fill="#FFFF44" points="17,450.9453,21,454.9453,17,458.9453,13,454.9453" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="26" y="459.1558">ComputePartitioning() : void</text><!--MD5=[63c6af204b72495afb767f03716ed6bb]
class NumericalFlux--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="86.4141" id="NumericalFlux" style="stroke: #A80036; stroke-width: 1.5;" width="528" x="1096" y="641.5"/><ellipse cx="1312.25" cy="657.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1312.3594,652.8438 L1311.2031,657.9219 L1313.5313,657.9219 L1312.3594,652.8438 Z M1310.875,650.6094 L1313.8594,650.6094 L1317.2188,663 L1314.7656,663 L1314,659.9375 L1310.7188,659.9375 L1309.9688,663 L1307.5313,663 L1310.875,650.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="87" x="1332.75" y="661.6543">NumericalFlux</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1097" x2="1623" y1="673.5" y2="673.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1097" x2="1623" y1="681.5" y2="681.5"/><ellipse cx="1107" cy="692.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1116" y="695.7104">NumericalFlux(Settings* settings)</text><ellipse cx="1107" cy="705.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="246" x="1116" y="708.5151">Create(Settings* settings) : NumericalFlux*</text><ellipse cx="1107" cy="718.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="502" x="1116" y="721.3198">Flux(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><!--MD5=[7cd9cfd355b807b7d67babb7c40cfbb5]
class QMonteCarlo--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="137.6328" id="QMonteCarlo" style="stroke: #A80036; stroke-width: 1.5;" width="461" x="1930.5" y="615.5"/><ellipse cx="2116.75" cy="631.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2119.7188,637.1406 Q2119.1406,637.4375 2118.5,637.5781 Q2117.8594,637.7344 2117.1563,637.7344 Q2114.6563,637.7344 2113.3281,636.0938 Q2112.0156,634.4375 2112.0156,631.3125 Q2112.0156,628.1875 2113.3281,626.5313 Q2114.6563,624.875 2117.1563,624.875 Q2117.8594,624.875 2118.5,625.0313 Q2119.1563,625.1875 2119.7188,625.4844 L2119.7188,628.2031 Q2119.0938,627.625 2118.5,627.3594 Q2117.9063,627.0781 2117.2813,627.0781 Q2115.9375,627.0781 2115.25,628.1563 Q2114.5625,629.2188 2114.5625,631.3125 Q2114.5625,633.4063 2115.25,634.4844 Q2115.9375,635.5469 2117.2813,635.5469 Q2117.9063,635.5469 2118.5,635.2813 Q2119.0938,635 2119.7188,634.4219 L2119.7188,637.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="2137.25" y="635.6543">QMonteCarlo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1931.5" x2="2390.5" y1="647.5" y2="647.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1931.5" x2="2390.5" y1="655.5" y2="655.5"/><ellipse cx="1941.5" cy="666.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="1950.5" y="669.7104">QMonteCarlo(int order)</text><ellipse cx="1941.5" cy="679.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="1950.5" y="682.5151">~QMonteCarlo()</text><ellipse cx="1941.5" cy="692.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="426" x="1950.5" y="695.3198">ComputePoints() : blaze::DynamicVector&lt;blaze::DynamicVector&lt;double&gt; &gt;</text><ellipse cx="1941.5" cy="704.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="435" x="1950.5" y="708.1245">ComputeConnectivity() : blaze::DynamicVector&lt;blaze::DynamicVector&lt;int&gt; &gt;</text><ellipse cx="1941.5" cy="717.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="1950.5" y="720.9292">ComputeWeights() : blaze::DynamicVector&lt;double&gt;</text><ellipse cx="1941.5" cy="730.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="1950.5" y="733.7339">ComputeNq() : int</text><ellipse cx="1941.5" cy="743.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1950.5" y="746.5386">ComputeName() : std::string</text><!--MD5=[2df2a4f4ecfceb71851799cbde3860f2]
class Quadrature--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="432.1406" id="Quadrature" style="stroke: #A80036; stroke-width: 1.5;" width="522" x="1900" y="21"/><ellipse cx="2121.25" cy="37" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2121.3594,32.3438 L2120.2031,37.4219 L2122.5313,37.4219 L2121.3594,32.3438 Z M2119.875,30.1094 L2122.8594,30.1094 L2126.2188,42.5 L2123.7656,42.5 L2123,39.4375 L2119.7188,39.4375 L2118.9688,42.5 L2116.5313,42.5 L2119.875,30.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="71" x="2141.75" y="41.1543">Quadrature</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1901" x2="2421" y1="53" y2="53"/><polygon fill="none" points="1911,59,1915,63,1911,67,1907,63" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="1920" y="67.2104">_points : blaze::DynamicVector&lt;blaze::DynamicVector&lt;double&gt; &gt;</text><polygon fill="none" points="1911,71.8047,1915,75.8047,1911,79.8047,1907,75.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="1920" y="80.0151">_connectivity : blaze::DynamicVector&lt;blaze::DynamicVector&lt;int&gt; &gt;</text><polygon fill="none" points="1911,84.6094,1915,88.6094,1911,92.6094,1907,88.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="1920" y="92.8198">_weights : blaze::DynamicVector&lt;double&gt;</text><polygon fill="none" points="1911,97.4141,1915,101.4141,1911,105.4141,1907,101.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="46" x="1920" y="105.6245">_nq : int</text><polygon fill="none" points="1911,110.2188,1915,114.2188,1911,118.2188,1907,114.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="1920" y="118.4292">_order : int</text><polygon fill="none" points="1911,123.0234,1915,127.0234,1911,131.0234,1907,127.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1920" y="131.2339">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1901" x2="2421" y1="137.8281" y2="137.8281"/><ellipse cx="1911" cy="148.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="1920" y="152.0386">Quadrature(int order)</text><ellipse cx="1911" cy="161.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="1920" y="164.8433">~Quadrature()</text><ellipse cx="1911" cy="174.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="346" x="1920" y="177.6479">CreateQuadrature(std::string name, int order) : Quadrature*</text><ellipse cx="1911" cy="187.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="431" x="1920" y="190.4526">ComputePoints() : blaze::DynamicVector&lt;blaze::DynamicVector&lt;double&gt; &gt;</text><ellipse cx="1911" cy="200.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="395" x="1920" y="203.2573">GetPoints() : blaze::DynamicVector&lt;blaze::DynamicVector&lt;double&gt; &gt;</text><ellipse cx="1911" cy="212.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="443" x="1920" y="216.062">ComputeConnectivity() : blaze::DynamicVector&lt;blaze::DynamicVector&lt;int&gt; &gt;</text><ellipse cx="1911" cy="225.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="404" x="1920" y="228.8667">GetConnectivity() : blaze::DynamicVector&lt;blaze::DynamicVector&lt;int&gt; &gt;</text><ellipse cx="1911" cy="238.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="296" x="1920" y="241.6714">ComputeWeights() : blaze::DynamicVector&lt;double&gt;</text><ellipse cx="1911" cy="251.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="1920" y="254.4761">GetWeights() : blaze::DynamicVector&lt;double&gt;</text><ellipse cx="1911" cy="264.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1920" y="267.2808">SumUpWeights() : double</text><ellipse cx="1911" cy="276.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="100" x="1920" y="280.0854">ComputeNq() : int</text><ellipse cx="1911" cy="289.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1920" y="292.8901">GetNq() : int</text><ellipse cx="1911" cy="302.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="1920" y="305.6948">GetOrder() : int</text><ellipse cx="1911" cy="315.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="161" x="1920" y="318.4995">ComputeName() : std::string</text><ellipse cx="1911" cy="328.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="1920" y="331.3042">GetName() : std::string</text><ellipse cx="1911" cy="340.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1920" y="344.1089">PrintPoints() : void</text><ellipse cx="1911" cy="353.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="1920" y="356.9136">PrintPointsAndWeights() : void</text><ellipse cx="1911" cy="366.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="1920" y="369.7183">PrintWeights() : void</text><ellipse cx="1911" cy="379.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="496" x="1920" y="382.5229">SetConnectivity(blaze::DynamicVector&lt;blaze::DynamicVector&lt;int&gt; &gt; connectivity) : void</text><ellipse cx="1911" cy="392.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1920" y="395.3276">SetName(std::string name) : void</text><ellipse cx="1911" cy="404.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1920" y="408.1323">SetNq(int nq) : void</text><ellipse cx="1911" cy="417.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1920" y="420.937">SetOrder(int order) : void</text><ellipse cx="1911" cy="430.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="1920" y="433.7417">SetPoints(blaze::DynamicVector&lt;blaze::DynamicVector&lt;double&gt; &gt; points) : void</text><ellipse cx="1911" cy="443.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="1920" y="446.5464">SetWeights(blaze::DynamicVector&lt;double&gt; weights) : void</text><!--MD5=[168618c52cf8b01b81c881510cd68189]
class Reconstructor--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="73.6094" id="Reconstructor" style="stroke: #A80036; stroke-width: 1.5;" width="539" x="975.5" y="200"/><ellipse cx="1196.25" cy="216" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1199.2188,221.6406 Q1198.6406,221.9375 1198,222.0781 Q1197.3594,222.2344 1196.6563,222.2344 Q1194.1563,222.2344 1192.8281,220.5938 Q1191.5156,218.9375 1191.5156,215.8125 Q1191.5156,212.6875 1192.8281,211.0313 Q1194.1563,209.375 1196.6563,209.375 Q1197.3594,209.375 1198,209.5313 Q1198.6563,209.6875 1199.2188,209.9844 L1199.2188,212.7031 Q1198.5938,212.125 1198,211.8594 Q1197.4063,211.5781 1196.7813,211.5781 Q1195.4375,211.5781 1194.75,212.6563 Q1194.0625,213.7188 1194.0625,215.8125 Q1194.0625,217.9063 1194.75,218.9844 Q1195.4375,220.0469 1196.7813,220.0469 Q1197.4063,220.0469 1198,219.7813 Q1198.5938,219.5 1199.2188,218.9219 L1199.2188,221.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="89" x="1216.75" y="220.1543">Reconstructor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="976.5" x2="1513.5" y1="232" y2="232"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="976.5" x2="1513.5" y1="240" y2="240"/><ellipse cx="986.5" cy="251" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="995.5" y="254.2104">Reconstructor(Settings* settings)</text><ellipse cx="986.5" cy="263.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="513" x="995.5" y="267.0151">Slope(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><!--MD5=[0b503fe5c24e14c3c70681465d2d6a28]
class SNSolver--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="73.6094" id="SNSolver" style="stroke: #A80036; stroke-width: 1.5;" width="189" x="1659.5" y="647.5"/><ellipse cx="1722.25" cy="663.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1725.2188,669.1406 Q1724.6406,669.4375 1724,669.5781 Q1723.3594,669.7344 1722.6563,669.7344 Q1720.1563,669.7344 1718.8281,668.0938 Q1717.5156,666.4375 1717.5156,663.3125 Q1717.5156,660.1875 1718.8281,658.5313 Q1720.1563,656.875 1722.6563,656.875 Q1723.3594,656.875 1724,657.0313 Q1724.6563,657.1875 1725.2188,657.4844 L1725.2188,660.2031 Q1724.5938,659.625 1724,659.3594 Q1723.4063,659.0781 1722.7813,659.0781 Q1721.4375,659.0781 1720.75,660.1563 Q1720.0625,661.2188 1720.0625,663.3125 Q1720.0625,665.4063 1720.75,666.4844 Q1721.4375,667.5469 1722.7813,667.5469 Q1723.4063,667.5469 1724,667.2813 Q1724.5938,667 1725.2188,666.4219 L1725.2188,669.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="1742.75" y="667.6543">SNSolver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1660.5" x2="1847.5" y1="679.5" y2="679.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1660.5" x2="1847.5" y1="687.5" y2="687.5"/><ellipse cx="1670.5" cy="698.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="1679.5" y="701.7104">SNSolver(Settings* settings)</text><ellipse cx="1670.5" cy="711.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="1679.5" y="714.5151">Solve() : void</text><!--MD5=[fb0932da17f9982e4848347a102654e2]
class Settings--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="316.8984" id="Settings" style="stroke: #A80036; stroke-width: 1.5;" width="420" x="263" y="526"/><ellipse cx="442.75" cy="542" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M445.7188,547.6406 Q445.1406,547.9375 444.5,548.0781 Q443.8594,548.2344 443.1563,548.2344 Q440.6563,548.2344 439.3281,546.5938 Q438.0156,544.9375 438.0156,541.8125 Q438.0156,538.6875 439.3281,537.0313 Q440.6563,535.375 443.1563,535.375 Q443.8594,535.375 444.5,535.5313 Q445.1563,535.6875 445.7188,535.9844 L445.7188,538.7031 Q445.0938,538.125 444.5,537.8594 Q443.9063,537.5781 443.2813,537.5781 Q441.9375,537.5781 441.25,538.6563 Q440.5625,539.7188 440.5625,541.8125 Q440.5625,543.9063 441.25,544.9844 Q441.9375,546.0469 443.2813,546.0469 Q443.9063,546.0469 444.5,545.7813 Q445.0938,545.5 445.7188,544.9219 L445.7188,547.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="52" x="463.25" y="546.1543">Settings</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="264" x2="682" y1="558" y2="558"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="566"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="283" y="572.2104">_CFL : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="578.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="283" y="585.0151">_comm_rank : int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="591.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="283" y="597.8198">_comm_size : int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="604.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="283" y="610.6245">_inputDir : std::filesystem::path</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="617.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="183" x="283" y="623.4292">_inputFile : std::filesystem::path</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="630.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="283" y="636.2339">_logDir : std::filesystem::path</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="642.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="283" y="649.0386">_meshFile : std::filesystem::path</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="655.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="283" y="661.8433">_outputDir : std::filesystem::path</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="668.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="283" y="674.6479">_outputFile : std::filesystem::path</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="681.2422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="283" y="687.4526">_boundaries : std::vector&lt;std::pair&lt;std::string, BOUNDARY_TYPE&gt; &gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="694.0469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="283" y="700.2573">_meshDimension : unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="271" y="706.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="283" y="713.062">_quadOrder : unsigned</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="264" x2="682" y1="719.6563" y2="719.6563"/><ellipse cx="274" cy="730.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="283" y="733.8667">Settings()</text><ellipse cx="274" cy="743.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="283" y="746.6714">GetBoundaryType(std::string name) : BOUNDARY_TYPE {query}</text><ellipse cx="274" cy="756.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="283" y="759.4761">ReadInputFile(std::string fileName) : Settings*</text><ellipse cx="274" cy="769.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="283" y="772.2808">GetInputDir() : std::string {query}</text><ellipse cx="274" cy="781.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="283" y="785.0854">GetInputFile() : std::string {query}</text><ellipse cx="274" cy="794.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="283" y="797.8901">GetLogDir() : std::string {query}</text><ellipse cx="274" cy="807.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="283" y="810.6948">GetMeshFile() : std::string {query}</text><ellipse cx="274" cy="820.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="283" y="823.4995">GetOutputDir() : std::string {query}</text><ellipse cx="274" cy="833.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="283" y="836.3042">GetOutputFile() : std::string {query}</text><!--MD5=[7e0cc054e68485d8dbab588155cf841a]
class Solver--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="265.6797" id="Solver" style="stroke: #A80036; stroke-width: 1.5;" width="315" x="1549.5" y="104"/><ellipse cx="1683.75" cy="120" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1683.8594,115.3438 L1682.7031,120.4219 L1685.0313,120.4219 L1683.8594,115.3438 Z M1682.375,113.1094 L1685.3594,113.1094 L1688.7188,125.5 L1686.2656,125.5 L1685.5,122.4375 L1682.2188,122.4375 L1681.4688,125.5 L1679.0313,125.5 L1682.375,113.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="38" x="1704.25" y="124.1543">Solver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1550.5" x2="1863.5" y1="136" y2="136"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="144"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="1569.5" y="150.2104">_psi : Matrix</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="156.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="1569.5" y="163.0151">_g : NumericalFlux*</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="169.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1569.5" y="175.8198">_NCells : const unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="182.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="1569.5" y="188.6245">_NTimeSteps : const unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="195.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="1569.5" y="201.4292">_Q : const unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="208.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="1569.5" y="214.2339">_normals : std::vector&lt;Vector&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="220.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="1569.5" y="227.0386">_quadPoints : std::vector&lt;Vector&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="233.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="1569.5" y="239.8433">_density : std::vector&lt;double&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="246.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1569.5" y="252.6479">_sH20 : std::vector&lt;double&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="259.2422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="1569.5" y="265.4526">_weights : std::vector&lt;double&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="272.0469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="1569.5" y="278.2573">_neighbors : std::vector&lt;std::vector&lt;unsigned&gt; &gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="284.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="1569.5" y="291.062">_areas : std::vector&lt;unsigned&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1550.5" x2="1863.5" y1="297.6563" y2="297.6563"/><ellipse cx="1560.5" cy="308.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="1569.5" y="311.8667">Solver(Settings* settings)</text><ellipse cx="1560.5" cy="321.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="203" x="1569.5" y="324.6714">Create(Settings* settings) : Solver*</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="331.2656"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="1569.5" y="337.4761">LoadPatientDensity(std::string fileName) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1557.5" y="344.0703"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="1569.5" y="350.2808">LoadStoppingPower(std::string fileName) : void</text><ellipse cx="1560.5" cy="359.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="75" x="1569.5" y="363.0854">Solve() : void</text><!--MD5=[5c1f2380e58c36d5ea81108e4a7509d5]
class UpwindFlux--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="73.6094" id="UpwindFlux" style="stroke: #A80036; stroke-width: 1.5;" width="529" x="1377.5" y="909"/><ellipse cx="1603.25" cy="925" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1606.2188,930.6406 Q1605.6406,930.9375 1605,931.0781 Q1604.3594,931.2344 1603.6563,931.2344 Q1601.1563,931.2344 1599.8281,929.5938 Q1598.5156,927.9375 1598.5156,924.8125 Q1598.5156,921.6875 1599.8281,920.0313 Q1601.1563,918.375 1603.6563,918.375 Q1604.3594,918.375 1605,918.5313 Q1605.6563,918.6875 1606.2188,918.9844 L1606.2188,921.7031 Q1605.5938,921.125 1605,920.8594 Q1604.4063,920.5781 1603.7813,920.5781 Q1602.4375,920.5781 1601.75,921.6563 Q1601.0625,922.7188 1601.0625,924.8125 Q1601.0625,926.9063 1601.75,927.9844 Q1602.4375,929.0469 1603.7813,929.0469 Q1604.4063,929.0469 1605,928.7813 Q1605.5938,928.5 1606.2188,927.9219 L1606.2188,930.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="69" x="1623.75" y="929.1543">UpwindFlux</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1378.5" x2="1905.5" y1="941" y2="941"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1378.5" x2="1905.5" y1="949" y2="949"/><ellipse cx="1388.5" cy="960" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="1397.5" y="963.2104">UpwindFlux(Settings* settings)</text><ellipse cx="1388.5" cy="972.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="1397.5" y="976.0151">Flux(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><!--MD5=[2f6d06e17746718185fc96242bb8b19f]
class BOUNDARY_TYPE--><rect fill="#FEFECE" filter="url(#f1dl1ek4f66eks)" height="73.6094" id="BOUNDARY_TYPE" style="stroke: #A80036; stroke-width: 1.5;" width="135" x="718.5" y="647.5"/><ellipse cx="733.5" cy="663.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M737.6094,669.5 L729.8906,669.5 L729.8906,657.1094 L737.6094,657.1094 L737.6094,659.2656 L732.3438,659.2656 L732.3438,661.9375 L737.1094,661.9375 L737.1094,664.0938 L732.3438,664.0938 L732.3438,667.3438 L737.6094,667.3438 L737.6094,669.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="103" x="747.5" y="667.6543">BOUNDARY_TYPE</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="719.5" x2="852.5" y1="679.5" y2="679.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="724.5" y="693.7104">DIRICHLET</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="42" x="724.5" y="706.5151">INVALID</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="719.5" x2="852.5" y1="713.1094" y2="713.1094"/><!--MD5=[51a439b0c181719f1a10a280166c3aa3]
reverse link NumericalFlux to LaxFriedrichsFlux--><path d="M1299.18,741.47 C1246.57,789.88 1171.64,858.83 1123.92,902.75 " fill="none" id="NumericalFlux&lt;-LaxFriedrichsFlux" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1294.61,736.16,1314.06,727.77,1304.09,746.46,1294.61,736.16" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2c8ea5724d5b402e5c8d4ca42df5ffb9]
reverse link NumericalFlux to UpwindFlux--><path d="M1420.76,741.41 C1475.79,792.05 1555.25,865.18 1602.46,908.62 " fill="none" id="NumericalFlux&lt;-UpwindFlux" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1415.91,746.46,1405.94,727.77,1425.39,736.16,1415.91,746.46" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[d04a33bd9bd85443e112393ce1dbb80f]
reverse link Quadrature to QMonteCarlo--><path d="M2161,473.54 C2161,525.41 2161,576.36 2161,615.08 " fill="none" id="Quadrature&lt;-QMonteCarlo" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2154,473.25,2161,453.25,2168,473.25,2154,473.25" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2865e895988d2514b2f754bd9f7b9c94]
reverse link Solver to SNSolver--><path d="M1723.04,390.07 C1732.74,482 1744.33,591.84 1750.2,647.43 " fill="none" id="Solver&lt;-SNSolver" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1716.08,390.78,1720.94,370.16,1730,389.31,1716.08,390.78" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[141236dffacf4bdc2074205320151f00]
reverse link Solver to NumericalFlux--><path d="M1598.01,380.65 C1576.22,408.99 1553.44,438.48 1532,466 C1484.36,527.14 1428.62,597.4 1393.8,641.13 " fill="none" id="Solver&lt;-NumericalFlux" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1605.99,370.27,1599.162,372.5892,1598.6767,379.7839,1605.5046,377.4647,1605.99,370.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a1c37b6dbc8a4e15e7d13210357c3e46]
link Mesh to Reconstructor--><!--MD5=[a883e15a11194fd9f8ae2dadb3f6e415]
link Mesh to Settings--><!--MD5=[04faaa0b7f3a3ad9efb9d95b25986404]
link Settings to BOUNDARY_TYPE--><!--MD5=[1fb087d6febdf19dea5e00afee78b054]
@startuml






class LaxFriedrichsFlux {
	+LaxFriedrichsFlux(Settings* settings)
	+Flux(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
	-_dt : double
}


class Mesh {
	+Mesh()
	+Mesh(std::vector<Vector> nodes, std::vector<std::vector<unsigned> > cells, std::vector<std::pair<BOUNDARY_TYPE, std::vector<unsigned> > > boundaries)
	+~Mesh()
	#ComputeOutwardFacingNormal(const Vector& nodeA, const Vector& nodeB, const Vector& cellCenter) : Vector
	#_nodeNeighbors : blaze::CompressedMatrix<bool>
	#_dim : const unsigned
	#_ghostCellID : const unsigned
	#_numBoundaries : const unsigned
	#_numCells : const unsigned
	#_numNodes : const unsigned
	#_numNodesPerCell : const unsigned
	#_log : std::shared_ptr<spdlog::logger>
	#_nodes : std::vector<Vector>
	+GetNodes() : std::vector<Vector>& {query}
	#_isBoundaryCell : std::vector<bool>
	#_cellAreas : std::vector<double>
	+GetCellAreas() : std::vector<double>& {query}
	#_boundaries : std::vector<std::pair<BOUNDARY_TYPE, std::vector<unsigned> > >
	#_cellNormals : std::vector<std::vector<Vector> >
	#_cellNeighbors : std::vector<std::vector<unsigned> >
	#_cells : std::vector<std::vector<unsigned> >
	+GetCells() : std::vector<std::vector<unsigned> >& {query}
	#_colors : std::vector<unsigned>
	+GetPartitionIDs() : std::vector<unsigned>& {query}
	+GetDim() : unsigned {query}
	+GetNumCells() : unsigned {query}
	+GetNumNodes() : unsigned {query}
	+GetNumNodesPerCell() : unsigned {query}
	#ComputeCellAreas() : void
	#ComputeConnectivity() : void
	#ComputeNormals() : void
	#ComputePartitioning() : void
}


abstract class NumericalFlux {
	+NumericalFlux(Settings* settings)
	+{static} Create(Settings* settings) : NumericalFlux*
	+{abstract} Flux(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
}


class QMonteCarlo {
	+QMonteCarlo(int order)
	+~QMonteCarlo()
	+ComputePoints() : blaze::DynamicVector<blaze::DynamicVector<double> >
	+ComputeConnectivity() : blaze::DynamicVector<blaze::DynamicVector<int> >
	+ComputeWeights() : blaze::DynamicVector<double>
	+ComputeNq() : int
	+ComputeName() : std::string
}


abstract class Quadrature {
	+Quadrature(int order)
	+~Quadrature()
	+{static} CreateQuadrature(std::string name, int order) : Quadrature*
	+{abstract} ComputePoints() : blaze::DynamicVector<blaze::DynamicVector<double> >
	+GetPoints() : blaze::DynamicVector<blaze::DynamicVector<double> >
	#_points : blaze::DynamicVector<blaze::DynamicVector<double> >
	+{abstract} ComputeConnectivity() : blaze::DynamicVector<blaze::DynamicVector<int> >
	+GetConnectivity() : blaze::DynamicVector<blaze::DynamicVector<int> >
	#_connectivity : blaze::DynamicVector<blaze::DynamicVector<int> >
	+{abstract} ComputeWeights() : blaze::DynamicVector<double>
	+GetWeights() : blaze::DynamicVector<double>
	#_weights : blaze::DynamicVector<double>
	+SumUpWeights() : double
	+{abstract} ComputeNq() : int
	+GetNq() : int
	+GetOrder() : int
	#_nq : int
	#_order : int
	+{abstract} ComputeName() : std::string
	+GetName() : std::string
	#_name : std::string
	+PrintPoints() : void
	+PrintPointsAndWeights() : void
	+PrintWeights() : void
	+SetConnectivity(blaze::DynamicVector<blaze::DynamicVector<int> > connectivity) : void
	+SetName(std::string name) : void
	+SetNq(int nq) : void
	+SetOrder(int order) : void
	+SetPoints(blaze::DynamicVector<blaze::DynamicVector<double> > points) : void
	+SetWeights(blaze::DynamicVector<double> weights) : void
}


class Reconstructor {
	+Reconstructor(Settings* settings)
	+Slope(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
}


class SNSolver {
	+SNSolver(Settings* settings)
	+Solve() : void
}


class Settings {
	+Settings()
	+GetBoundaryType(std::string name) : BOUNDARY_TYPE {query}
	+ReadInputFile(std::string fileName) : Settings*
	-_CFL : double
	-_comm_rank : int
	-_comm_size : int
	-_inputDir : std::filesystem::path
	-_inputFile : std::filesystem::path
	-_logDir : std::filesystem::path
	-_meshFile : std::filesystem::path
	-_outputDir : std::filesystem::path
	-_outputFile : std::filesystem::path
	+GetInputDir() : std::string {query}
	+GetInputFile() : std::string {query}
	+GetLogDir() : std::string {query}
	+GetMeshFile() : std::string {query}
	+GetOutputDir() : std::string {query}
	+GetOutputFile() : std::string {query}
	-_boundaries : std::vector<std::pair<std::string, BOUNDARY_TYPE> >
	-_meshDimension : unsigned
	-_quadOrder : unsigned
}


abstract class Solver {
	+Solver(Settings* settings)
	-_psi : Matrix
	-_g : NumericalFlux*
	+{static} Create(Settings* settings) : Solver*
	-_NCells : const unsigned
	-_NTimeSteps : const unsigned
	-_Q : const unsigned
	-_normals : std::vector<Vector>
	-_quadPoints : std::vector<Vector>
	-_density : std::vector<double>
	-_sH20 : std::vector<double>
	-_weights : std::vector<double>
	-_neighbors : std::vector<std::vector<unsigned> >
	-_areas : std::vector<unsigned>
	-LoadPatientDensity(std::string fileName) : void
	-LoadStoppingPower(std::string fileName) : void
	+{abstract} Solve() : void
}


class UpwindFlux {
	+UpwindFlux(Settings* settings)
	+Flux(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
}


enum BOUNDARY_TYPE {
	DIRICHLET
	INVALID
}






NumericalFlux <|- - LaxFriedrichsFlux


NumericalFlux <|- - UpwindFlux


Quadrature <|- - QMonteCarlo


Solver <|- - SNSolver






Solver o- - NumericalFlux





@enduml

PlantUML version 1.2020.05(Thu Mar 19 22:17:32 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 10.0.2+13
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>