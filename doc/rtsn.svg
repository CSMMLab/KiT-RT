<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1971px" preserveAspectRatio="none" style="width:8470px;height:1971px;" version="1.1" viewBox="0 0 8470 1971" width="8470px" zoomAndPan="magnify"><defs><filter height="300%" id="fkqdfxd66htkr" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[a66ec189e74f4fb17bcf63e6d06e8a3b]
class COptionUShort--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="137.6328" id="COptionUShort" style="stroke: #A80036; stroke-width: 1.5;" width="630" x="6" y="1816"/><ellipse cx="271.25" cy="1832" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M271.3594,1827.3438 L270.2031,1832.4219 L272.5313,1832.4219 L271.3594,1827.3438 Z M269.875,1825.1094 L272.8594,1825.1094 L276.2188,1837.5 L273.7656,1837.5 L273,1834.4375 L269.7188,1834.4375 L268.9688,1837.5 L266.5313,1837.5 L269.875,1825.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="91" x="291.75" y="1836.1543">COptionUShort</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="635" y1="1848" y2="1848"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1856"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="26" y="1862.2104">_name : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1868.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="26" y="1875.0151">_def : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="1881.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="26" y="1887.8198">_field : unsigned short&amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="635" y1="1894.4141" y2="1894.4141"/><ellipse cx="17" cy="1905.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="604" x="26" y="1908.6245">COptionUShort(std::string option_field_name, unsigned short&amp; option_field, unsigned short default_value)</text><ellipse cx="17" cy="1918.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="26" y="1921.4292">~COptionUShort()</text><ellipse cx="17" cy="1931.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="26" y="1934.2339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="17" cy="1943.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="26" y="1947.0386">SetDefault() : void</text><!--MD5=[d1bc18906ee38dcc4f14e2fc9402119a]
class Checkerboard--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="201.6563" id="Checkerboard" style="stroke: #A80036; stroke-width: 1.5;" width="519" x="3220.5" y="1043.5"/><ellipse cx="3431.75" cy="1059.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3434.7188,1065.1406 Q3434.1406,1065.4375 3433.5,1065.5781 Q3432.8594,1065.7344 3432.1563,1065.7344 Q3429.6563,1065.7344 3428.3281,1064.0938 Q3427.0156,1062.4375 3427.0156,1059.3125 Q3427.0156,1056.1875 3428.3281,1054.5313 Q3429.6563,1052.875 3432.1563,1052.875 Q3432.8594,1052.875 3433.5,1053.0313 Q3434.1563,1053.1875 3434.7188,1053.4844 L3434.7188,1056.2031 Q3434.0938,1055.625 3433.5,1055.3594 Q3432.9063,1055.0781 3432.2813,1055.0781 Q3430.9375,1055.0781 3430.25,1056.1563 Q3429.5625,1057.2188 3429.5625,1059.3125 Q3429.5625,1061.4063 3430.25,1062.4844 Q3430.9375,1063.5469 3432.2813,1063.5469 Q3432.9063,1063.5469 3433.5,1063.2813 Q3434.0938,1063 3434.7188,1062.4219 L3434.7188,1065.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="88" x="3452.25" y="1063.6543">Checkerboard</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3221.5" x2="3738.5" y1="1075.5" y2="1075.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3228.5" y="1083.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="3240.5" y="1089.7104">_scatteringXS : Vector</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3228.5" y="1096.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="3240.5" y="1102.5151">_totalXS : Vector</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3221.5" x2="3738.5" y1="1109.1094" y2="1109.1094"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3228.5" y="1117.1094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="3240.5" y="1123.3198">Checkerboard()</text><ellipse cx="3231.5" cy="1132.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="259" x="3240.5" y="1136.1245">Checkerboard(Config* settings, Mesh* mesh)</text><ellipse cx="3231.5" cy="1145.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="3240.5" y="1148.9292">~Checkerboard()</text><ellipse cx="3231.5" cy="1158.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="3240.5" y="1161.7339">GetScatteringXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="3231.5" cy="1171.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="3240.5" y="1174.5386">GetTotalXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="3231.5" cy="1184.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3240.5" y="1187.3433">SetupIC() : VectorVector</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3228.5" y="1193.9375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="3240.5" y="1200.1479">isAbsorption(const Vector&amp; pos) : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3228.5" y="1206.7422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="250" x="3240.5" y="1212.9526">isSource(const Vector&amp; pos) : bool {query}</text><ellipse cx="3231.5" cy="1222.5469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="3240.5" y="1225.7573">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="3231.5" cy="1235.3516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="3240.5" y="1238.562">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><!--MD5=[4bf8aff396996fef456cd268939daa24]
class Config--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="790.6719" id="Config" style="stroke: #A80036; stroke-width: 1.5;" width="836" x="2349" y="749"/><ellipse cx="2743.25" cy="765" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2746.2188,770.6406 Q2745.6406,770.9375 2745,771.0781 Q2744.3594,771.2344 2743.6563,771.2344 Q2741.1563,771.2344 2739.8281,769.5938 Q2738.5156,767.9375 2738.5156,764.8125 Q2738.5156,761.6875 2739.8281,760.0313 Q2741.1563,758.375 2743.6563,758.375 Q2744.3594,758.375 2745,758.5313 Q2745.6563,758.6875 2746.2188,758.9844 L2746.2188,761.7031 Q2745.5938,761.125 2745,760.8594 Q2744.4063,760.5781 2743.7813,760.5781 Q2742.4375,760.5781 2741.75,761.6563 Q2741.0625,762.7188 2741.0625,764.8125 Q2741.0625,766.9063 2741.75,767.9844 Q2742.4375,769.0469 2743.7813,769.0469 Q2744.4063,769.0469 2745,768.7813 Q2745.5938,768.5 2746.2188,767.9219 L2746.2188,770.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="39" x="2763.75" y="769.1543">Config</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2350" x2="3184" y1="781" y2="781"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="789"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2369" y="795.2104">_kernelName : KERNEL_NAME</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="801.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="2369" y="808.0151">_problemName : PROBLEM_NAME</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="814.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2369" y="820.8198">_quadName : QUAD_NAME</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="827.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="2369" y="833.6245">_baseConfig : bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="840.2188"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="2369" y="846.4292">_CFL : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="853.0234"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="2369" y="859.2339">_tEnd : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="865.8281"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="2369" y="872.0386">_commRank : int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="878.6328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="2369" y="884.8433">_commSize : int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="891.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="284" x="2369" y="897.6479">_optionMap : std::map&lt;std::string, OptionBase*&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="904.2422"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="2369" y="910.4526">_allOptions : std::map&lt;std::string, bool&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="917.0469"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2369" y="923.2573">_fileName : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="929.8516"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2369" y="936.062">_inputDir : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="942.6563"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="2369" y="948.8667">_logDir : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="955.4609"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="2369" y="961.6714">_meshFile : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="968.2656"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2369" y="974.4761">_outputDir : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="981.0703"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="2369" y="987.2808">_outputFile : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="993.875"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="2369" y="1000.0854">_boundaries : std::vector&lt;std::pair&lt;std::string, BOUNDARY_TYPE&gt; &gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1006.6797"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="2369" y="1012.8901">_MarkerDirichlet : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1019.4844"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="2369" y="1025.6948">_MarkerNeumann : std::vector&lt;std::string&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1032.2891"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2369" y="1038.4995">_nCells : unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1045.0938"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="2369" y="1051.3042">_nQuadPoints : unsigned</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1057.8984"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="2369" y="1064.1089">_nMarkerDirichlet : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1070.7031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="2369" y="1076.9136">_nMarkerNeumann : unsigned short</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1083.5078"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2369" y="1089.7183">_quadOrder : unsigned short</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2350" x2="3184" y1="1096.3125" y2="1096.3125"/><ellipse cx="2360" cy="1107.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="2369" y="1110.5229">Config(char case_filename)</text><ellipse cx="2360" cy="1120.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="2369" y="1123.3276">~Config(void)</text><ellipse cx="2360" cy="1132.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="2369" y="1136.1323">GetBoundaryType(std::string nameMarker) : BOUNDARY_TYPE {query}</text><ellipse cx="2360" cy="1145.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="2369" y="1148.937">GetKernelName() : KERNEL_NAME {query}</text><ellipse cx="2360" cy="1158.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="260" x="2369" y="1161.7417">GetProblemName() : PROBLEM_NAME {query}</text><ellipse cx="2360" cy="1171.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="2369" y="1174.5464">GetQuadName() : QUAD_NAME {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1181.1406"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="601" x="2369" y="1187.3511">TokenizeString(std::string&amp; str, std::string&amp; option_name, std::vector&lt;std::string&gt;&amp; option_value) : bool</text><ellipse cx="2360" cy="1196.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2369" y="1200.1558">GetCFL() : double {query}</text><ellipse cx="2360" cy="1209.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="2369" y="1212.9604">GetTEnd() : double {query}</text><ellipse cx="2360" cy="1222.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="2369" y="1225.7651">GetLogDir() : std::string {query}</text><ellipse cx="2360" cy="1235.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="2369" y="1238.5698">GetMeshFile() : std::string {query}</text><ellipse cx="2360" cy="1248.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="2369" y="1251.3745">GetOutputDir() : std::string {query}</text><ellipse cx="2360" cy="1260.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="2369" y="1264.1792">GetOutputFile() : std::string {query}</text><ellipse cx="2360" cy="1273.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="2369" y="1276.9839">GetNCells() : unsigned</text><ellipse cx="2360" cy="1286.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2369" y="1289.7886">GetNQuadPoints() : unsigned</text><ellipse cx="2360" cy="1299.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="2369" y="1302.5933">GetQuadOrder() : unsigned short {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1309.1875"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="478" x="2369" y="1315.3979">AddBoolOption(const std::string name, bool&amp; option_field, bool default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1321.9922"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="520" x="2369" y="1328.2026">AddDoubleOption(const std::string name, double&amp; option_field, double default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1334.7969"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="810" x="2369" y="1341.0073">AddEnumOption(const std::string name, Tenum&amp; option_field, const std::map&lt;std::string, Tenum&gt;&amp; enum_map, Tenum default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1347.6016"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="473" x="2369" y="1353.812">AddIntegerOption(const std::string name, int&amp; option_field, int default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1360.4063"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="2369" y="1366.6167">AddLongOption(const std::string name, long&amp; option_field, long default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1373.2109"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="690" x="2369" y="1379.4214">AddStringListOption(const std::string name, unsigned short&amp; num_marker, std::vector&lt;std::string&gt;&amp; option_field) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1386.0156"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="557" x="2369" y="1392.2261">AddStringOption(const std::string name, std::string&amp; option_field, std::string default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1398.8203"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="645" x="2369" y="1405.0308">AddUnsignedLongOption(const std::string name, unsigned long&amp; option_field, unsigned long default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1411.625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="661" x="2369" y="1417.8354">AddUnsignedShortOption(const std::string name, unsigned short&amp; option_field, unsigned short default_value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1424.4297"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="537" x="2369" y="1430.6401">InitLogger(spdlog::level::level_enum terminalLogLvl, spdlog::level::level_enum fileLogLvl) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1437.2344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="2369" y="1443.4448">SetConfigOptions(void) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1450.0391"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2369" y="1456.2495">SetConfigParsing(char case_filename) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1462.8438"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="2369" y="1469.0542">SetDefault(void) : void</text><ellipse cx="2360" cy="1478.6484" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="2369" y="1481.8589">SetNCells(unsigned nCells) : void</text><ellipse cx="2360" cy="1491.4531" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="2369" y="1494.6636">SetNQuadPoints(unsigned nq) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1501.2578"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="2369" y="1507.4683">SetOutput(void) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1514.0625"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="2369" y="1520.2729">SetPointersNull(void) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2357" y="1526.8672"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="2369" y="1533.0776">SetPostprocessing(void) : void</text><!--MD5=[c35c8d49414e6f5af323bf3b6ac77d2a]
class ElectronRT--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="163.2422" id="ElectronRT" style="stroke: #A80036; stroke-width: 1.5;" width="519" x="3774.5" y="1063"/><ellipse cx="3996.25" cy="1079" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3999.2188,1084.6406 Q3998.6406,1084.9375 3998,1085.0781 Q3997.3594,1085.2344 3996.6563,1085.2344 Q3994.1563,1085.2344 3992.8281,1083.5938 Q3991.5156,1081.9375 3991.5156,1078.8125 Q3991.5156,1075.6875 3992.8281,1074.0313 Q3994.1563,1072.375 3996.6563,1072.375 Q3997.3594,1072.375 3998,1072.5313 Q3998.6563,1072.6875 3999.2188,1072.9844 L3999.2188,1075.7031 Q3998.5938,1075.125 3998,1074.8594 Q3997.4063,1074.5781 3996.7813,1074.5781 Q3995.4375,1074.5781 3994.75,1075.6563 Q3994.0625,1076.7188 3994.0625,1078.8125 Q3994.0625,1080.9063 3994.75,1081.9844 Q3995.4375,1083.0469 3996.7813,1083.0469 Q3997.4063,1083.0469 3998,1082.7813 Q3998.5938,1082.5 3999.2188,1081.9219 L3999.2188,1084.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="4016.75" y="1083.1543">ElectronRT</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3775.5" x2="4292.5" y1="1095" y2="1095"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3775.5" x2="4292.5" y1="1103" y2="1103"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3782.5" y="1111"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3794.5" y="1117.2104">ElectronRT()</text><ellipse cx="3785.5" cy="1126.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="3794.5" y="1130.0151">ElectronRT(Config* settings, Mesh* mesh)</text><ellipse cx="3785.5" cy="1139.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="3794.5" y="1142.8198">~ElectronRT()</text><ellipse cx="3785.5" cy="1152.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="3794.5" y="1155.6245">GetScatteringXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="3785.5" cy="1165.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="3794.5" y="1168.4292">GetTotalXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="3785.5" cy="1178.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3794.5" y="1181.2339">SetupIC() : VectorVector</text><ellipse cx="3785.5" cy="1190.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="3794.5" y="1194.0386">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="3785.5" cy="1203.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="3794.5" y="1206.8433">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3782.5" y="1213.4375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="3794.5" y="1219.6479">LoadXSH20(std::string fileSigmaS, std::string fileSigmaT) : void</text><!--MD5=[60673fa564197751d7da20348890f532]
class ErrorMessages--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="86.4141" id="ErrorMessages" style="stroke: #A80036; stroke-width: 1.5;" width="457" x="2757.5" y="162"/><ellipse cx="2934.75" cy="178" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2937.7188,183.6406 Q2937.1406,183.9375 2936.5,184.0781 Q2935.8594,184.2344 2935.1563,184.2344 Q2932.6563,184.2344 2931.3281,182.5938 Q2930.0156,180.9375 2930.0156,177.8125 Q2930.0156,174.6875 2931.3281,173.0313 Q2932.6563,171.375 2935.1563,171.375 Q2935.8594,171.375 2936.5,171.5313 Q2937.1563,171.6875 2937.7188,171.9844 L2937.7188,174.7031 Q2937.0938,174.125 2936.5,173.8594 Q2935.9063,173.5781 2935.2813,173.5781 Q2933.9375,173.5781 2933.25,174.6563 Q2932.5625,175.7188 2932.5625,177.8125 Q2932.5625,179.9063 2933.25,180.9844 Q2933.9375,182.0469 2935.2813,182.0469 Q2935.9063,182.0469 2936.5,181.7813 Q2937.0938,181.5 2937.7188,180.9219 L2937.7188,183.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="94" x="2955.25" y="182.1543">ErrorMessages</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2758.5" x2="3213.5" y1="194" y2="194"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="2758.5" x2="3213.5" y1="202" y2="202"/><ellipse cx="2768.5" cy="213" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2777.5" y="216.2104">ErrorMessages()</text><ellipse cx="2768.5" cy="225.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="338" x="2777.5" y="229.0151">Error(std::string ErrorMsg, std::string FunctionName) : void</text><ellipse cx="2768.5" cy="238.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="431" x="2777.5" y="241.8198">OptionNotSetError(std::string OptionName, std::string FunctionName) : void</text><!--MD5=[041e745b51d1bd870567d4f38869c776]
class LaxFriedrichsFlux--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="86.4141" id="LaxFriedrichsFlux" style="stroke: #A80036; stroke-width: 1.5;" width="529" x="6616.5" y="1101.5"/><ellipse cx="6824.25" cy="1117.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6827.2188,1123.1406 Q6826.6406,1123.4375 6826,1123.5781 Q6825.3594,1123.7344 6824.6563,1123.7344 Q6822.1563,1123.7344 6820.8281,1122.0938 Q6819.5156,1120.4375 6819.5156,1117.3125 Q6819.5156,1114.1875 6820.8281,1112.5313 Q6822.1563,1110.875 6824.6563,1110.875 Q6825.3594,1110.875 6826,1111.0313 Q6826.6563,1111.1875 6827.2188,1111.4844 L6827.2188,1114.2031 Q6826.5938,1113.625 6826,1113.3594 Q6825.4063,1113.0781 6824.7813,1113.0781 Q6823.4375,1113.0781 6822.75,1114.1563 Q6822.0625,1115.2188 6822.0625,1117.3125 Q6822.0625,1119.4063 6822.75,1120.4844 Q6823.4375,1121.5469 6824.7813,1121.5469 Q6825.4063,1121.5469 6826,1121.2813 Q6826.5938,1121 6827.2188,1120.4219 L6827.2188,1123.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="105" x="6844.75" y="1121.6543">LaxFriedrichsFlux</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6617.5" x2="7144.5" y1="1133.5" y2="1133.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="6624.5" y="1141.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="67" x="6636.5" y="1147.7104">_dt : double</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6617.5" x2="7144.5" y1="1154.3047" y2="1154.3047"/><ellipse cx="6627.5" cy="1165.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="6636.5" y="1168.5151">LaxFriedrichsFlux(Config* settings)</text><ellipse cx="6627.5" cy="1178.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="6636.5" y="1181.3198">Flux(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><!--MD5=[f4d3065541eb930089a4e87cd9f8f8a6]
class LineSource--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="150.4375" id="LineSource" style="stroke: #A80036; stroke-width: 1.5;" width="519" x="4328.5" y="1069.5"/><ellipse cx="4549.25" cy="1085.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4552.2188,1091.1406 Q4551.6406,1091.4375 4551,1091.5781 Q4550.3594,1091.7344 4549.6563,1091.7344 Q4547.1563,1091.7344 4545.8281,1090.0938 Q4544.5156,1088.4375 4544.5156,1085.3125 Q4544.5156,1082.1875 4545.8281,1080.5313 Q4547.1563,1078.875 4549.6563,1078.875 Q4550.3594,1078.875 4551,1079.0313 Q4551.6563,1079.1875 4552.2188,1079.4844 L4552.2188,1082.2031 Q4551.5938,1081.625 4551,1081.3594 Q4550.4063,1081.0781 4549.7813,1081.0781 Q4548.4375,1081.0781 4547.75,1082.1563 Q4547.0625,1083.2188 4547.0625,1085.3125 Q4547.0625,1087.4063 4547.75,1088.4844 Q4548.4375,1089.5469 4549.7813,1089.5469 Q4550.4063,1089.5469 4551,1089.2813 Q4551.5938,1089 4552.2188,1088.4219 L4552.2188,1091.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="69" x="4569.75" y="1089.6543">LineSource</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4329.5" x2="4846.5" y1="1101.5" y2="1101.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4329.5" x2="4846.5" y1="1109.5" y2="1109.5"/><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4336.5" y="1117.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="4348.5" y="1123.7104">LineSource()</text><ellipse cx="4339.5" cy="1133.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="4348.5" y="1136.5151">LineSource(Config* settings, Mesh* mesh)</text><ellipse cx="4339.5" cy="1146.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="4348.5" y="1149.3198">~LineSource()</text><ellipse cx="4339.5" cy="1158.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="4348.5" y="1162.1245">GetScatteringXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="4339.5" cy="1171.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="4348.5" y="1174.9292">GetTotalXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="4339.5" cy="1184.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="4348.5" y="1187.7339">SetupIC() : VectorVector</text><ellipse cx="4339.5" cy="1197.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="4348.5" y="1200.5386">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="4339.5" cy="1210.1328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="4348.5" y="1213.3433">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><!--MD5=[49b4333bed3a745cc53311fcf54bbfcc]
class Mesh--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="534.5781" id="Mesh" style="stroke: #A80036; stroke-width: 1.5;" width="934" x="5647" y="877"/><ellipse cx="6093.25" cy="893" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6096.2188,898.6406 Q6095.6406,898.9375 6095,899.0781 Q6094.3594,899.2344 6093.6563,899.2344 Q6091.1563,899.2344 6089.8281,897.5938 Q6088.5156,895.9375 6088.5156,892.8125 Q6088.5156,889.6875 6089.8281,888.0313 Q6091.1563,886.375 6093.6563,886.375 Q6094.3594,886.375 6095,886.5313 Q6095.6563,886.6875 6096.2188,886.9844 L6096.2188,889.7031 Q6095.5938,889.125 6095,888.8594 Q6094.4063,888.5781 6093.7813,888.5781 Q6092.4375,888.5781 6091.75,889.6563 Q6091.0625,890.7188 6091.0625,892.8125 Q6091.0625,894.9063 6091.75,895.9844 Q6092.4375,897.0469 6093.7813,897.0469 Q6094.4063,897.0469 6095,896.7813 Q6095.5938,896.5 6096.2188,895.9219 L6096.2188,898.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="33" x="6113.75" y="897.1543">Mesh</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5648" x2="6580" y1="909" y2="909"/><polygon fill="none" points="5658,915,5662,919,5658,923,5654,919" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="5667" y="923.2104">_nodeNeighbors : blaze::CompressedMatrix&lt;bool&gt;</text><polygon fill="none" points="5658,927.8047,5662,931.8047,5658,935.8047,5654,931.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="5667" y="936.0151">_dim : const unsigned</text><polygon fill="none" points="5658,940.6094,5662,944.6094,5658,948.6094,5654,944.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="5667" y="948.8198">_ghostCellID : const unsigned</text><polygon fill="none" points="5658,953.4141,5662,957.4141,5658,961.4141,5654,957.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="5667" y="961.6245">_numBoundaries : const unsigned</text><polygon fill="none" points="5658,966.2188,5662,970.2188,5658,974.2188,5654,970.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="5667" y="974.4292">_numCells : const unsigned</text><polygon fill="none" points="5658,979.0234,5662,983.0234,5658,987.0234,5654,983.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="5667" y="987.2339">_numNodes : const unsigned</text><polygon fill="none" points="5658,991.8281,5662,995.8281,5658,999.8281,5654,995.8281" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="5667" y="1000.0386">_numNodesPerCell : const unsigned</text><polygon fill="none" points="5658,1004.6328,5662,1008.6328,5658,1012.6328,5654,1008.6328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="5667" y="1012.8433">_log : std::shared_ptr&lt;spdlog::logger&gt;</text><polygon fill="none" points="5658,1017.4375,5662,1021.4375,5658,1025.4375,5654,1021.4375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="5667" y="1025.6479">_cellBoundaryTypes : std::vector&lt;BOUNDARY_TYPE&gt;</text><polygon fill="none" points="5658,1030.2422,5662,1034.2422,5658,1038.2422,5654,1034.2422" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="5667" y="1038.4526">_cellMidPoints : std::vector&lt;Vector&gt;</text><polygon fill="none" points="5658,1043.0469,5662,1047.0469,5658,1051.0469,5654,1047.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="5667" y="1051.2573">_nodes : std::vector&lt;Vector&gt;</text><polygon fill="none" points="5658,1055.8516,5662,1059.8516,5658,1063.8516,5654,1059.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="5667" y="1064.062">_cellAreas : std::vector&lt;double&gt;</text><polygon fill="none" points="5658,1068.6563,5662,1072.6563,5658,1076.6563,5654,1072.6563" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="5667" y="1076.8667">_boundaries : std::vector&lt;std::pair&lt;BOUNDARY_TYPE, std::vector&lt;unsigned&gt; &gt; &gt;</text><polygon fill="none" points="5658,1081.4609,5662,1085.4609,5658,1089.4609,5654,1085.4609" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="5667" y="1089.6714">_cellNormals : std::vector&lt;std::vector&lt;Vector&gt; &gt;</text><polygon fill="none" points="5658,1094.2656,5662,1098.2656,5658,1102.2656,5654,1098.2656" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="5667" y="1102.4761">_cellNeighbors : std::vector&lt;std::vector&lt;unsigned&gt; &gt;</text><polygon fill="none" points="5658,1107.0703,5662,1111.0703,5658,1115.0703,5654,1111.0703" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="5667" y="1115.2808">_cells : std::vector&lt;std::vector&lt;unsigned&gt; &gt;</text><polygon fill="none" points="5658,1119.875,5662,1123.875,5658,1127.875,5654,1123.875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="5667" y="1128.0854">_colors : std::vector&lt;unsigned&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="5648" x2="6580" y1="1134.6797" y2="1134.6797"/><ellipse cx="5658" cy="1145.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="38" x="5667" y="1148.8901">Mesh()</text><ellipse cx="5658" cy="1158.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="908" x="5667" y="1161.6948">Mesh(std::vector&lt;Vector&gt; nodes, std::vector&lt;std::vector&lt;unsigned&gt; &gt; cells, std::vector&lt;std::pair&lt;BOUNDARY_TYPE, std::vector&lt;unsigned&gt; &gt; &gt; boundaries)</text><ellipse cx="5658" cy="1171.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="47" x="5667" y="1174.4995">~Mesh()</text><polygon fill="#FFFF44" points="5658,1179.0938,5662,1183.0938,5658,1187.0938,5654,1183.0938" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="631" x="5667" y="1187.3042">ComputeOutwardFacingNormal(const Vector&amp; nodeA, const Vector&amp; nodeB, const Vector&amp; cellCenter) : Vector</text><ellipse cx="5658" cy="1196.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="5667" y="1200.1089">GetBoundaryTypes() : std::vector&lt;BOUNDARY_TYPE&gt;&amp; {query}</text><ellipse cx="5658" cy="1209.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="5667" y="1212.9136">GetCellMidPoints() : std::vector&lt;Vector&gt;&amp; {query}</text><ellipse cx="5658" cy="1222.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="251" x="5667" y="1225.7183">GetNodes() : std::vector&lt;Vector&gt;&amp; {query}</text><ellipse cx="5658" cy="1235.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="5667" y="1238.5229">GetCellAreas() : std::vector&lt;double&gt;&amp; {query}</text><ellipse cx="5658" cy="1248.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="346" x="5667" y="1251.3276">GetNormals() : std::vector&lt;std::vector&lt;Vector&gt; &gt;&amp; {query}</text><ellipse cx="5658" cy="1260.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="5667" y="1264.1323">GetCells() : std::vector&lt;std::vector&lt;unsigned&gt; &gt;&amp; {query}</text><ellipse cx="5658" cy="1273.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="379" x="5667" y="1276.937">GetNeighbours() : std::vector&lt;std::vector&lt;unsigned&gt; &gt;&amp; {query}</text><ellipse cx="5658" cy="1286.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="5667" y="1289.7417">GetPartitionIDs() : std::vector&lt;unsigned&gt;&amp; {query}</text><ellipse cx="5658" cy="1299.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="5667" y="1302.5464">GetDim() : unsigned {query}</text><ellipse cx="5658" cy="1312.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="5667" y="1315.3511">GetNumCells() : unsigned {query}</text><ellipse cx="5658" cy="1324.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="5667" y="1328.1558">GetNumNodes() : unsigned {query}</text><ellipse cx="5658" cy="1337.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="244" x="5667" y="1340.9604">GetNumNodesPerCell() : unsigned {query}</text><polygon fill="#FFFF44" points="5658,1345.5547,5662,1349.5547,5658,1353.5547,5654,1349.5547" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="5667" y="1353.7651">ComputeCellAreas() : void</text><polygon fill="#FFFF44" points="5658,1358.3594,5662,1362.3594,5658,1366.3594,5654,1362.3594" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="5667" y="1366.5698">ComputeCellMidpoints() : void</text><polygon fill="#FFFF44" points="5658,1371.1641,5662,1375.1641,5658,1379.1641,5654,1375.1641" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="5667" y="1379.3745">ComputeConnectivity() : void</text><polygon fill="#FFFF44" points="5658,1383.9688,5662,1387.9688,5658,1391.9688,5654,1387.9688" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="5667" y="1392.1792">ComputePartitioning() : void</text><ellipse cx="5658" cy="1401.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="675" x="5667" y="1404.9839">ComputeSlopes(unsigned nq, VectorVector&amp; psiDerX, VectorVector&amp; psiDerY, const VectorVector&amp; psi) : void {query}</text><!--MD5=[63c6af204b72495afb767f03716ed6bb]
class NumericalFlux--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="86.4141" id="NumericalFlux" style="stroke: #A80036; stroke-width: 1.5;" width="528" x="6167" y="532.5"/><ellipse cx="6383.25" cy="548.5" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6383.3594,543.8438 L6382.2031,548.9219 L6384.5313,548.9219 L6383.3594,543.8438 Z M6381.875,541.6094 L6384.8594,541.6094 L6388.2188,554 L6385.7656,554 L6385,550.9375 L6381.7188,550.9375 L6380.9688,554 L6378.5313,554 L6381.875,541.6094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="87" x="6403.75" y="552.6543">NumericalFlux</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6168" x2="6694" y1="564.5" y2="564.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="6168" x2="6694" y1="572.5" y2="572.5"/><ellipse cx="6178" cy="583.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="6187" y="586.7104">NumericalFlux(Config* settings)</text><ellipse cx="6178" cy="596.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="235" x="6187" y="599.5151">Create(Config* settings) : NumericalFlux*</text><ellipse cx="6178" cy="609.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="502" x="6187" y="612.3198">Flux(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><!--MD5=[57035cf667d2c1b3f498afd432858e1a]
class OptionBase--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="150.4375" id="OptionBase" style="stroke: #A80036; stroke-width: 1.5;" width="733" x="2400.5" y="1600"/><ellipse cx="2727.75" cy="1616" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2727.8594,1611.3438 L2726.7031,1616.4219 L2729.0313,1616.4219 L2727.8594,1611.3438 Z M2726.375,1609.1094 L2729.3594,1609.1094 L2732.7188,1621.5 L2730.2656,1621.5 L2729.5,1618.4375 L2726.2188,1618.4375 L2725.4688,1621.5 L2723.0313,1621.5 L2726.375,1609.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="70" x="2748.25" y="1620.1543">OptionBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2401.5" x2="3132.5" y1="1632" y2="1632"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2408.5" y="1640"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="2420.5" y="1646.2104">_value : std::vector&lt;std::string&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2401.5" x2="3132.5" y1="1652.8047" y2="1652.8047"/><ellipse cx="2411.5" cy="1663.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="2420.5" y="1667.0151">OptionBase()</text><ellipse cx="2411.5" cy="1676.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="82" x="2420.5" y="1679.8198">~OptionBase()</text><ellipse cx="2411.5" cy="1689.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="2420.5" y="1692.6245">SetValue(std::vector&lt;std::string&gt; value) : std::string</text><ellipse cx="2411.5" cy="1702.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="609" x="2420.5" y="1705.4292">badValue(std::vector&lt;std::string&gt;&amp; option_value, std::string type_id, std::string option_name) : std::string</text><ellipse cx="2411.5" cy="1715.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="707" x="2420.5" y="1718.2339">optionCheckMultipleValues(std::vector&lt;std::string&gt;&amp; option_value, std::string type_id, std::string option_name) : std::string</text><ellipse cx="2411.5" cy="1727.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="2420.5" y="1731.0386">GetValue() : std::vector&lt;std::string&gt;</text><ellipse cx="2411.5" cy="1740.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="102" x="2420.5" y="1743.8433">SetDefault() : void</text><!--MD5=[08673ca9a8f38161e36040eb5f4c9286]
class OptionBool--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="137.6328" id="OptionBool" style="stroke: #A80036; stroke-width: 1.5;" width="484" x="671" y="1816"/><ellipse cx="875.25" cy="1832" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M875.3594,1827.3438 L874.2031,1832.4219 L876.5313,1832.4219 L875.3594,1827.3438 Z M873.875,1825.1094 L876.8594,1825.1094 L880.2188,1837.5 L877.7656,1837.5 L877,1834.4375 L873.7188,1834.4375 L872.9688,1837.5 L870.5313,1837.5 L873.875,1825.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="67" x="895.75" y="1836.1543">OptionBool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="672" x2="1154" y1="1848" y2="1848"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="679" y="1856"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="691" y="1862.2104">_def : bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="679" y="1868.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="691" y="1875.0151">_field : bool&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="679" y="1881.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="691" y="1887.8198">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="672" x2="1154" y1="1894.4141" y2="1894.4141"/><ellipse cx="682" cy="1905.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="458" x="691" y="1908.6245">OptionBool(std::string option_field_name, bool&amp; option_field, bool default_value)</text><ellipse cx="682" cy="1918.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="691" y="1921.4292">~OptionBool()</text><ellipse cx="682" cy="1931.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="691" y="1934.2339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="682" cy="1943.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="691" y="1947.0386">SetDefault() : void</text><!--MD5=[4c0d27bbf2263f91bc2f6695bd30d24a]
class OptionDouble--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="137.6328" id="OptionDouble" style="stroke: #A80036; stroke-width: 1.5;" width="526" x="1190" y="1816"/><ellipse cx="1406.75" cy="1832" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1406.8594,1827.3438 L1405.7031,1832.4219 L1408.0313,1832.4219 L1406.8594,1827.3438 Z M1405.375,1825.1094 L1408.3594,1825.1094 L1411.7188,1837.5 L1409.2656,1837.5 L1408.5,1834.4375 L1405.2188,1834.4375 L1404.4688,1837.5 L1402.0313,1837.5 L1405.375,1825.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="84" x="1427.25" y="1836.1543">OptionDouble</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1191" x2="1715" y1="1848" y2="1848"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1198" y="1856"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="1210" y="1862.2104">_def : double</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1198" y="1868.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="1210" y="1875.0151">_field : double&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1198" y="1881.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1210" y="1887.8198">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1191" x2="1715" y1="1894.4141" y2="1894.4141"/><ellipse cx="1201" cy="1905.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="500" x="1210" y="1908.6245">OptionDouble(std::string option_field_name, double&amp; option_field, double default_value)</text><ellipse cx="1201" cy="1918.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="1210" y="1921.4292">~OptionDouble()</text><ellipse cx="1201" cy="1931.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1210" y="1934.2339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="1201" cy="1943.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1210" y="1947.0386">SetDefault() : void</text><!--MD5=[144a480d156acaecaa75bd1afa651596]
class OptionEnum--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="150.4375" id="OptionEnum" style="stroke: #A80036; stroke-width: 1.5;" width="754" x="1751" y="1810"/><ellipse cx="2006.25" cy="1826" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2006.3594,1821.3438 L2005.2031,1826.4219 L2007.5313,1826.4219 L2006.3594,1821.3438 Z M2004.875,1819.1094 L2007.8594,1819.1094 L2011.2188,1831.5 L2008.7656,1831.5 L2008,1828.4375 L2004.7188,1828.4375 L2003.9688,1831.5 L2001.5313,1831.5 L2004.875,1819.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="75" x="2026.75" y="1830.1543">OptionEnum</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="158" x="2350" y="1807"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="156" x="2351" y="1819.1387">template &lt;class Tenum&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1752" x2="2504" y1="1842" y2="1842"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1759" y="1850"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="75" x="1771" y="1856.2104">_def : Tenum</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1759" y="1862.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="91" x="1771" y="1869.0151">_field : Tenum&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1759" y="1875.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="1771" y="1881.8198">_map : std::map&lt;std::string, Tenum&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1759" y="1888.4141"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="1771" y="1894.6245">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1752" x2="2504" y1="1901.2188" y2="1901.2188"/><ellipse cx="1762" cy="1912.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="728" x="1771" y="1915.4292">OptionEnum(std::string option_field_name, const std::map&lt;std::string, Tenum&gt; m, Tenum&amp; option_field, Tenum default_value)</text><ellipse cx="1762" cy="1925.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="1771" y="1928.2339">~OptionEnum()</text><ellipse cx="1762" cy="1937.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="1771" y="1941.0386">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="1762" cy="1950.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1771" y="1953.8433">SetDefault() : void</text><!--MD5=[312548e8953d9a8be8e7376e3d9dc933]
class OptionInt--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="137.6328" id="OptionInt" style="stroke: #A80036; stroke-width: 1.5;" width="453" x="2540.5" y="1816"/><ellipse cx="2734.25" cy="1832" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2734.3594,1827.3438 L2733.2031,1832.4219 L2735.5313,1832.4219 L2734.3594,1827.3438 Z M2732.875,1825.1094 L2735.8594,1825.1094 L2739.2188,1837.5 L2736.7656,1837.5 L2736,1834.4375 L2732.7188,1834.4375 L2731.9688,1837.5 L2729.5313,1837.5 L2732.875,1825.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="57" x="2754.75" y="1836.1543">OptionInt</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2541.5" x2="2992.5" y1="1848" y2="1848"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2548.5" y="1856"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="2560.5" y="1862.2104">_def : int</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2548.5" y="1868.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="66" x="2560.5" y="1875.0151">_field : int&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2548.5" y="1881.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2560.5" y="1887.8198">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2541.5" x2="2992.5" y1="1894.4141" y2="1894.4141"/><ellipse cx="2551.5" cy="1905.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="427" x="2560.5" y="1908.6245">OptionInt(std::string option_field_name, int&amp; option_field, int default_value)</text><ellipse cx="2551.5" cy="1918.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="2560.5" y="1921.4292">~OptionInt()</text><ellipse cx="2551.5" cy="1931.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="2560.5" y="1934.2339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="2551.5" cy="1943.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2560.5" y="1947.0386">SetDefault() : void</text><!--MD5=[5a6021cdd87015f95855dfa5482c4968]
class OptionLong--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="137.6328" id="OptionLong" style="stroke: #A80036; stroke-width: 1.5;" width="486" x="3029" y="1816"/><ellipse cx="3232.25" cy="1832" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3232.3594,1827.3438 L3231.2031,1832.4219 L3233.5313,1832.4219 L3232.3594,1827.3438 Z M3230.875,1825.1094 L3233.8594,1825.1094 L3237.2188,1837.5 L3234.7656,1837.5 L3234,1834.4375 L3230.7188,1834.4375 L3229.9688,1837.5 L3227.5313,1837.5 L3230.875,1825.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="71" x="3252.75" y="1836.1543">OptionLong</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3030" x2="3514" y1="1848" y2="1848"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3037" y="1856"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="60" x="3049" y="1862.2104">_def : long</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3037" y="1868.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="3049" y="1875.0151">_field : long&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3037" y="1881.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3049" y="1887.8198">_name : std::string</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3030" x2="3514" y1="1894.4141" y2="1894.4141"/><ellipse cx="3040" cy="1905.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="460" x="3049" y="1908.6245">OptionLong(std::string option_field_name, long&amp; option_field, long default_value)</text><ellipse cx="3040" cy="1918.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="3049" y="1921.4292">~OptionLong()</text><ellipse cx="3040" cy="1931.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="3049" y="1934.2339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="3040" cy="1943.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="3049" y="1947.0386">SetDefault() : void</text><!--MD5=[bf56439615fff4baebef5224d94f191f]
class OptionString--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="137.6328" id="OptionString" style="stroke: #A80036; stroke-width: 1.5;" width="563" x="3550.5" y="1816"/><ellipse cx="3789.25" cy="1832" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3789.3594,1827.3438 L3788.2031,1832.4219 L3790.5313,1832.4219 L3789.3594,1827.3438 Z M3787.875,1825.1094 L3790.8594,1825.1094 L3794.2188,1837.5 L3791.7656,1837.5 L3791,1834.4375 L3787.7188,1834.4375 L3786.9688,1837.5 L3784.5313,1837.5 L3787.875,1825.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="77" x="3809.75" y="1836.1543">OptionString</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3551.5" x2="4112.5" y1="1848" y2="1848"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3558.5" y="1856"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="3570.5" y="1862.2104">_def : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3558.5" y="1868.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="3570.5" y="1875.0151">_name : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3558.5" y="1881.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="3570.5" y="1887.8198">_field : std::string&amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3551.5" x2="4112.5" y1="1894.4141" y2="1894.4141"/><ellipse cx="3561.5" cy="1905.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="537" x="3570.5" y="1908.6245">OptionString(std::string option_field_name, std::string&amp; option_field, std::string default_value)</text><ellipse cx="3561.5" cy="1918.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="88" x="3570.5" y="1921.4292">~OptionString()</text><ellipse cx="3561.5" cy="1931.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="3570.5" y="1934.2339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="3561.5" cy="1943.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="3570.5" y="1947.0386">SetDefault() : void</text><!--MD5=[38769d96d097cc3e9dcdba9c5b2e9fed]
class OptionStringList--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="137.6328" id="OptionStringList" style="stroke: #A80036; stroke-width: 1.5;" width="669" x="4148.5" y="1816"/><ellipse cx="4429.75" cy="1832" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4429.8594,1827.3438 L4428.7031,1832.4219 L4431.0313,1832.4219 L4429.8594,1827.3438 Z M4428.375,1825.1094 L4431.3594,1825.1094 L4434.7188,1837.5 L4432.2656,1837.5 L4431.5,1834.4375 L4428.2188,1834.4375 L4427.4688,1837.5 L4425.0313,1837.5 L4428.375,1825.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="98" x="4450.25" y="1836.1543">OptionStringList</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4149.5" x2="4816.5" y1="1848" y2="1848"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4156.5" y="1856"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="4168.5" y="1862.2104">_name : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4156.5" y="1868.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="4168.5" y="1875.0151">_field : std::vector&lt;std::string&gt;&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4156.5" y="1881.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="4168.5" y="1887.8198">_size : unsigned short&amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4149.5" x2="4816.5" y1="1894.4141" y2="1894.4141"/><ellipse cx="4159.5" cy="1905.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="643" x="4168.5" y="1908.6245">OptionStringList(std::string option_field_name, unsigned short&amp; list_size, std::vector&lt;std::string&gt;&amp; option_field)</text><ellipse cx="4159.5" cy="1918.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="4168.5" y="1921.4292">~OptionStringList()</text><ellipse cx="4159.5" cy="1931.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="4168.5" y="1934.2339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="4159.5" cy="1943.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="4168.5" y="1947.0386">SetDefault() : void</text><!--MD5=[1768df87b6b1b7f59e02793f187f93bb]
class OptionULong--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="137.6328" id="OptionULong" style="stroke: #A80036; stroke-width: 1.5;" width="606" x="4853" y="1816"/><ellipse cx="5111.75" cy="1832" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5111.8594,1827.3438 L5110.7031,1832.4219 L5113.0313,1832.4219 L5111.8594,1827.3438 Z M5110.375,1825.1094 L5113.3594,1825.1094 L5116.7188,1837.5 L5114.2656,1837.5 L5113.5,1834.4375 L5110.2188,1834.4375 L5109.4688,1837.5 L5107.0313,1837.5 L5110.375,1825.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="80" x="5132.25" y="1836.1543">OptionULong</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4854" x2="5458" y1="1848" y2="1848"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4861" y="1856"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="4873" y="1862.2104">_name : std::string</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4861" y="1868.8047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="4873" y="1875.0151">_def : unsigned long</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4861" y="1881.6094"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="4873" y="1887.8198">_field : unsigned long&amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4854" x2="5458" y1="1894.4141" y2="1894.4141"/><ellipse cx="4864" cy="1905.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="580" x="4873" y="1908.6245">OptionULong(std::string option_field_name, unsigned long&amp; option_field, unsigned long default_value)</text><ellipse cx="4864" cy="1918.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="4873" y="1921.4292">~OptionULong()</text><ellipse cx="4864" cy="1931.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="342" x="4873" y="1934.2339">SetValue(std::vector&lt;std::string&gt; option_value) : std::string</text><ellipse cx="4864" cy="1943.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="4873" y="1947.0386">SetDefault() : void</text><!--MD5=[b78e42fe1f33f5c4bf0e37a39b0075a9]
class Physics--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="150.4375" id="Physics" style="stroke: #A80036; stroke-width: 1.5;" width="729" x="4882.5" y="1069.5"/><ellipse cx="5219.75" cy="1085.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M5222.7188,1091.1406 Q5222.1406,1091.4375 5221.5,1091.5781 Q5220.8594,1091.7344 5220.1563,1091.7344 Q5217.6563,1091.7344 5216.3281,1090.0938 Q5215.0156,1088.4375 5215.0156,1085.3125 Q5215.0156,1082.1875 5216.3281,1080.5313 Q5217.6563,1078.875 5220.1563,1078.875 Q5220.8594,1078.875 5221.5,1079.0313 Q5222.1563,1079.1875 5222.7188,1079.4844 L5222.7188,1082.2031 Q5222.0938,1081.625 5221.5,1081.3594 Q5220.9063,1081.0781 5220.2813,1081.0781 Q5218.9375,1081.0781 5218.25,1082.1563 Q5217.5625,1083.2188 5217.5625,1085.3125 Q5217.5625,1087.4063 5218.25,1088.4844 Q5218.9375,1089.5469 5220.2813,1089.5469 Q5220.9063,1089.5469 5221.5,1089.2813 Q5222.0938,1089 5222.7188,1088.4219 L5222.7188,1091.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="46" x="5240.25" y="1089.6543">Physics</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4883.5" x2="5610.5" y1="1101.5" y2="1101.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4890.5" y="1109.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="4902.5" y="1115.7104">_totalxsH2O : Matrix</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4890.5" y="1122.3047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="4902.5" y="1128.5151">_xsH2O : Matrix</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4883.5" x2="5610.5" y1="1135.1094" y2="1135.1094"/><ellipse cx="4893.5" cy="1146.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="4902.5" y="1149.3198">Physics(Config* settings)</text><ellipse cx="4893.5" cy="1158.9141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="199" x="4902.5" y="1162.1245">Create(Config* settings) : Physics*</text><ellipse cx="4893.5" cy="1171.7188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="703" x="4902.5" y="1174.9292">GetScatteringXS(std::vector&lt;double&gt; energies, std::vector&lt;double&gt; density, std::vector&lt;double&gt; Omegas) : VectorVector</text><ellipse cx="4893.5" cy="1184.5234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="528" x="4902.5" y="1187.7339">GetStoppingPower(std::vector&lt;double&gt; energies, std::vector&lt;double&gt; sH2O) : VectorVector</text><ellipse cx="4893.5" cy="1197.3281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="496" x="4902.5" y="1200.5386">GetTotalXS(std::vector&lt;double&gt; energies, std::vector&lt;double&gt; density) : VectorVector</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="4890.5" y="1207.1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="4902.5" y="1213.3433">LoadXSH2O(std::string fileName1, std::string fileName2) : void</text><!--MD5=[aeda3338894f4a84d351a17291d2f6fe]
class ProblemBase--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="227.2656" id="ProblemBase" style="stroke: #A80036; stroke-width: 1.5;" width="518" x="4329" y="462"/><ellipse cx="4543.75" cy="478" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4543.8594,473.3438 L4542.7031,478.4219 L4545.0313,478.4219 L4543.8594,473.3438 Z M4542.375,471.1094 L4545.3594,471.1094 L4548.7188,483.5 L4546.2656,483.5 L4545.5,480.4375 L4542.2188,480.4375 L4541.4688,483.5 L4539.0313,483.5 L4542.375,471.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="80" x="4564.25" y="482.1543">ProblemBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4330" x2="4846" y1="494" y2="494"/><polygon fill="none" points="4340,500,4344,504,4340,508,4336,504" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="4349" y="508.2104">_settings : Config*</text><polygon fill="none" points="4340,512.8047,4344,516.8047,4340,520.8047,4336,516.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="4349" y="521.0151">_mesh : Mesh*</text><polygon fill="none" points="4340,525.6094,4344,529.6094,4340,533.6094,4336,529.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="4349" y="533.8198">_physics : Physics*</text><polygon fill="none" points="4340,538.4141,4344,542.4141,4340,546.4141,4336,542.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="4349" y="546.6245">_density : std::vector&lt;double&gt;</text><polygon fill="none" points="4340,551.2188,4344,555.2188,4340,559.2188,4336,555.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="219" x="4349" y="559.4292">_stoppingPower : std::vector&lt;double&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4330" x2="4846" y1="566.0234" y2="566.0234"/><ellipse cx="4340" cy="577.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="4349" y="580.2339">ProblemBase(Config* settings, Mesh* mesh)</text><polygon fill="#FFFF44" points="4340,584.8281,4344,588.8281,4340,592.8281,4336,588.8281" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="4349" y="593.0386">ProblemBase()</text><ellipse cx="4340" cy="602.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="4349" y="605.8433">~ProblemBase()</text><ellipse cx="4340" cy="615.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="312" x="4349" y="618.6479">Create(Config* settings, Mesh* mesh) : ProblemBase*</text><ellipse cx="4340" cy="628.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="399" x="4349" y="631.4526">GetScatteringXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="4340" cy="641.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="370" x="4349" y="644.2573">GetTotalXS(const std::vector&lt;double&gt;&amp; energies) : VectorVector</text><ellipse cx="4340" cy="653.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="137" x="4349" y="657.062">SetupIC() : VectorVector</text><ellipse cx="4340" cy="666.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="492" x="4349" y="669.8667">GetExternalSource(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;VectorVector&gt;</text><ellipse cx="4340" cy="679.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="454" x="4349" y="682.6714">GetStoppingPower(const std::vector&lt;double&gt;&amp; energies) : std::vector&lt;double&gt;</text><!--MD5=[296293fbdb23d0a6b21645666f72f612]
class QDummy--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="124.8281" id="QDummy" style="stroke: #A80036; stroke-width: 1.5;" width="188" x="7378" y="513"/><ellipse cx="7440.75" cy="529" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7443.7188,534.6406 Q7443.1406,534.9375 7442.5,535.0781 Q7441.8594,535.2344 7441.1563,535.2344 Q7438.6563,535.2344 7437.3281,533.5938 Q7436.0156,531.9375 7436.0156,528.8125 Q7436.0156,525.6875 7437.3281,524.0313 Q7438.6563,522.375 7441.1563,522.375 Q7441.8594,522.375 7442.5,522.5313 Q7443.1563,522.6875 7443.7188,522.9844 L7443.7188,525.7031 Q7443.0938,525.125 7442.5,524.8594 Q7441.9063,524.5781 7441.2813,524.5781 Q7439.9375,524.5781 7439.25,525.6563 Q7438.5625,526.7188 7438.5625,528.8125 Q7438.5625,530.9063 7439.25,531.9844 Q7439.9375,533.0469 7441.2813,533.0469 Q7441.9063,533.0469 7442.5,532.7813 Q7443.0938,532.5 7443.7188,531.9219 L7443.7188,534.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="54" x="7461.25" y="533.1543">QDummy</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7379" x2="7565" y1="545" y2="545"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7379" x2="7565" y1="553" y2="553"/><ellipse cx="7389" cy="564" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="7398" y="567.2104">QDummy(unsigned order)</text><ellipse cx="7389" cy="576.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="69" x="7398" y="580.0151">~QDummy()</text><ellipse cx="7389" cy="589.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="7398" y="592.8198">SetConnectivity() : void</text><ellipse cx="7389" cy="602.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="7398" y="605.6245">SetName() : void</text><ellipse cx="7389" cy="615.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="7398" y="618.4292">SetNq() : void</text><ellipse cx="7389" cy="628.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="7398" y="631.2339">SetPointsAndWeights() : void</text><!--MD5=[43fb1c5f2053cc224ff05d9a3a1d1cbc]
class QGaussLegendreTensorized--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="124.8281" id="QGaussLegendreTensorized" style="stroke: #A80036; stroke-width: 1.5;" width="282" x="7601" y="513"/><ellipse cx="7650.75" cy="529" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7653.7188,534.6406 Q7653.1406,534.9375 7652.5,535.0781 Q7651.8594,535.2344 7651.1563,535.2344 Q7648.6563,535.2344 7647.3281,533.5938 Q7646.0156,531.9375 7646.0156,528.8125 Q7646.0156,525.6875 7647.3281,524.0313 Q7648.6563,522.375 7651.1563,522.375 Q7651.8594,522.375 7652.5,522.5313 Q7653.1563,522.6875 7653.7188,522.9844 L7653.7188,525.7031 Q7653.0938,525.125 7652.5,524.8594 Q7651.9063,524.5781 7651.2813,524.5781 Q7649.9375,524.5781 7649.25,525.6563 Q7648.5625,526.7188 7648.5625,528.8125 Q7648.5625,530.9063 7649.25,531.9844 Q7649.9375,533.0469 7651.2813,533.0469 Q7651.9063,533.0469 7652.5,532.7813 Q7653.0938,532.5 7653.7188,531.9219 L7653.7188,534.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="174" x="7671.25" y="533.1543">QGaussLegendreTensorized</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7602" x2="7882" y1="545" y2="545"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7602" x2="7882" y1="553" y2="553"/><ellipse cx="7612" cy="564" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="7621" y="567.2104">QGaussLegendreTensorized(unsigned order)</text><ellipse cx="7612" cy="576.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="7621" y="580.0151">~QGaussLegendreTensorized()</text><ellipse cx="7612" cy="589.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="7621" y="592.8198">SetConnectivity() : void</text><ellipse cx="7612" cy="602.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="7621" y="605.6245">SetName() : void</text><ellipse cx="7612" cy="615.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="7621" y="618.4292">SetNq() : void</text><ellipse cx="7612" cy="628.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="7621" y="631.2339">SetPointsAndWeights() : void</text><!--MD5=[ac9a63b98acee02cdcc7ea962cb05a73]
class QLDFESA--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="124.8281" id="QLDFESA" style="stroke: #A80036; stroke-width: 1.5;" width="196" x="7745" y="1082"/><ellipse cx="7811.25" cy="1098" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7814.2188,1103.6406 Q7813.6406,1103.9375 7813,1104.0781 Q7812.3594,1104.2344 7811.6563,1104.2344 Q7809.1563,1104.2344 7807.8281,1102.5938 Q7806.5156,1100.9375 7806.5156,1097.8125 Q7806.5156,1094.6875 7807.8281,1093.0313 Q7809.1563,1091.375 7811.6563,1091.375 Q7812.3594,1091.375 7813,1091.5313 Q7813.6563,1091.6875 7814.2188,1091.9844 L7814.2188,1094.7031 Q7813.5938,1094.125 7813,1093.8594 Q7812.4063,1093.5781 7811.7813,1093.5781 Q7810.4375,1093.5781 7809.75,1094.6563 Q7809.0625,1095.7188 7809.0625,1097.8125 Q7809.0625,1099.9063 7809.75,1100.9844 Q7810.4375,1102.0469 7811.7813,1102.0469 Q7812.4063,1102.0469 7813,1101.7813 Q7813.5938,1101.5 7814.2188,1100.9219 L7814.2188,1103.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="7831.75" y="1102.1543">QLDFESA</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7746" x2="7940" y1="1114" y2="1114"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7746" x2="7940" y1="1122" y2="1122"/><ellipse cx="7756" cy="1133" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="7765" y="1136.2104">QLDFESA(unsigned order)</text><ellipse cx="7756" cy="1145.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="7765" y="1149.0151">~QLDFESA()</text><ellipse cx="7756" cy="1158.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="7765" y="1161.8198">GetLookupTable() : std::string</text><ellipse cx="7756" cy="1171.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="7765" y="1174.6245">SetAvailOrders() : void</text><ellipse cx="7756" cy="1184.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="7765" y="1187.4292">SetConnectivity() : void</text><ellipse cx="7756" cy="1197.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="7765" y="1200.2339">SetName() : void</text><!--MD5=[dc3edd32582cc9c24358ef5ad5d35bc3]
class QLebedev--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="124.8281" id="QLebedev" style="stroke: #A80036; stroke-width: 1.5;" width="196" x="7976" y="1082"/><ellipse cx="8039.25" cy="1098" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8042.2188,1103.6406 Q8041.6406,1103.9375 8041,1104.0781 Q8040.3594,1104.2344 8039.6563,1104.2344 Q8037.1563,1104.2344 8035.8281,1102.5938 Q8034.5156,1100.9375 8034.5156,1097.8125 Q8034.5156,1094.6875 8035.8281,1093.0313 Q8037.1563,1091.375 8039.6563,1091.375 Q8040.3594,1091.375 8041,1091.5313 Q8041.6563,1091.6875 8042.2188,1091.9844 L8042.2188,1094.7031 Q8041.5938,1094.125 8041,1093.8594 Q8040.4063,1093.5781 8039.7813,1093.5781 Q8038.4375,1093.5781 8037.75,1094.6563 Q8037.0625,1095.7188 8037.0625,1097.8125 Q8037.0625,1099.9063 8037.75,1100.9844 Q8038.4375,1102.0469 8039.7813,1102.0469 Q8040.4063,1102.0469 8041,1101.7813 Q8041.5938,1101.5 8042.2188,1100.9219 L8042.2188,1103.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="8059.75" y="1102.1543">QLebedev</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7977" x2="8171" y1="1114" y2="1114"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7977" x2="8171" y1="1122" y2="1122"/><ellipse cx="7987" cy="1133" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="151" x="7996" y="1136.2104">QLebedev(unsigned order)</text><ellipse cx="7987" cy="1145.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="7996" y="1149.0151">~QLebedev()</text><ellipse cx="7987" cy="1158.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="7996" y="1161.8198">GetLookupTable() : std::string</text><ellipse cx="7987" cy="1171.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="7996" y="1174.6245">SetAvailOrders() : void</text><ellipse cx="7987" cy="1184.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="7996" y="1187.4292">SetConnectivity() : void</text><ellipse cx="7987" cy="1197.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="7996" y="1200.2339">SetName() : void</text><!--MD5=[32917a1120b013c593a0f5a6a5c75a15]
class QLevelSymmetric--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="124.8281" id="QLevelSymmetric" style="stroke: #A80036; stroke-width: 1.5;" width="220" x="8207" y="1082"/><ellipse cx="8260.75" cy="1098" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8263.7188,1103.6406 Q8263.1406,1103.9375 8262.5,1104.0781 Q8261.8594,1104.2344 8261.1563,1104.2344 Q8258.6563,1104.2344 8257.3281,1102.5938 Q8256.0156,1100.9375 8256.0156,1097.8125 Q8256.0156,1094.6875 8257.3281,1093.0313 Q8258.6563,1091.375 8261.1563,1091.375 Q8261.8594,1091.375 8262.5,1091.5313 Q8263.1563,1091.6875 8263.7188,1091.9844 L8263.7188,1094.7031 Q8263.0938,1094.125 8262.5,1093.8594 Q8261.9063,1093.5781 8261.2813,1093.5781 Q8259.9375,1093.5781 8259.25,1094.6563 Q8258.5625,1095.7188 8258.5625,1097.8125 Q8258.5625,1099.9063 8259.25,1100.9844 Q8259.9375,1102.0469 8261.2813,1102.0469 Q8261.9063,1102.0469 8262.5,1101.7813 Q8263.0938,1101.5 8263.7188,1100.9219 L8263.7188,1103.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="104" x="8281.25" y="1102.1543">QLevelSymmetric</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8208" x2="8426" y1="1114" y2="1114"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8208" x2="8426" y1="1122" y2="1122"/><ellipse cx="8218" cy="1133" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="8227" y="1136.2104">QLevelSymmetric(unsigned order)</text><ellipse cx="8218" cy="1145.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="8227" y="1149.0151">~QLevelSymmetric()</text><ellipse cx="8218" cy="1158.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="8227" y="1161.8198">GetLookupTable() : std::string</text><ellipse cx="8218" cy="1171.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="8227" y="1174.6245">SetAvailOrders() : void</text><ellipse cx="8218" cy="1184.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="8227" y="1187.4292">SetConnectivity() : void</text><ellipse cx="8218" cy="1197.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="8227" y="1200.2339">SetName() : void</text><!--MD5=[da3a73dd60c7a6cd3bfc963f796656da]
class QLookupQuadrature--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="188.8516" id="QLookupQuadrature" style="stroke: #A80036; stroke-width: 1.5;" width="311" x="7918.5" y="481"/><ellipse cx="8007.25" cy="497" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8007.3594,492.3438 L8006.2031,497.4219 L8008.5313,497.4219 L8007.3594,492.3438 Z M8005.875,490.1094 L8008.8594,490.1094 L8012.2188,502.5 L8009.7656,502.5 L8009,499.4375 L8005.7188,499.4375 L8004.9688,502.5 L8002.5313,502.5 L8005.875,490.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="125" x="8027.75" y="501.1543">QLookupQuadrature</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7919.5" x2="8228.5" y1="513" y2="513"/><polygon fill="none" points="7929.5,519,7933.5,523,7929.5,527,7925.5,523" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="7938.5" y="527.2104">_availableOrders : std::vector&lt;unsigned&gt;</text><polygon fill="none" points="7929.5,531.8047,7933.5,535.8047,7929.5,539.8047,7925.5,535.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="7938.5" y="540.0151">_nqByOrder : std::vector&lt;unsigned&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7919.5" x2="8228.5" y1="546.6094" y2="546.6094"/><ellipse cx="7929.5" cy="557.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="7938.5" y="560.8198">QLookupQuadrature(unsigned order)</text><ellipse cx="7929.5" cy="570.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="7938.5" y="573.6245">~QLookupQuadrature()</text><polygon fill="#FFFF44" points="7929.5,578.2188,7933.5,582.2188,7929.5,586.2188,7925.5,582.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="7938.5" y="586.4292">CheckOrder() : bool</text><polygon fill="#FFFF44" points="7929.5,591.0234,7933.5,595.0234,7929.5,599.0234,7925.5,595.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="168" x="7938.5" y="599.2339">GetLookupTable() : std::string</text><ellipse cx="7929.5" cy="608.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="7938.5" y="612.0386">getAvailOrders() : std::vector&lt;unsigned&gt; {query}</text><polygon fill="#FFFF44" points="7929.5,616.6328,7933.5,620.6328,7929.5,624.6328,7925.5,620.6328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="129" x="7938.5" y="624.8433">SetAvailOrders() : void</text><polygon fill="#FFFF44" points="7929.5,629.4375,7933.5,633.4375,7929.5,637.4375,7925.5,633.4375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="7938.5" y="637.6479">SetNq() : void</text><polygon fill="#FFFF44" points="7929.5,642.2422,7933.5,646.2422,7929.5,650.2422,7925.5,646.2422" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="7938.5" y="650.4526">SetPointsAndWeights() : void</text><ellipse cx="7929.5" cy="660.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="7938.5" y="663.2573">printAvailOrders() : void {query}</text><!--MD5=[7cd9cfd355b807b7d67babb7c40cfbb5]
class QMonteCarlo--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="124.8281" id="QMonteCarlo" style="stroke: #A80036; stroke-width: 1.5;" width="194" x="8265" y="513"/><ellipse cx="8317.75" cy="529" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M8320.7188,534.6406 Q8320.1406,534.9375 8319.5,535.0781 Q8318.8594,535.2344 8318.1563,535.2344 Q8315.6563,535.2344 8314.3281,533.5938 Q8313.0156,531.9375 8313.0156,528.8125 Q8313.0156,525.6875 8314.3281,524.0313 Q8315.6563,522.375 8318.1563,522.375 Q8318.8594,522.375 8319.5,522.5313 Q8320.1563,522.6875 8320.7188,522.9844 L8320.7188,525.7031 Q8320.0938,525.125 8319.5,524.8594 Q8318.9063,524.5781 8318.2813,524.5781 Q8316.9375,524.5781 8316.25,525.6563 Q8315.5625,526.7188 8315.5625,528.8125 Q8315.5625,530.9063 8316.25,531.9844 Q8316.9375,533.0469 8318.2813,533.0469 Q8318.9063,533.0469 8319.5,532.7813 Q8320.0938,532.5 8320.7188,531.9219 L8320.7188,534.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="80" x="8338.25" y="533.1543">QMonteCarlo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8266" x2="8458" y1="545" y2="545"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="8266" x2="8458" y1="553" y2="553"/><ellipse cx="8276" cy="564" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="8285" y="567.2104">QMonteCarlo(unsigned order)</text><ellipse cx="8276" cy="576.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="90" x="8285" y="580.0151">~QMonteCarlo()</text><ellipse cx="8276" cy="589.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="8285" y="592.8198">SetConnectivity() : void</text><ellipse cx="8276" cy="602.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="8285" y="605.6245">SetName() : void</text><ellipse cx="8276" cy="615.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="77" x="8285" y="618.4292">SetNq() : void</text><ellipse cx="8276" cy="628.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="8285" y="631.2339">SetPointsAndWeights() : void</text><!--MD5=[0703d2d8d2d3d1a8b8965fa3fe3c728c]
class QuadratureBase--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="368.1172" id="QuadratureBase" style="stroke: #A80036; stroke-width: 1.5;" width="449" x="7683.5" y="21"/><ellipse cx="7853.25" cy="37" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7853.3594,32.3438 L7852.2031,37.4219 L7854.5313,37.4219 L7853.3594,32.3438 Z M7851.875,30.1094 L7854.8594,30.1094 L7858.2188,42.5 L7855.7656,42.5 L7855,39.4375 L7851.7188,39.4375 L7850.9688,42.5 L7848.5313,42.5 L7851.875,30.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="101" x="7873.75" y="41.1543">QuadratureBase</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7684.5" x2="8131.5" y1="53" y2="53"/><polygon fill="none" points="7694.5,59,7698.5,63,7694.5,67,7690.5,63" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="7703.5" y="67.2104">_weights : Vector</text><polygon fill="none" points="7694.5,71.8047,7698.5,75.8047,7694.5,79.8047,7690.5,75.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="7703.5" y="80.0151">_points : VectorVector</text><polygon fill="none" points="7694.5,84.6094,7698.5,88.6094,7694.5,92.6094,7690.5,88.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="7703.5" y="92.8198">_connectivity : VectorVectorU</text><polygon fill="none" points="7694.5,97.4141,7698.5,101.4141,7694.5,105.4141,7690.5,101.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="7703.5" y="105.6245">_name : std::string</text><polygon fill="none" points="7694.5,110.2188,7698.5,114.2188,7694.5,118.2188,7690.5,114.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="7703.5" y="118.4292">_nq : unsigned</text><polygon fill="none" points="7694.5,123.0234,7698.5,127.0234,7694.5,131.0234,7690.5,127.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="7703.5" y="131.2339">_order : unsigned</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7684.5" x2="8131.5" y1="137.8281" y2="137.8281"/><ellipse cx="7694.5" cy="148.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="7703.5" y="152.0386">QuadratureBase(unsigned order)</text><ellipse cx="7694.5" cy="161.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="7703.5" y="164.8433">~QuadratureBase()</text><ellipse cx="7694.5" cy="174.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="423" x="7703.5" y="177.6479">CreateQuadrature(QUAD_NAME name, unsigned order) : QuadratureBase*</text><ellipse cx="7694.5" cy="187.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="7703.5" y="190.4526">GetWeights() : Vector {query}</text><ellipse cx="7694.5" cy="200.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="7703.5" y="203.2573">GetPoints() : VectorVector {query}</text><ellipse cx="7694.5" cy="212.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="7703.5" y="216.062">GetConnectivity() : VectorVectorU {query}</text><ellipse cx="7694.5" cy="225.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="328" x="7703.5" y="228.8667">Integrate(double(f)(doublex0,doublex1,doublex2)) : double</text><ellipse cx="7694.5" cy="238.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="7703.5" y="241.6714">SumUpWeights() : double</text><ellipse cx="7694.5" cy="251.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="7703.5" y="254.4761">GetName() : std::string {query}</text><ellipse cx="7694.5" cy="264.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="7703.5" y="267.2808">GetNq() : unsigned {query}</text><ellipse cx="7694.5" cy="276.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="7703.5" y="280.0854">GetOrder() : unsigned {query}</text><ellipse cx="7694.5" cy="289.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="7703.5" y="292.8901">PrintPoints() : void</text><ellipse cx="7694.5" cy="302.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="7703.5" y="305.6948">PrintPointsAndWeights() : void</text><ellipse cx="7694.5" cy="315.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="7703.5" y="318.4995">PrintWeights() : void</text><polygon fill="#FFFF44" points="7694.5,323.0938,7698.5,327.0938,7694.5,331.0938,7690.5,327.0938" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="132" x="7703.5" y="331.3042">SetConnectivity() : void</text><polygon fill="#FFFF44" points="7694.5,335.8984,7698.5,339.8984,7694.5,343.8984,7690.5,339.8984" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="95" x="7703.5" y="344.1089">SetName() : void</text><polygon fill="#FFFF44" points="7694.5,348.7031,7698.5,352.7031,7694.5,356.7031,7690.5,352.7031" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="77" x="7703.5" y="356.9136">SetNq() : void</text><polygon fill="#FFFF44" points="7694.5,361.5078,7698.5,365.5078,7694.5,369.5078,7690.5,365.5078" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="7703.5" y="369.7183">SetOrder(unsigned order) : void</text><polygon fill="#FFFF44" points="7694.5,374.3125,7698.5,378.3125,7694.5,382.3125,7690.5,378.3125" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="163" x="7703.5" y="382.5229">SetPointsAndWeights() : void</text><!--MD5=[168618c52cf8b01b81c881510cd68189]
class Reconstructor--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="86.4141" id="Reconstructor" style="stroke: #A80036; stroke-width: 1.5;" width="1255" x="3249.5" y="162"/><ellipse cx="3828.25" cy="178" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3831.2188,183.6406 Q3830.6406,183.9375 3830,184.0781 Q3829.3594,184.2344 3828.6563,184.2344 Q3826.1563,184.2344 3824.8281,182.5938 Q3823.5156,180.9375 3823.5156,177.8125 Q3823.5156,174.6875 3824.8281,173.0313 Q3826.1563,171.375 3828.6563,171.375 Q3829.3594,171.375 3830,171.5313 Q3830.6563,171.6875 3831.2188,171.9844 L3831.2188,174.7031 Q3830.5938,174.125 3830,173.8594 Q3829.4063,173.5781 3828.7813,173.5781 Q3827.4375,173.5781 3826.75,174.6563 Q3826.0625,175.7188 3826.0625,177.8125 Q3826.0625,179.9063 3826.75,180.9844 Q3827.4375,182.0469 3828.7813,182.0469 Q3829.4063,182.0469 3830,181.7813 Q3830.5938,181.5 3831.2188,180.9219 L3831.2188,183.6406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="89" x="3848.75" y="182.1543">Reconstructor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3250.5" x2="4503.5" y1="194" y2="194"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="3250.5" x2="4503.5" y1="202" y2="202"/><ellipse cx="3260.5" cy="213" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="3269.5" y="216.2104">Reconstructor(Config* settings)</text><ellipse cx="3260.5" cy="225.8047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="671" x="3269.5" y="229.0151">ReconstructSlopeStruct(double uL, double uC, double uR, double dxL, double dxR, std::string limiter) : double {query}</text><ellipse cx="3260.5" cy="238.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="1229" x="3269.5" y="241.8198">ReconstructSlopeUnstruct(unsigned nq, unsigned ncell, VectorVector&amp; psi, VectorVector&amp; psiDerX, VectorVector&amp; psiDerY, Vector&amp; area, VectorVector&amp; neighbor, VectorVector&amp; nx, VectorVector&amp; ny) : void {query}</text><!--MD5=[0b503fe5c24e14c3c70681465d2d6a28]
class SNSolver--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="86.4141" id="SNSolver" style="stroke: #A80036; stroke-width: 1.5;" width="178" x="6730" y="532.5"/><ellipse cx="6787.25" cy="548.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6790.2188,554.1406 Q6789.6406,554.4375 6789,554.5781 Q6788.3594,554.7344 6787.6563,554.7344 Q6785.1563,554.7344 6783.8281,553.0938 Q6782.5156,551.4375 6782.5156,548.3125 Q6782.5156,545.1875 6783.8281,543.5313 Q6785.1563,541.875 6787.6563,541.875 Q6788.3594,541.875 6789,542.0313 Q6789.6563,542.1875 6790.2188,542.4844 L6790.2188,545.2031 Q6789.5938,544.625 6789,544.3594 Q6788.4063,544.0781 6787.7813,544.0781 Q6786.4375,544.0781 6785.75,545.1563 Q6785.0625,546.2188 6785.0625,548.3125 Q6785.0625,550.4063 6785.75,551.4844 Q6786.4375,552.5469 6787.7813,552.5469 Q6788.4063,552.5469 6789,552.2813 Q6789.5938,552 6790.2188,551.4219 L6790.2188,554.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="55" x="6807.75" y="552.6543">SNSolver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6731" x2="6907" y1="564.5" y2="564.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="6731" x2="6907" y1="572.5" y2="572.5"/><ellipse cx="6741" cy="583.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="6750" y="586.7104">SNSolver(Config* settings)</text><ellipse cx="6741" cy="596.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="6750" y="599.5151">Save() : void {query}</text><ellipse cx="6741" cy="609.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="6750" y="612.3198">Solve() : void</text><!--MD5=[bb8b308f4b3fca4e9e4f2a7f2b74c7a7]
class SNSolverMPI--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="86.4141" id="SNSolverMPI" style="stroke: #A80036; stroke-width: 1.5;" width="197" x="6943.5" y="532.5"/><ellipse cx="6999.75" cy="548.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7002.7188,554.1406 Q7002.1406,554.4375 7001.5,554.5781 Q7000.8594,554.7344 7000.1563,554.7344 Q6997.6563,554.7344 6996.3281,553.0938 Q6995.0156,551.4375 6995.0156,548.3125 Q6995.0156,545.1875 6996.3281,543.5313 Q6997.6563,541.875 7000.1563,541.875 Q7000.8594,541.875 7001.5,542.0313 Q7002.1563,542.1875 7002.7188,542.4844 L7002.7188,545.2031 Q7002.0938,544.625 7001.5,544.3594 Q7000.9063,544.0781 7000.2813,544.0781 Q6998.9375,544.0781 6998.25,545.1563 Q6997.5625,546.2188 6997.5625,548.3125 Q6997.5625,550.4063 6998.25,551.4844 Q6998.9375,552.5469 7000.2813,552.5469 Q7000.9063,552.5469 7001.5,552.2813 Q7002.0938,552 7002.7188,551.4219 L7002.7188,554.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="7020.25" y="552.6543">SNSolverMPI</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6944.5" x2="7139.5" y1="564.5" y2="564.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="6944.5" x2="7139.5" y1="572.5" y2="572.5"/><ellipse cx="6954.5" cy="583.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="6963.5" y="586.7104">SNSolverMPI(Config* settings)</text><ellipse cx="6954.5" cy="596.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="6963.5" y="599.5151">Save() : void {query}</text><ellipse cx="6954.5" cy="609.1094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="6963.5" y="612.3198">Solve() : void</text><!--MD5=[7e0cc054e68485d8dbab588155cf841a]
class Solver--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="393.7266" id="Solver" style="stroke: #A80036; stroke-width: 1.5;" width="315" x="6115.5" y="8"/><ellipse cx="6249.75" cy="24" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M6249.8594,19.3438 L6248.7031,24.4219 L6251.0313,24.4219 L6249.8594,19.3438 Z M6248.375,17.1094 L6251.3594,17.1094 L6254.7188,29.5 L6252.2656,29.5 L6251.5,26.4375 L6248.2188,26.4375 L6247.4688,29.5 L6245.0313,29.5 L6248.375,17.1094 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="38" x="6270.25" y="28.1543">Solver</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6116.5" x2="6429.5" y1="40" y2="40"/><polygon fill="none" points="6126.5,46,6130.5,50,6126.5,54,6122.5,50" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="6135.5" y="54.2104">_settings : Config*</text><polygon fill="none" points="6126.5,58.8047,6130.5,62.8047,6126.5,66.8047,6122.5,62.8047" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="6135.5" y="67.0151">_scatteringKernel : Matrix</text><polygon fill="none" points="6126.5,71.6094,6130.5,75.6094,6126.5,79.6094,6122.5,75.6094" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="6135.5" y="79.8198">_mesh : Mesh*</text><polygon fill="none" points="6126.5,84.4141,6130.5,88.4141,6126.5,92.4141,6122.5,88.4141" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="6135.5" y="92.6245">_g : NumericalFlux*</text><polygon fill="none" points="6126.5,97.2188,6130.5,101.2188,6126.5,105.2188,6122.5,101.2188" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="6135.5" y="105.4292">_problem : ProblemBase*</text><polygon fill="none" points="6126.5,110.0234,6130.5,114.0234,6126.5,118.0234,6122.5,114.0234" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="6135.5" y="118.2339">_weights : Vector</text><polygon fill="none" points="6126.5,122.8281,6130.5,126.8281,6126.5,130.8281,6122.5,126.8281" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="6135.5" y="131.0386">_psi : VectorVector</text><polygon fill="none" points="6126.5,135.6328,6130.5,139.6328,6126.5,143.6328,6122.5,139.6328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="6135.5" y="143.8433">_quadPoints : VectorVector</text><polygon fill="none" points="6126.5,148.4375,6130.5,152.4375,6126.5,156.4375,6122.5,152.4375" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="6135.5" y="156.6479">_sigmaS : VectorVector</text><polygon fill="none" points="6126.5,161.2422,6130.5,165.2422,6126.5,169.2422,6122.5,165.2422" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="6135.5" y="169.4526">_sigmaT : VectorVector</text><polygon fill="none" points="6126.5,174.0469,6130.5,178.0469,6126.5,182.0469,6122.5,178.0469" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="70" x="6135.5" y="182.2573">_dE : double</text><polygon fill="none" points="6126.5,186.8516,6130.5,190.8516,6126.5,194.8516,6122.5,190.8516" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="6135.5" y="195.062">_boundaryCells : std::vector&lt;BOUNDARY_TYPE&gt;</text><polygon fill="none" points="6126.5,199.6563,6130.5,203.6563,6126.5,207.6563,6122.5,203.6563" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="6135.5" y="207.8667">_Q : std::vector&lt;VectorVector&gt;</text><polygon fill="none" points="6126.5,212.4609,6130.5,216.4609,6126.5,220.4609,6122.5,216.4609" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="6135.5" y="220.6714">_areas : std::vector&lt;double&gt;</text><polygon fill="none" points="6126.5,225.2656,6130.5,229.2656,6126.5,233.2656,6122.5,229.2656" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="6135.5" y="233.4761">_density : std::vector&lt;double&gt;</text><polygon fill="none" points="6126.5,238.0703,6130.5,242.0703,6126.5,246.0703,6122.5,242.0703" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="6135.5" y="246.2808">_energies : std::vector&lt;double&gt;</text><polygon fill="none" points="6126.5,250.875,6130.5,254.875,6126.5,258.875,6122.5,254.875" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="6135.5" y="259.0854">_s : std::vector&lt;double&gt;</text><polygon fill="none" points="6126.5,263.6797,6130.5,267.6797,6126.5,271.6797,6122.5,267.6797" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="6135.5" y="271.8901">_normals : std::vector&lt;std::vector&lt;Vector&gt; &gt;</text><polygon fill="none" points="6126.5,276.4844,6130.5,280.4844,6126.5,284.4844,6122.5,280.4844" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="289" x="6135.5" y="284.6948">_neighbors : std::vector&lt;std::vector&lt;unsigned&gt; &gt;</text><polygon fill="none" points="6126.5,289.2891,6130.5,293.2891,6126.5,297.2891,6122.5,293.2891" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="6135.5" y="297.4995">_nCells : unsigned</text><polygon fill="none" points="6126.5,302.0938,6130.5,306.0938,6126.5,310.0938,6122.5,306.0938" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="6135.5" y="310.3042">_nEnergies : unsigned</text><polygon fill="none" points="6126.5,314.8984,6130.5,318.8984,6126.5,322.8984,6122.5,318.8984" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="6135.5" y="323.1089">_nq : unsigned</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="6116.5" x2="6429.5" y1="329.7031" y2="329.7031"/><ellipse cx="6126.5" cy="340.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="6135.5" y="343.9136">Solver(Config* settings)</text><ellipse cx="6126.5" cy="353.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="192" x="6135.5" y="356.7183">Create(Config* settings) : Solver*</text><polygon fill="#FFFF44" points="6126.5,361.3125,6130.5,365.3125,6126.5,369.3125,6122.5,365.3125" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="6135.5" y="369.5229">ComputeTimeStep(double cfl) : double {query}</text><ellipse cx="6126.5" cy="379.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="123" x="6135.5" y="382.3276">Save() : void {query}</text><ellipse cx="6126.5" cy="391.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="75" x="6135.5" y="395.1323">Solve() : void</text><!--MD5=[5c1f2380e58c36d5ea81108e4a7509d5]
class UpwindFlux--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="73.6094" id="UpwindFlux" style="stroke: #A80036; stroke-width: 1.5;" width="529" x="7180.5" y="1107.5"/><ellipse cx="7406.25" cy="1123.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M7409.2188,1129.1406 Q7408.6406,1129.4375 7408,1129.5781 Q7407.3594,1129.7344 7406.6563,1129.7344 Q7404.1563,1129.7344 7402.8281,1128.0938 Q7401.5156,1126.4375 7401.5156,1123.3125 Q7401.5156,1120.1875 7402.8281,1118.5313 Q7404.1563,1116.875 7406.6563,1116.875 Q7407.3594,1116.875 7408,1117.0313 Q7408.6563,1117.1875 7409.2188,1117.4844 L7409.2188,1120.2031 Q7408.5938,1119.625 7408,1119.3594 Q7407.4063,1119.0781 7406.7813,1119.0781 Q7405.4375,1119.0781 7404.75,1120.1563 Q7404.0625,1121.2188 7404.0625,1123.3125 Q7404.0625,1125.4063 7404.75,1126.4844 Q7405.4375,1127.5469 7406.7813,1127.5469 Q7407.4063,1127.5469 7408,1127.2813 Q7408.5938,1127 7409.2188,1126.4219 L7409.2188,1129.1406 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="69" x="7426.75" y="1127.6543">UpwindFlux</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7181.5" x2="7708.5" y1="1139.5" y2="1139.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="7181.5" x2="7708.5" y1="1147.5" y2="1147.5"/><ellipse cx="7191.5" cy="1158.5" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="7200.5" y="1161.7104">UpwindFlux(Config* settings)</text><ellipse cx="7191.5" cy="1171.3047" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="503" x="7200.5" y="1174.5151">Flux(const Vector&amp; Omega, double psiL, double psiR, const Vector&amp; n) : double {query}</text><!--MD5=[2f6d06e17746718185fc96242bb8b19f]
class BOUNDARY_TYPE--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="99.2188" id="BOUNDARY_TYPE" style="stroke: #A80036; stroke-width: 1.5;" width="135" x="4539.5" y="155.5"/><ellipse cx="4554.5" cy="171.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4558.6094,177.5 L4550.8906,177.5 L4550.8906,165.1094 L4558.6094,165.1094 L4558.6094,167.2656 L4553.3438,167.2656 L4553.3438,169.9375 L4558.1094,169.9375 L4558.1094,172.0938 L4553.3438,172.0938 L4553.3438,175.3438 L4558.6094,175.3438 L4558.6094,177.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="103" x="4568.5" y="175.6543">BOUNDARY_TYPE</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4540.5" x2="4673.5" y1="187.5" y2="187.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="4545.5" y="201.7104">DIRICHLET</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="42" x="4545.5" y="214.5151">INVALID</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="4545.5" y="227.3198">NEUMANN</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="32" x="4545.5" y="240.1245">NONE</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4540.5" x2="4673.5" y1="246.7188" y2="246.7188"/><!--MD5=[68cd91d5615ccadb6700a0a296529008]
class KERNEL_NAME--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="60.8047" id="KERNEL_NAME" style="stroke: #A80036; stroke-width: 1.5;" width="119" x="2926.5" y="545"/><ellipse cx="2941.5" cy="561" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2945.6094,567 L2937.8906,567 L2937.8906,554.6094 L2945.6094,554.6094 L2945.6094,556.7656 L2940.3438,556.7656 L2940.3438,559.4375 L2945.1094,559.4375 L2945.1094,561.5938 L2940.3438,561.5938 L2940.3438,564.8438 L2945.6094,564.8438 L2945.6094,567 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="87" x="2955.5" y="565.1543">KERNEL_NAME</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2927.5" x2="3044.5" y1="577" y2="577"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="2932.5" y="591.2104">KERNEL_Isotropic</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2927.5" x2="3044.5" y1="597.8047" y2="597.8047"/><!--MD5=[bca9a10492242ad7f949a711b29b6c8e]
class PROBLEM_NAME--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="86.4141" id="PROBLEM_NAME" style="stroke: #A80036; stroke-width: 1.5;" width="150" x="3081" y="532.5"/><ellipse cx="3105" cy="548.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3109.1094,554.5 L3101.3906,554.5 L3101.3906,542.1094 L3109.1094,542.1094 L3109.1094,544.2656 L3103.8438,544.2656 L3103.8438,546.9375 L3108.6094,546.9375 L3108.6094,549.0938 L3103.8438,549.0938 L3103.8438,552.3438 L3109.1094,552.3438 L3109.1094,554.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="98" x="3121" y="552.6543">PROBLEM_NAME</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3082" x2="3230" y1="564.5" y2="564.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="3087" y="578.7104">PROBLEM_Checkerboard</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="3087" y="591.5151">PROBLEM_ElectronRT</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="3087" y="604.3198">PROBLEM_LineSource</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3082" x2="3230" y1="610.9141" y2="610.9141"/><!--MD5=[30a9f32f1054ef51fd0c6378da396cd5]
class QUAD_NAME--><rect fill="#FEFECE" filter="url(#fkqdfxd66htkr)" height="112.0234" id="QUAD_NAME" style="stroke: #A80036; stroke-width: 1.5;" width="202" x="3266" y="519.5"/><ellipse cx="3324.75" cy="535.5" fill="#EB937F" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3328.8594,541.5 L3321.1406,541.5 L3321.1406,529.1094 L3328.8594,529.1094 L3328.8594,531.2656 L3323.5938,531.2656 L3323.5938,533.9375 L3328.3594,533.9375 L3328.3594,536.0938 L3323.5938,536.0938 L3323.5938,539.3438 L3328.8594,539.3438 L3328.8594,541.5 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="3345.25" y="539.6543">QUAD_NAME</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3267" x2="3467" y1="551.5" y2="551.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="3272" y="565.7104">QUAD_GaussLegendreTensorized</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="3272" y="578.5151">QUAD_LDFESA</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="3272" y="591.3198">QUAD_Lebedev</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="3272" y="604.1245">QUAD_LevelSymmetric</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="3272" y="616.9292">QUAD_MonteCarlo</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3267" x2="3467" y1="623.5234" y2="623.5234"/><!--MD5=[51a439b0c181719f1a10a280166c3aa3]
reverse link NumericalFlux to LaxFriedrichsFlux--><path d="M6489.94,633.11 C6522.96,665.86 6564.17,708.49 6598,749 C6699.97,871.12 6805.42,1027.62 6853.78,1101.41 " fill="none" id="NumericalFlux&lt;-LaxFriedrichsFlux" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="6484.74,637.82,6475.4,618.8,6494.56,627.84,6484.74,637.82" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2c8ea5724d5b402e5c8d4ca42df5ffb9]
reverse link NumericalFlux to UpwindFlux--><path d="M6538,626.63 C6589.57,648.89 6652.92,673.5 6712,689 C6907.59,740.31 6989.69,644.82 7163,749 C7307.13,835.64 7398.03,1027.26 7431.01,1107.28 " fill="none" id="NumericalFlux&lt;-UpwindFlux" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="6535.07,632.99,6519.56,618.56,6540.69,620.17,6535.07,632.99" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7a5c06b72202fdb83b002facaebdc6ed]
reverse link OptionBase to COptionUShort--><path d="M2380.46,1682.44 C1955.19,1693.72 1252.42,1724.73 653,1810 C640.43,1811.79 627.63,1813.8 614.73,1815.98 " fill="none" id="OptionBase&lt;-COptionUShort" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2380.32,1675.44,2400.5,1681.92,2380.69,1689.43,2380.32,1675.44" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[26f5b683aa171679e8b6fee44399f468]
reverse link OptionBase to OptionBool--><path d="M2380.28,1687.46 C2055.54,1702.09 1580.47,1735.23 1172,1810 C1162.22,1811.79 1152.29,1813.79 1142.28,1815.96 " fill="none" id="OptionBase&lt;-OptionBool" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2380.19,1680.45,2400.48,1686.56,2380.81,1694.44,2380.19,1680.45" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c38598f153a5ddcc699faf2b9a04cc16]
reverse link OptionBase to OptionDouble--><path d="M2380.32,1714.08 C2185.24,1736.34 1945.52,1768.33 1733,1810 C1723.5,1811.86 1713.85,1813.86 1704.12,1815.97 " fill="none" id="OptionBase&lt;-OptionDouble" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2379.59,1707.12,2400.26,1711.83,2381.17,1721.03,2379.59,1707.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c130641e7aee8d75e85f6f46bf583c71]
reverse link OptionBase to OptionEnum--><path d="M2520.4,1756.27 C2466.12,1773.94 2408.88,1792.57 2355.4,1809.98 " fill="none" id="OptionBase&lt;-OptionEnum" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2518.28,1749.6,2539.46,1750.07,2522.61,1762.91,2518.28,1749.6" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5e35d27cc5d4afcebc1c0fea76403421]
reverse link OptionBase to OptionInt--><path d="M2767,1770.38 C2767,1785.66 2767,1801.21 2767,1815.72 " fill="none" id="OptionBase&lt;-OptionInt" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2760,1770.21,2767,1750.21,2774,1770.21,2760,1770.21" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4f5f1ba1b4e7189a5be2bc0c996c0772]
reverse link OptionBase to OptionLong--><path d="M2965.32,1757.69 C3012.17,1776.98 3061.63,1797.35 3106.82,1815.97 " fill="none" id="OptionBase&lt;-OptionLong" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2962.65,1764.15,2946.82,1750.07,2967.98,1751.21,2962.65,1764.15" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[19ddf22e3daa26dec94e61c0062eaab6]
reverse link OptionBase to OptionString--><path d="M3153.52,1738.41 C3274.99,1759.44 3409.39,1784.17 3532,1810 C3541.05,1811.91 3550.25,1813.89 3559.53,1815.94 " fill="none" id="OptionBase&lt;-OptionString" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3152.27,1745.29,3133.75,1735,3154.65,1731.5,3152.27,1745.29" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[338b565911eb84685aef9ab67888724e]
reverse link OptionBase to OptionStringList--><path d="M3153.76,1702.67 C3427.61,1724.32 3803.02,1759.57 4131,1810 C4143.04,1811.85 4155.28,1813.85 4167.63,1815.96 " fill="none" id="OptionBase&lt;-OptionStringList" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3153.2,1709.65,3133.81,1701.11,3154.3,1695.69,3153.2,1709.65" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e543dabbd1238d0ea510f148afd54dcb]
reverse link OptionBase to OptionULong--><path d="M3153.84,1682.4 C3570.78,1693.65 4252.95,1724.63 4835,1810 C4847.17,1811.78 4859.55,1813.79 4872.04,1815.97 " fill="none" id="OptionBase&lt;-OptionULong" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3153.37,1689.39,3133.57,1681.87,3153.74,1675.4,3153.37,1689.39" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4ad7caf68528ed95174c5ed7c9497b48]
reverse link ProblemBase to Checkerboard--><path d="M4308.95,612 C4104.19,642.17 3846.82,689.94 3757,749 C3647.74,820.84 3568.66,951.95 3523.63,1043.21 " fill="none" id="ProblemBase&lt;-Checkerboard" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4308.1,605.05,4328.91,609.09,4310.12,618.91,4308.1,605.05" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9e04a2c05544cc22196b31db1f220344]
reverse link ProblemBase to ElectronRT--><path d="M4368.85,701.05 C4348.44,716.12 4328.78,732.18 4311,749 C4211.77,842.9 4126.45,977.47 4077.66,1062.65 " fill="none" id="ProblemBase&lt;-ElectronRT" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4365.04,695.17,4385.36,689.18,4373.21,706.54,4365.04,695.17" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[42c2f90a99d65538781a10668404336e]
reverse link ProblemBase to LineSource--><path d="M4588,709.26 C4588,821.47 4588,978.12 4588,1069.37 " fill="none" id="ProblemBase&lt;-LineSource" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4581,709.2,4588,689.2,4595,709.2,4581,709.2" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f29213e6409b0dbeddb5359456126346]
reverse link QLookupQuadrature to QLDFESA--><path d="M7993.27,687.07 C7980.71,707.08 7968.71,728.21 7959,749 C7906.58,861.22 7871.93,1002.53 7855.04,1081.96 " fill="none" id="QLookupQuadrature&lt;-QLDFESA" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7987.43,683.2,8004.15,670.18,7999.2,690.79,7987.43,683.2" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e6462bb42d962df88f12397729eebeae]
reverse link QLookupQuadrature to QLebedev--><path d="M8074,690.3 C8074,808.16 8074,987.95 8074,1081.72 " fill="none" id="QLookupQuadrature&lt;-QLebedev" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8067,690.13,8074,670.13,8081,690.13,8067,690.13" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[5c097905ed270dc8517366d8f0d54a26]
reverse link QLookupQuadrature to QLevelSymmetric--><path d="M8154.25,687.3 C8166.85,707.29 8179,728.35 8189,749 C8243.36,861.28 8282.77,1002.27 8302.56,1081.68 " fill="none" id="QLookupQuadrature&lt;-QLevelSymmetric" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8148.32,691.02,8143.34,670.43,8160.07,683.42,8148.32,691.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[e1b6629996e78d6831d3c62b50670482]
reverse link QuadratureBase to QDummy--><path d="M7667.74,389.7 C7638.74,413.49 7609.89,437.95 7583,462 C7565.21,477.91 7546.69,496 7529.99,512.95 " fill="none" id="QuadratureBase&lt;-QDummy" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7663.46,384.15,7683.38,376.94,7672.31,395,7663.46,384.15" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a98013c9e348f9d44b08ef11aadf8b85]
reverse link QuadratureBase to QGaussLegendreTensorized--><path d="M7817.25,407.45 C7799.97,445.82 7783.14,483.18 7769.79,512.81 " fill="none" id="QuadratureBase&lt;-QGaussLegendreTensorized" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7810.89,404.53,7825.49,389.17,7823.65,410.28,7810.89,404.53" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[7f3b490deb3fa0388444aa1c9301dfa9]
reverse link QuadratureBase to QLookupQuadrature--><path d="M7998.89,407.77 C8010.37,433.25 8021.65,458.28 8031.83,480.89 " fill="none" id="QuadratureBase&lt;-QLookupQuadrature" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="7992.35,410.28,7990.51,389.17,8005.11,404.53,7992.35,410.28" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[835644a82503d26b2c146b2473052e94]
reverse link QuadratureBase to QMonteCarlo--><path d="M8148.69,381.73 C8182.25,407.97 8215.87,435.21 8247,462 C8265.42,477.85 8284.6,495.92 8301.9,512.87 " fill="none" id="QuadratureBase&lt;-QMonteCarlo" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="8144.25,387.15,8132.76,369.35,8152.84,376.1,8144.25,387.15" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2865e895988d2514b2f754bd9f7b9c94]
reverse link Solver to SNSolver--><path d="M6448.53,293.5 C6531.92,338.71 6630.85,397.81 6712,462 C6738.32,482.82 6764.35,510 6784.14,532.42 " fill="none" id="Solver&lt;-SNSolver" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="6445.01,299.56,6430.71,283.92,6451.64,287.23,6445.01,299.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[808132d80587c9df42bdf4c1945937c1]
reverse link Solver to SNSolverMPI--><path d="M6449.97,254.76 C6586.4,297.11 6776.28,366.68 6925,462 C6955.13,481.31 6984.16,509.15 7005.77,532.3 " fill="none" id="Solver&lt;-SNSolverMPI" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="6447.73,261.39,6430.66,248.83,6451.83,248.01,6447.73,261.39" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[efa8e6fe7dfd8fd64f02aecfb3519694]
reverse link Config to OptionBase--><path d="M2767,1553.32 C2767,1570.08 2767,1585.73 2767,1599.85 " fill="none" id="Config&lt;-OptionBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="2767,1540.3,2763,1546.3,2767,1552.3,2771,1546.3,2767,1540.3" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2db0e6a27ad7c543f0bdce8067e321b2]
reverse link ProblemBase to Config--><path d="M4315.5,606.18 C3926.44,649.17 3252.91,726.13 3203,749 C3197.08,751.71 3191.19,754.53 3185.33,757.45 " fill="none" id="ProblemBase&lt;-Config" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4328.64,604.73,4322.237,601.4132,4316.7126,606.0479,4323.1156,609.3648,4328.64,604.73" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3fa3d6f3939238218e3ee9bd7eff69f6]
reverse link ProblemBase to Mesh--><path d="M4860.22,583.51 C5076.96,597.91 5383.61,638.37 5629,749 C5701.23,781.56 5771.71,827.63 5835.55,876.86 " fill="none" id="ProblemBase&lt;-Mesh" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4847.05,582.66,4852.778,587.0406,4859.0247,583.4381,4853.2967,579.0575,4847.05,582.66" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[a9f16d3977b996ccf6a0381ea5be28ca]
reverse link ProblemBase to Physics--><path d="M4793.53,696.53 C4818.25,713.26 4842.63,730.94 4865,749 C4988.5,848.72 5112.95,985.6 5184.86,1069.12 " fill="none" id="ProblemBase&lt;-Physics" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="4782.54,689.16,4785.3013,695.8215,4792.5124,695.8347,4789.7511,689.1732,4782.54,689.16" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8718454a90ca902832a0d12e61307c14]
reverse link Solver to Config--><path d="M6102.17,226.91 C5657.24,281.58 4485.02,426.91 4311,462 C3937.79,537.25 3854.91,598.9 3485,689 C3360.5,719.32 3317.1,690.68 3203,749 C3197.09,752.02 3191.2,755.14 3185.34,758.36 " fill="none" id="Solver&lt;-Config" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="6115.12,225.32,6108.6768,222.0819,6103.2096,226.7841,6109.6528,230.0221,6115.12,225.32" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[1ddc86840206f8769827b49fc9d67fda]
reverse link Solver to Mesh--><path d="M6163.74,414.77 C6158.04,430.49 6153.02,446.34 6149,462 C6114.62,595.98 6104.32,749.49 6103.28,876.86 " fill="none" id="Solver&lt;-Mesh" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="6168.45,402.19,6162.6001,406.4065,6164.2423,413.4281,6170.0922,409.2116,6168.45,402.19" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[141236dffacf4bdc2074205320151f00]
reverse link Solver to NumericalFlux--><path d="M6362.28,414.23 C6381.59,459.25 6400.06,502.33 6412.98,532.47 " fill="none" id="Solver&lt;-NumericalFlux" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="6357.09,402.12,6355.7821,409.2115,6361.825,413.1463,6363.1329,406.0548,6357.09,402.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[432d473e5485753f91a485dfddb206c5]
reverse link Solver to ProblemBase--><path d="M6102.24,243.34 C5806.19,308.09 5195.97,441.54 4847.32,517.79 " fill="none" id="Solver&lt;-ProblemBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="6115.24,240.5,6108.5223,237.8784,6103.5187,243.071,6110.2363,245.6926,6115.24,240.5" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[31de88253031076c59e403dc6909dd47]
link ErrorMessages to Reconstructor--><!--MD5=[691a57c3e8e16d3563b1e391f0a236cf]
link Reconstructor to BOUNDARY_TYPE--><!--MD5=[af33be1bd8f5ef6b2c6070b5133b6e2c]
link ErrorMessages to KERNEL_NAME--><!--MD5=[8e3c74c7bfb24992c87ea59118d19eec]
link KERNEL_NAME to PROBLEM_NAME--><!--MD5=[473e70d7e9c3537554dc719ca99463dc]
link PROBLEM_NAME to QUAD_NAME--><!--MD5=[f2f735082aef8085614472e36cac589f]
@startuml






abstract class COptionUShort {
	+COptionUShort(std::string option_field_name, unsigned short& option_field, unsigned short default_value)
	+~COptionUShort()
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	-_def : unsigned short
	-_field : unsigned short&
	+SetDefault() : void
}


class Checkerboard {
	-Checkerboard()
	+Checkerboard(Config* settings, Mesh* mesh)
	+~Checkerboard()
	-_scatteringXS : Vector
	-_totalXS : Vector
	+GetScatteringXS(const std::vector<double>& energies) : VectorVector
	+GetTotalXS(const std::vector<double>& energies) : VectorVector
	+SetupIC() : VectorVector
	-isAbsorption(const Vector& pos) : bool {query}
	-isSource(const Vector& pos) : bool {query}
	+GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
}


class Config {
	+Config(char case_filename)
	+~Config(void)
	+GetBoundaryType(std::string nameMarker) : BOUNDARY_TYPE {query}
	+GetKernelName() : KERNEL_NAME {query}
	-_kernelName : KERNEL_NAME
	+GetProblemName() : PROBLEM_NAME {query}
	-_problemName : PROBLEM_NAME
	+GetQuadName() : QUAD_NAME {query}
	-_quadName : QUAD_NAME
	-TokenizeString(std::string& str, std::string& option_name, std::vector<std::string>& option_value) : bool
	-_baseConfig : bool
	+GetCFL() : double {query}
	+GetTEnd() : double {query}
	-_CFL : double
	-_tEnd : double
	-_commRank : int
	-_commSize : int
	-_optionMap : std::map<std::string, OptionBase*>
	-_allOptions : std::map<std::string, bool>
	+GetLogDir() : std::string {query}
	+GetMeshFile() : std::string {query}
	+GetOutputDir() : std::string {query}
	+GetOutputFile() : std::string {query}
	-_fileName : std::string
	-_inputDir : std::string
	-_logDir : std::string
	-_meshFile : std::string
	-_outputDir : std::string
	-_outputFile : std::string
	-_boundaries : std::vector<std::pair<std::string, BOUNDARY_TYPE> >
	-_MarkerDirichlet : std::vector<std::string>
	-_MarkerNeumann : std::vector<std::string>
	+GetNCells() : unsigned
	+GetNQuadPoints() : unsigned
	-_nCells : unsigned
	-_nQuadPoints : unsigned
	+GetQuadOrder() : unsigned short {query}
	-_nMarkerDirichlet : unsigned short
	-_nMarkerNeumann : unsigned short
	-_quadOrder : unsigned short
	-AddBoolOption(const std::string name, bool& option_field, bool default_value) : void
	-AddDoubleOption(const std::string name, double& option_field, double default_value) : void
	-AddEnumOption(const std::string name, Tenum& option_field, const std::map<std::string, Tenum>& enum_map, Tenum default_value) : void
	-AddIntegerOption(const std::string name, int& option_field, int default_value) : void
	-AddLongOption(const std::string name, long& option_field, long default_value) : void
	-AddStringListOption(const std::string name, unsigned short& num_marker, std::vector<std::string>& option_field) : void
	-AddStringOption(const std::string name, std::string& option_field, std::string default_value) : void
	-AddUnsignedLongOption(const std::string name, unsigned long& option_field, unsigned long default_value) : void
	-AddUnsignedShortOption(const std::string name, unsigned short& option_field, unsigned short default_value) : void
	-InitLogger(spdlog::level::level_enum terminalLogLvl, spdlog::level::level_enum fileLogLvl) : void
	-SetConfigOptions(void) : void
	-SetConfigParsing(char case_filename) : void
	-SetDefault(void) : void
	+SetNCells(unsigned nCells) : void
	+SetNQuadPoints(unsigned nq) : void
	-SetOutput(void) : void
	-SetPointersNull(void) : void
	-SetPostprocessing(void) : void
}


class ElectronRT {
	-ElectronRT()
	+ElectronRT(Config* settings, Mesh* mesh)
	+~ElectronRT()
	+GetScatteringXS(const std::vector<double>& energies) : VectorVector
	+GetTotalXS(const std::vector<double>& energies) : VectorVector
	+SetupIC() : VectorVector
	+GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
	-LoadXSH20(std::string fileSigmaS, std::string fileSigmaT) : void
}


class ErrorMessages {
	+ErrorMessages()
	+{static} Error(std::string ErrorMsg, std::string FunctionName) : void
	+{static} OptionNotSetError(std::string OptionName, std::string FunctionName) : void
}


class LaxFriedrichsFlux {
	+LaxFriedrichsFlux(Config* settings)
	+Flux(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
	-_dt : double
}


class LineSource {
	-LineSource()
	+LineSource(Config* settings, Mesh* mesh)
	+~LineSource()
	+GetScatteringXS(const std::vector<double>& energies) : VectorVector
	+GetTotalXS(const std::vector<double>& energies) : VectorVector
	+SetupIC() : VectorVector
	+GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
}


class Mesh {
	+Mesh()
	+Mesh(std::vector<Vector> nodes, std::vector<std::vector<unsigned> > cells, std::vector<std::pair<BOUNDARY_TYPE, std::vector<unsigned> > > boundaries)
	+~Mesh()
	#ComputeOutwardFacingNormal(const Vector& nodeA, const Vector& nodeB, const Vector& cellCenter) : Vector
	#_nodeNeighbors : blaze::CompressedMatrix<bool>
	#_dim : const unsigned
	#_ghostCellID : const unsigned
	#_numBoundaries : const unsigned
	#_numCells : const unsigned
	#_numNodes : const unsigned
	#_numNodesPerCell : const unsigned
	#_log : std::shared_ptr<spdlog::logger>
	#_cellBoundaryTypes : std::vector<BOUNDARY_TYPE>
	+GetBoundaryTypes() : std::vector<BOUNDARY_TYPE>& {query}
	#_cellMidPoints : std::vector<Vector>
	#_nodes : std::vector<Vector>
	+GetCellMidPoints() : std::vector<Vector>& {query}
	+GetNodes() : std::vector<Vector>& {query}
	#_cellAreas : std::vector<double>
	+GetCellAreas() : std::vector<double>& {query}
	#_boundaries : std::vector<std::pair<BOUNDARY_TYPE, std::vector<unsigned> > >
	#_cellNormals : std::vector<std::vector<Vector> >
	+GetNormals() : std::vector<std::vector<Vector> >& {query}
	#_cellNeighbors : std::vector<std::vector<unsigned> >
	#_cells : std::vector<std::vector<unsigned> >
	+GetCells() : std::vector<std::vector<unsigned> >& {query}
	+GetNeighbours() : std::vector<std::vector<unsigned> >& {query}
	#_colors : std::vector<unsigned>
	+GetPartitionIDs() : std::vector<unsigned>& {query}
	+GetDim() : unsigned {query}
	+GetNumCells() : unsigned {query}
	+GetNumNodes() : unsigned {query}
	+GetNumNodesPerCell() : unsigned {query}
	#ComputeCellAreas() : void
	#ComputeCellMidpoints() : void
	#ComputeConnectivity() : void
	#ComputePartitioning() : void
	+ComputeSlopes(unsigned nq, VectorVector& psiDerX, VectorVector& psiDerY, const VectorVector& psi) : void {query}
}


abstract class NumericalFlux {
	+NumericalFlux(Config* settings)
	+{static} Create(Config* settings) : NumericalFlux*
	+{abstract} Flux(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
}


abstract class OptionBase {
	+OptionBase()
	+{abstract} ~OptionBase()
	+SetValue(std::vector<std::string> value) : std::string
	+badValue(std::vector<std::string>& option_value, std::string type_id, std::string option_name) : std::string
	+optionCheckMultipleValues(std::vector<std::string>& option_value, std::string type_id, std::string option_name) : std::string
	+GetValue() : std::vector<std::string>
	-_value : std::vector<std::string>
	+{abstract} SetDefault() : void
}


abstract class OptionBool {
	+OptionBool(std::string option_field_name, bool& option_field, bool default_value)
	+~OptionBool()
	-_def : bool
	-_field : bool&
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionDouble {
	+OptionDouble(std::string option_field_name, double& option_field, double default_value)
	+~OptionDouble()
	-_def : double
	-_field : double&
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionEnum <template <class Tenum>> {
	+OptionEnum(std::string option_field_name, const std::map<std::string, Tenum> m, Tenum& option_field, Tenum default_value)
	+~OptionEnum()
	-_def : Tenum
	-_field : Tenum&
	-_map : std::map<std::string, Tenum>
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionInt {
	+OptionInt(std::string option_field_name, int& option_field, int default_value)
	+~OptionInt()
	-_def : int
	-_field : int&
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionLong {
	+OptionLong(std::string option_field_name, long& option_field, long default_value)
	+~OptionLong()
	-_def : long
	-_field : long&
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	+SetDefault() : void
}


abstract class OptionString {
	+OptionString(std::string option_field_name, std::string& option_field, std::string default_value)
	+~OptionString()
	+SetValue(std::vector<std::string> option_value) : std::string
	-_def : std::string
	-_name : std::string
	-_field : std::string&
	+SetDefault() : void
}


abstract class OptionStringList {
	+OptionStringList(std::string option_field_name, unsigned short& list_size, std::vector<std::string>& option_field)
	+~OptionStringList()
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	-_field : std::vector<std::string>&
	-_size : unsigned short&
	+SetDefault() : void
}


abstract class OptionULong {
	+OptionULong(std::string option_field_name, unsigned long& option_field, unsigned long default_value)
	+~OptionULong()
	+SetValue(std::vector<std::string> option_value) : std::string
	-_name : std::string
	-_def : unsigned long
	-_field : unsigned long&
	+SetDefault() : void
}


class Physics {
	+Physics(Config* settings)
	-_totalxsH2O : Matrix
	-_xsH2O : Matrix
	+{static} Create(Config* settings) : Physics*
	+GetScatteringXS(std::vector<double> energies, std::vector<double> density, std::vector<double> Omegas) : VectorVector
	+GetStoppingPower(std::vector<double> energies, std::vector<double> sH2O) : VectorVector
	+GetTotalXS(std::vector<double> energies, std::vector<double> density) : VectorVector
	-LoadXSH2O(std::string fileName1, std::string fileName2) : void
}


abstract class ProblemBase {
	+ProblemBase(Config* settings, Mesh* mesh)
	#ProblemBase()
	+~ProblemBase()
	#_settings : Config*
	#_mesh : Mesh*
	#_physics : Physics*
	+{static} Create(Config* settings, Mesh* mesh) : ProblemBase*
	+{abstract} GetScatteringXS(const std::vector<double>& energies) : VectorVector
	+{abstract} GetTotalXS(const std::vector<double>& energies) : VectorVector
	+{abstract} SetupIC() : VectorVector
	+{abstract} GetExternalSource(const std::vector<double>& energies) : std::vector<VectorVector>
	+{abstract} GetStoppingPower(const std::vector<double>& energies) : std::vector<double>
	#_density : std::vector<double>
	#_stoppingPower : std::vector<double>
}


class QDummy {
	+QDummy(unsigned order)
	+~QDummy()
	+SetConnectivity() : void
	+SetName() : void
	+SetNq() : void
	+SetPointsAndWeights() : void
}


class QGaussLegendreTensorized {
	+QGaussLegendreTensorized(unsigned order)
	+~QGaussLegendreTensorized()
	+SetConnectivity() : void
	+SetName() : void
	+SetNq() : void
	+SetPointsAndWeights() : void
}


class QLDFESA {
	+QLDFESA(unsigned order)
	+~QLDFESA()
	+GetLookupTable() : std::string
	+SetAvailOrders() : void
	+SetConnectivity() : void
	+SetName() : void
}


class QLebedev {
	+QLebedev(unsigned order)
	+~QLebedev()
	+GetLookupTable() : std::string
	+SetAvailOrders() : void
	+SetConnectivity() : void
	+SetName() : void
}


class QLevelSymmetric {
	+QLevelSymmetric(unsigned order)
	+~QLevelSymmetric()
	+GetLookupTable() : std::string
	+SetAvailOrders() : void
	+SetConnectivity() : void
	+SetName() : void
}


abstract class QLookupQuadrature {
	+QLookupQuadrature(unsigned order)
	+~QLookupQuadrature()
	#CheckOrder() : bool
	#{abstract} GetLookupTable() : std::string
	#_availableOrders : std::vector<unsigned>
	#_nqByOrder : std::vector<unsigned>
	+getAvailOrders() : std::vector<unsigned> {query}
	#{abstract} SetAvailOrders() : void
	#SetNq() : void
	#SetPointsAndWeights() : void
	+printAvailOrders() : void {query}
}


class QMonteCarlo {
	+QMonteCarlo(unsigned order)
	+~QMonteCarlo()
	+SetConnectivity() : void
	+SetName() : void
	+SetNq() : void
	+SetPointsAndWeights() : void
}


abstract class QuadratureBase {
	+QuadratureBase(unsigned order)
	+~QuadratureBase()
	+{static} CreateQuadrature(QUAD_NAME name, unsigned order) : QuadratureBase*
	+GetWeights() : Vector {query}
	#_weights : Vector
	+GetPoints() : VectorVector {query}
	#_points : VectorVector
	+GetConnectivity() : VectorVectorU {query}
	#_connectivity : VectorVectorU
	+Integrate(double(f)(doublex0,doublex1,doublex2)) : double
	+SumUpWeights() : double
	+GetName() : std::string {query}
	#_name : std::string
	+GetNq() : unsigned {query}
	+GetOrder() : unsigned {query}
	#_nq : unsigned
	#_order : unsigned
	+PrintPoints() : void
	+PrintPointsAndWeights() : void
	+PrintWeights() : void
	#{abstract} SetConnectivity() : void
	#{abstract} SetName() : void
	#{abstract} SetNq() : void
	#SetOrder(unsigned order) : void
	#{abstract} SetPointsAndWeights() : void
}


class Reconstructor {
	+Reconstructor(Config* settings)
	+ReconstructSlopeStruct(double uL, double uC, double uR, double dxL, double dxR, std::string limiter) : double {query}
	+ReconstructSlopeUnstruct(unsigned nq, unsigned ncell, VectorVector& psi, VectorVector& psiDerX, VectorVector& psiDerY, Vector& area, VectorVector& neighbor, VectorVector& nx, VectorVector& ny) : void {query}
}


class SNSolver {
	+SNSolver(Config* settings)
	+Save() : void {query}
	+Solve() : void
}


class SNSolverMPI {
	+SNSolverMPI(Config* settings)
	+Save() : void {query}
	+Solve() : void
}


abstract class Solver {
	+Solver(Config* settings)
	#_settings : Config*
	#_scatteringKernel : Matrix
	#_mesh : Mesh*
	#_g : NumericalFlux*
	#_problem : ProblemBase*
	+{static} Create(Config* settings) : Solver*
	#_weights : Vector
	#_psi : VectorVector
	#_quadPoints : VectorVector
	#_sigmaS : VectorVector
	#_sigmaT : VectorVector
	#ComputeTimeStep(double cfl) : double {query}
	#_dE : double
	#_boundaryCells : std::vector<BOUNDARY_TYPE>
	#_Q : std::vector<VectorVector>
	#_areas : std::vector<double>
	#_density : std::vector<double>
	#_energies : std::vector<double>
	#_s : std::vector<double>
	#_normals : std::vector<std::vector<Vector> >
	#_neighbors : std::vector<std::vector<unsigned> >
	#_nCells : unsigned
	#_nEnergies : unsigned
	#_nq : unsigned
	+{abstract} Save() : void {query}
	+{abstract} Solve() : void
}


class UpwindFlux {
	+UpwindFlux(Config* settings)
	+Flux(const Vector& Omega, double psiL, double psiR, const Vector& n) : double {query}
}


enum BOUNDARY_TYPE {
	DIRICHLET
	INVALID
	NEUMANN
	NONE
}


enum KERNEL_NAME {
	KERNEL_Isotropic
}


enum PROBLEM_NAME {
	PROBLEM_Checkerboard
	PROBLEM_ElectronRT
	PROBLEM_LineSource
}


enum QUAD_NAME {
	QUAD_GaussLegendreTensorized
	QUAD_LDFESA
	QUAD_Lebedev
	QUAD_LevelSymmetric
	QUAD_MonteCarlo
}






NumericalFlux <|- - LaxFriedrichsFlux


NumericalFlux <|- - UpwindFlux


OptionBase <|- - COptionUShort


OptionBase <|- - OptionBool


OptionBase <|- - OptionDouble


OptionBase <|- - OptionEnum


OptionBase <|- - OptionInt


OptionBase <|- - OptionLong


OptionBase <|- - OptionString


OptionBase <|- - OptionStringList


OptionBase <|- - OptionULong


ProblemBase <|- - Checkerboard


ProblemBase <|- - ElectronRT


ProblemBase <|- - LineSource


QLookupQuadrature <|- - QLDFESA


QLookupQuadrature <|- - QLebedev


QLookupQuadrature <|- - QLevelSymmetric


QuadratureBase <|- - QDummy


QuadratureBase <|- - QGaussLegendreTensorized


QuadratureBase <|- - QLookupQuadrature


QuadratureBase <|- - QMonteCarlo


Solver <|- - SNSolver


Solver <|- - SNSolverMPI






Config o- - OptionBase


ProblemBase o- - Config


ProblemBase o- - Mesh


ProblemBase o- - Physics


Solver o- - Config


Solver o- - Mesh


Solver o- - NumericalFlux


Solver o- - ProblemBase





@enduml

PlantUML version 1.2020.07(Sun Apr 19 13:42:40 CEST 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 14.0.1+7
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>