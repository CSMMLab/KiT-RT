#include "catch.hpp"
#include "common/config.h"
#include "common/globalconstants.h"
#include "problems/epics.h"
#include "problems/icru.h"
#include "quadratures/qgausslegendre1D.h"

TEST_CASE( "ENDL: checking angular integral of scattering cross sections to be unity", "[physics]" ) {

    EPICS phys( std::string( TESTS_PATH ) + "input/validation_tests/CSD_SN_FP_solver/ENDL_H.txt",
                std::string( TESTS_PATH ) + "input/validation_tests/CSD_SN_FP_solver/ENDL_O.txt",
                std::string( TESTS_PATH ) + "input/validation_tests/CSD_SN_FP_solver/stopping_power.txt" );
    Vector energies{ 1.000E-05 };    // only works for 1e-5
    Vector angles{
        0.000000E+00, 7.615575E-13, 1.189937E-12, 1.713463E-12, 2.332246E-12, 3.046174E-12, 3.855305E-12, 4.759637E-12, 5.759171E-12, 6.853906E-12,
        8.043788E-12, 9.328927E-12, 1.070921E-11, 1.218470E-11, 1.375539E-11, 1.542128E-11, 1.718231E-11, 1.903860E-11, 2.099004E-11, 2.303668E-11,
        2.517853E-11, 2.741557E-11, 2.974782E-11, 3.217521E-11, 3.469786E-11, 3.731565E-11, 4.002865E-11, 4.283685E-11, 4.574019E-11, 4.873879E-11,
        5.183254E-11, 5.502154E-11, 5.830569E-11, 6.168505E-11, 6.515954E-11, 6.872930E-11, 7.239426E-11, 7.615436E-11, 1.189912E-10, 1.713473E-10,
        2.332227E-10, 3.046174E-10, 3.855314E-10, 4.759647E-10, 5.759173E-10, 6.853892E-10, 8.043804E-10, 9.328908E-10, 1.070921E-09, 1.218470E-09,
        1.375538E-09, 1.542126E-09, 1.718233E-09, 1.903859E-09, 2.099004E-09, 2.303669E-09, 2.517853E-09, 2.741557E-09, 2.974779E-09, 3.217521E-09,
        3.469783E-09, 3.731563E-09, 4.002863E-09, 4.283682E-09, 4.574021E-09, 4.873879E-09, 5.183256E-09, 5.502152E-09, 5.830568E-09, 6.168503E-09,
        6.515957E-09, 6.872931E-09, 7.239423E-09, 7.615435E-09, 1.189912E-08, 1.713473E-08, 2.332227E-08, 3.046174E-08, 3.855314E-08, 4.759647E-08,
        5.759173E-08, 6.853892E-08, 8.043804E-08, 9.328908E-08, 1.070921E-07, 1.218470E-07, 1.375538E-07, 1.542126E-07, 1.718233E-07, 1.903859E-07,
        2.099004E-07, 2.303669E-07, 2.517853E-07, 2.741557E-07, 2.974779E-07, 3.217521E-07, 3.469782E-07, 3.731563E-07, 4.002863E-07, 4.283682E-07,
        4.574020E-07, 4.873878E-07, 5.183255E-07, 5.502151E-07, 5.830567E-07, 6.168501E-07, 6.515956E-07, 6.872929E-07, 7.239422E-07, 7.615434E-07,
        1.189911E-06, 1.713472E-06, 2.332225E-06, 3.046171E-06, 3.855309E-06, 4.759640E-06, 5.759162E-06, 6.853876E-06, 8.043782E-06, 9.328879E-06,
        1.070917E-05, 1.218465E-05, 1.375532E-05, 1.542118E-05, 1.718223E-05, 1.903847E-05, 2.098990E-05, 2.303652E-05, 2.517832E-05, 2.741532E-05,
        2.974750E-05, 3.217487E-05, 3.469743E-05, 3.731517E-05, 4.002810E-05, 4.283621E-05, 4.573951E-05, 4.873800E-05, 5.183166E-05, 5.502051E-05,
        5.830454E-05, 6.168376E-05, 6.515815E-05, 6.872773E-05, 7.239249E-05, 7.615242E-05, 9.214394E-05, 1.096583E-04, 1.286953E-04, 1.492551E-04,
        1.713375E-04, 1.949425E-04, 2.200699E-04, 2.467198E-04, 2.748920E-04, 3.045865E-04, 3.358031E-04, 3.685418E-04, 4.028024E-04, 4.385850E-04,
        4.758892E-04, 5.147151E-04, 5.550625E-04, 5.969313E-04, 6.403214E-04, 6.852326E-04, 7.316648E-04, 7.796179E-04, 8.290917E-04, 8.800860E-04,
        9.326008E-04, 9.866358E-04, 1.042191E-03, 1.099266E-03, 1.157861E-03, 1.217975E-03, 1.279609E-03, 1.342761E-03, 1.407433E-03, 1.473624E-03,
        1.541333E-03, 1.610561E-03, 1.681307E-03, 1.753570E-03, 1.827352E-03, 1.902651E-03, 1.979467E-03, 2.057801E-03, 2.137651E-03, 2.219018E-03,
        2.301901E-03, 2.386300E-03, 2.472215E-03, 2.559646E-03, 2.648591E-03, 2.739052E-03, 2.831028E-03, 2.924518E-03, 3.019522E-03, 3.116040E-03,
        3.214072E-03, 3.313617E-03, 3.414675E-03, 3.517246E-03, 3.621329E-03, 3.726924E-03, 3.834031E-03, 3.942649E-03, 4.052779E-03, 4.164419E-03,
        4.277569E-03, 4.392230E-03, 4.508400E-03, 4.626080E-03, 4.745268E-03, 4.865966E-03, 4.988171E-03, 5.111885E-03, 5.237105E-03, 5.363834E-03,
        5.492068E-03, 5.621809E-03, 5.753057E-03, 5.885809E-03, 6.020067E-03, 6.155830E-03, 6.293097E-03, 6.431867E-03, 6.572142E-03, 6.713919E-03,
        6.857199E-03, 7.001981E-03, 7.148265E-03, 7.296051E-03, 7.445337E-03, 7.596123E-03, 7.979651E-03, 8.372546E-03, 8.774801E-03, 9.186408E-03,
        9.607360E-03, 1.003765E-02, 1.047726E-02, 1.092620E-02, 1.138445E-02, 1.185200E-02, 1.232884E-02, 1.281497E-02, 1.331037E-02, 1.381504E-02,
        1.432897E-02, 1.485214E-02, 1.538455E-02, 1.592618E-02, 1.647703E-02, 1.703709E-02, 1.760634E-02, 1.818477E-02, 1.877238E-02, 1.936915E-02,
        1.997507E-02, 2.059013E-02, 2.121432E-02, 2.184762E-02, 2.249003E-02, 2.314152E-02, 2.380210E-02, 2.447174E-02, 2.515044E-02, 2.583817E-02,
        2.653494E-02, 2.724071E-02, 2.795549E-02, 2.867925E-02, 2.941199E-02, 3.015369E-02, 3.090433E-02, 3.166391E-02, 3.243240E-02, 3.320979E-02,
        3.399607E-02, 3.479122E-02, 3.559522E-02, 3.640807E-02, 3.722975E-02, 3.806023E-02, 3.889951E-02, 3.974757E-02, 4.060439E-02, 4.146996E-02,
        4.234426E-02, 4.322727E-02, 4.411898E-02, 4.501936E-02, 4.592841E-02, 4.684611E-02, 4.870736E-02, 5.060298E-02, 5.253282E-02, 5.449674E-02,
        5.649458E-02, 5.852620E-02, 6.059144E-02, 6.269015E-02, 6.482215E-02, 6.698730E-02, 6.918542E-02, 7.141635E-02, 7.367992E-02, 7.597595E-02,
        7.830428E-02, 8.066472E-02, 8.305709E-02, 8.548121E-02, 8.793691E-02, 9.042398E-02, 9.294224E-02, 9.549150E-02, 9.807157E-02, 1.006822E-01,
        1.033233E-01, 1.059946E-01, 1.086959E-01, 1.114270E-01, 1.141877E-01, 1.169778E-01, 1.197970E-01, 1.226452E-01, 1.255221E-01, 1.284276E-01,
        1.313613E-01, 1.343231E-01, 1.373128E-01, 1.403301E-01, 1.433748E-01, 1.464466E-01, 1.495454E-01, 1.526708E-01, 1.558227E-01, 1.590008E-01,
        1.622049E-01, 1.654347E-01, 1.686900E-01, 1.719705E-01, 1.752760E-01, 1.786062E-01, 1.819609E-01, 1.853398E-01, 1.887427E-01, 1.921693E-01,
        1.956193E-01, 1.990925E-01, 2.025886E-01, 2.061074E-01, 2.096485E-01, 2.132118E-01, 2.167969E-01, 2.204035E-01, 2.240315E-01, 2.276805E-01,
        2.313502E-01, 2.350404E-01, 2.387507E-01, 2.424810E-01, 2.462308E-01, 2.500000E-01, 2.537882E-01, 2.575952E-01, 2.614206E-01, 2.652642E-01,
        2.691257E-01, 2.730048E-01, 2.769011E-01, 2.808144E-01, 2.847445E-01, 2.886909E-01, 2.926534E-01, 2.966317E-01, 3.006255E-01, 3.046344E-01,
        3.086583E-01, 3.126967E-01, 3.167494E-01, 3.208160E-01, 3.248963E-01, 3.289899E-01, 3.330966E-01, 3.372159E-01, 3.413477E-01, 3.454915E-01,
        3.496471E-01, 3.538141E-01, 3.579923E-01, 3.621813E-01, 3.663808E-01, 3.705905E-01, 3.748100E-01, 3.790391E-01, 3.832773E-01, 3.875245E-01,
        3.917802E-01, 3.960442E-01, 4.003160E-01, 4.045955E-01, 4.088822E-01, 4.131759E-01, 4.174762E-01, 4.217828E-01, 4.260953E-01, 4.304134E-01,
        4.347369E-01, 4.390653E-01, 4.433984E-01, 4.477358E-01, 4.520771E-01, 4.564221E-01, 4.607705E-01, 4.651218E-01, 4.694757E-01, 4.738320E-01,
        4.781903E-01, 4.825503E-01, 4.869115E-01, 4.912738E-01, 4.956367E-01, 5.000000E-01, 5.043633E-01, 5.087262E-01, 5.130885E-01, 5.174497E-01,
        5.218097E-01, 5.261680E-01, 5.305243E-01, 5.348782E-01, 5.392295E-01, 5.435779E-01, 5.479229E-01, 5.522642E-01, 5.566016E-01, 5.609347E-01,
        5.652631E-01, 5.695866E-01, 5.739047E-01, 5.782172E-01, 5.825238E-01, 5.868241E-01, 5.911178E-01, 5.954045E-01, 5.996840E-01, 6.039558E-01,
        6.082198E-01, 6.124755E-01, 6.167227E-01, 6.209609E-01, 6.251900E-01, 6.294095E-01, 6.336192E-01, 6.378187E-01, 6.420077E-01, 6.461859E-01,
        6.503529E-01, 6.545085E-01, 6.586523E-01, 6.627841E-01, 6.669034E-01, 6.710101E-01, 6.751037E-01, 6.791840E-01, 6.832506E-01, 6.873033E-01,
        6.913417E-01, 6.953656E-01, 6.993745E-01, 7.033683E-01, 7.073466E-01, 7.113091E-01, 7.152555E-01, 7.191856E-01, 7.230989E-01, 7.269952E-01,
        7.308743E-01, 7.347358E-01, 7.385794E-01, 7.424048E-01, 7.462118E-01, 7.500000E-01, 7.537692E-01, 7.575190E-01, 7.612493E-01, 7.649596E-01,
        7.686498E-01, 7.723195E-01, 7.759685E-01, 7.795965E-01, 7.832031E-01, 7.867882E-01, 7.903515E-01, 7.938926E-01, 7.974114E-01, 8.009075E-01,
        8.043807E-01, 8.078307E-01, 8.112573E-01, 8.146602E-01, 8.180391E-01, 8.213938E-01, 8.247240E-01, 8.280295E-01, 8.313100E-01, 8.345653E-01,
        8.377951E-01, 8.409992E-01, 8.441773E-01, 8.473292E-01, 8.504546E-01, 8.535534E-01, 8.566252E-01, 8.596699E-01, 8.626872E-01, 8.656769E-01,
        8.686387E-01, 8.715724E-01, 8.744779E-01, 8.773548E-01, 8.802030E-01, 8.830222E-01, 8.858123E-01, 8.885730E-01, 8.913041E-01, 8.940054E-01,
        8.966767E-01, 8.993178E-01, 9.019284E-01, 9.045085E-01, 9.070578E-01, 9.095760E-01, 9.120631E-01, 9.145188E-01, 9.169429E-01, 9.193353E-01,
        9.216957E-01, 9.240240E-01, 9.263201E-01, 9.285837E-01, 9.308146E-01, 9.330127E-01, 9.351778E-01, 9.373099E-01, 9.394086E-01, 9.414738E-01,
        9.435054E-01, 9.455033E-01, 9.474672E-01, 9.493970E-01, 9.512926E-01, 9.531539E-01, 9.549806E-01, 9.567727E-01, 9.585300E-01, 9.602524E-01,
        9.619398E-01, 9.635919E-01, 9.652088E-01, 9.667902E-01, 9.683361E-01, 9.698463E-01, 9.713207E-01, 9.727593E-01, 9.741618E-01, 9.755283E-01,
        9.768585E-01, 9.781524E-01, 9.794099E-01, 9.806308E-01, 9.818152E-01, 9.829629E-01, 9.840738E-01, 9.851479E-01, 9.861850E-01, 9.871850E-01,
        9.881480E-01, 9.890738E-01, 9.899624E-01, 9.908136E-01, 9.916275E-01, 9.924039E-01, 9.931428E-01, 9.938442E-01, 9.945079E-01, 9.951340E-01,
        9.957224E-01, 9.962731E-01, 9.967859E-01, 9.972609E-01, 9.976981E-01, 9.980973E-01, 9.984587E-01, 9.987820E-01, 9.990674E-01, 9.993148E-01,
        9.995241E-01, 9.996954E-01, 9.998287E-01, 9.999238E-01, 9.999810E-01, 9.99999E-01 };
    VectorVector sXS = phys.GetScatteringXS( energies, angles );

    Vector integral_sXS( energies.size(), 0.0 );
    bool errorWithinBounds = true;
    for( unsigned e = 0; e < energies.size(); ++e ) {
        for( unsigned a = 1; a < angles.size(); ++a ) {
            integral_sXS[e] += 0.5 * ( angles[a] - angles[a - 1] ) * ( sXS[e][a] + sXS[e][a - 1] );
        }
        if( std::fabs( 2.0 * integral_sXS[e] - 1.0 ) > 1e-5 ) errorWithinBounds = false;
    }
    REQUIRE( errorWithinBounds );
}

TEST_CASE( "Test ICRU database" ) {
    QGaussLegendre1D quad( 10 );
    auto quadPoints = quad.GetPoints();
    Vector mu( quadPoints.size() );
    for( unsigned i = 0; i < quadPoints.size(); ++i ) mu[i] = quadPoints[i][0];
    Vector e( 1, 1 );    // 1 MeV
    Config* settings = new Config( std::string( TESTS_PATH ) + "input/unit_tests/problems/icru.cfg" );
    ICRU db( mu, e, settings );

    SECTION( "angular xs" ) {
        double totalXS_ref = 3044.818373;
        Vector angdcs_ref  = { 0.0008375516481,
                              0.001328896037,
                              0.002457411094,
                              0.004851118419,
                              0.01018090027,
                              0.02347518115,
                              0.06329864131,
                              0.2242943217,
                              1.609517792,
                              43.21047681 };
        Matrix angdcsE;
        Vector totalXS_res;
        db.GetAngularScatteringXS( angdcsE, totalXS_res );
        REQUIRE( angdcsE.columns() == 1u );
        REQUIRE( totalXS_res.size() == 1u );
        REQUIRE( std::fabs( totalXS_res[0] - totalXS_ref ) < 1e-6 );
        Vector angdcs = column( angdcsE, 0 );

        REQUIRE( angdcs.size() == angdcs_ref.size() );
        bool errorWithinBounds = true;
        for( unsigned i = 0; i < angdcs.size(); ++i ) {
            if( std::fabs( ( angdcs[i] - angdcs_ref[i] ) / angdcs_ref[i] ) > 1e-6 ) errorWithinBounds = false;
        }
        REQUIRE( errorWithinBounds );
    }

    SECTION( "stopping power" ) {
        double s_ref = 1.8612027;
        Vector s_res;
        db.GetStoppingPower( s_res );
        REQUIRE( s_res.size() == 1u );
        REQUIRE( std::fabs( ( s_res[0] - s_ref ) / s_ref ) < 1e-6 );
    }

    SECTION( "transport coefficients" ) {
        Vector xi_ref{ 38262.31613, 1.812058485, 0.1935796546, 0.140077643 };
        Matrix xi_res( 4, e.size() );
        db.GetTransportCoefficients( xi_res );
        REQUIRE( xi_res.rows() == xi_ref.size() );
        bool errorWithinBounds = true;
        for( unsigned i = 0; i < xi_res.rows(); ++i ) {
            if( std::fabs( ( xi_res( i, 0 ) - xi_ref[i] ) / xi_ref[i] ) > 1e-6 ) errorWithinBounds = false;
        }
        REQUIRE( errorWithinBounds );
    }

    // TODO: causes segmentation fault for unknown reasons
    // delete settings;
}
